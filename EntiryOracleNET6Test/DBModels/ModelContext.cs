using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace EntiryOracleNET6Test.DBModels
{
    public partial class ModelContext : DbContext
    {
        public ModelContext()
        {
        }

        public ModelContext(DbContextOptions<ModelContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Abc> Abcs { get; set; }
        public virtual DbSet<AccountCodeImport> AccountCodeImports { get; set; }
        public virtual DbSet<AccountingFeed> AccountingFeeds { get; set; }
        public virtual DbSet<ActiveOrdersPnet> ActiveOrdersPnets { get; set; }
        public virtual DbSet<ActivePosPnet> ActivePosPnets { get; set; }
        public virtual DbSet<AdjDetail> AdjDetails { get; set; }
        public virtual DbSet<AdjT> AdjTs { get; set; }
        public virtual DbSet<AdjustmentReason> AdjustmentReasons { get; set; }
        public virtual DbSet<Algorithm> Algorithms { get; set; }
        public virtual DbSet<AlgorithmOverride> AlgorithmOverrides { get; set; }
        public virtual DbSet<AlgorithmOverrideReason> AlgorithmOverrideReasons { get; set; }
        public virtual DbSet<AlgorithmOverrideSupplier> AlgorithmOverrideSuppliers { get; set; }
        public virtual DbSet<AlgorithmSupplier> AlgorithmSuppliers { get; set; }
        public virtual DbSet<Amendment> Amendments { get; set; }
        public virtual DbSet<AmendmentStatus> AmendmentStatuses { get; set; }
        public virtual DbSet<AmendmentType> AmendmentTypes { get; set; }
        public virtual DbSet<Amendmetns1jun2021> Amendmetns1jun2021s { get; set; }
        public virtual DbSet<AporReport> AporReports { get; set; }
        public virtual DbSet<AporReportTest> AporReportTests { get; set; }
        public virtual DbSet<Appmenu> Appmenus { get; set; }
        public virtual DbSet<Approval> Approvals { get; set; }
        public virtual DbSet<ApprovalRule> ApprovalRules { get; set; }
        public virtual DbSet<ApprovalStatus> ApprovalStatuses { get; set; }
        public virtual DbSet<ApprovalType> ApprovalTypes { get; set; }
        public virtual DbSet<ApprovalsForddev> ApprovalsForddevs { get; set; }
        public virtual DbSet<Approver> Approvers { get; set; }
        public virtual DbSet<ApproverRole> ApproverRoles { get; set; }
        public virtual DbSet<ApproversJag> ApproversJags { get; set; }
        public virtual DbSet<ApproversList> ApproversLists { get; set; }
        public virtual DbSet<AvgBidRateTab> AvgBidRateTabs { get; set; }
        public virtual DbSet<AvgBillRate> AvgBillRates { get; set; }
        public virtual DbSet<BackgroundVerification> BackgroundVerifications { get; set; }
        public virtual DbSet<Bid> Bids { get; set; }
        public virtual DbSet<BidBreakdown> BidBreakdowns { get; set; }
        public virtual DbSet<BidBreakdownsHistory> BidBreakdownsHistories { get; set; }
        public virtual DbSet<BidBucket> BidBuckets { get; set; }
        public virtual DbSet<BidHistory> BidHistories { get; set; }
        public virtual DbSet<BidStatus> BidStatuses { get; set; }
        public virtual DbSet<BidsBidHistoryMv> BidsBidHistoryMvs { get; set; }
        public virtual DbSet<BillableType> BillableTypes { get; set; }
        public virtual DbSet<BillingGroup> BillingGroups { get; set; }
        public virtual DbSet<BillingIncrement> BillingIncrements { get; set; }
        public virtual DbSet<BkupTargetRate> BkupTargetRates { get; set; }
        public virtual DbSet<Brief> Briefs { get; set; }
        public virtual DbSet<BriefAttachment> BriefAttachments { get; set; }
        public virtual DbSet<BriefType> BriefTypes { get; set; }
        public virtual DbSet<Broadcast> Broadcasts { get; set; }
        public virtual DbSet<BroadcastDetail> BroadcastDetails { get; set; }
        public virtual DbSet<BroadcastGroup> BroadcastGroups { get; set; }
        public virtual DbSet<BroadcastType> BroadcastTypes { get; set; }
        public virtual DbSet<Candidate> Candidates { get; set; }
        public virtual DbSet<CandidateContractee> CandidateContractees { get; set; }
        public virtual DbSet<CandidateContracteeCorrect> CandidateContracteeCorrects { get; set; }
        public virtual DbSet<CandidateIdCorrection> CandidateIdCorrections { get; set; }
        public virtual DbSet<CategoryCode> CategoryCodes { get; set; }
        public virtual DbSet<CcTalenteiFeeFlag> CcTalenteiFeeFlags { get; set; }
        public virtual DbSet<CcWoImport> CcWoImports { get; set; }
        public virtual DbSet<CheckRegister> CheckRegisters { get; set; }
        public virtual DbSet<CitizenshipMaster> CitizenshipMasters { get; set; }
        public virtual DbSet<Class> Classes { get; set; }
        public virtual DbSet<ClassReference> ClassReferences { get; set; }
        public virtual DbSet<ColumnReference> ColumnReferences { get; set; }
        public virtual DbSet<CompetencyMaster> CompetencyMasters { get; set; }
        public virtual DbSet<ContractItemCode> ContractItemCodes { get; set; }
        public virtual DbSet<CostCenter> CostCenters { get; set; }
        public virtual DbSet<CostCenterNew> CostCenterNews { get; set; }
        public virtual DbSet<CostCentersBkup> CostCentersBkups { get; set; }
        public virtual DbSet<CostManagement> CostManagements { get; set; }
        public virtual DbSet<CrewPlantCi> CrewPlantCis { get; set; }
        public virtual DbSet<CustomerRole> CustomerRoles { get; set; }
        public virtual DbSet<CustomerRoleBackup> CustomerRoleBackups { get; set; }
        public virtual DbSet<CustomerSetting> CustomerSettings { get; set; }
        public virtual DbSet<Cycle> Cycles { get; set; }
        public virtual DbSet<CycleStatus> CycleStatuses { get; set; }
        public virtual DbSet<DashboardMaster> DashboardMasters { get; set; }
        public virtual DbSet<DeclinedCode> DeclinedCodes { get; set; }
        public virtual DbSet<Delegation> Delegations { get; set; }
        public virtual DbSet<DelegationType> DelegationTypes { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Deviation> Deviations { get; set; }
        public virtual DbSet<DeviationApprovalCode> DeviationApprovalCodes { get; set; }
        public virtual DbSet<DeviationDenialCode> DeviationDenialCodes { get; set; }
        public virtual DbSet<DeviationPriority> DeviationPriorities { get; set; }
        public virtual DbSet<DeviationStatus> DeviationStatuses { get; set; }
        public virtual DbSet<DeviationType> DeviationTypes { get; set; }
        public virtual DbSet<Division> Divisions { get; set; }
        public virtual DbSet<DmcRepBackup> DmcRepBackups { get; set; }
        public virtual DbSet<DmcReport> DmcReports { get; set; }
        public virtual DbSet<DmcReportBkup> DmcReportBkups { get; set; }
        public virtual DbSet<DmcReportKv> DmcReportKvs { get; set; }
        public virtual DbSet<DorfExceptionStatus> DorfExceptionStatuses { get; set; }
        public virtual DbSet<DorfFeedStatus> DorfFeedStatuses { get; set; }
        public virtual DbSet<DorfFileStatus> DorfFileStatuses { get; set; }
        public virtual DbSet<DorfGroup> DorfGroups { get; set; }
        public virtual DbSet<DorfPo> DorfPos { get; set; }
        public virtual DbSet<DorfTimesheetDatum> DorfTimesheetData { get; set; }
        public virtual DbSet<DraftApproval> DraftApprovals { get; set; }
        public virtual DbSet<DraftOrder> DraftOrders { get; set; }
        public virtual DbSet<DurationUnit> DurationUnits { get; set; }
        public virtual DbSet<EcrReport> EcrReports { get; set; }
        public virtual DbSet<EcrReportBkup> EcrReportBkups { get; set; }
        public virtual DbSet<EcrReportTemp> EcrReportTemps { get; set; }
        public virtual DbSet<Edi> Edis { get; set; }
        public virtual DbSet<EducationMaster> EducationMasters { get; set; }
        public virtual DbSet<ErrorLogDetail> ErrorLogDetails { get; set; }
        public virtual DbSet<ExitCancel> ExitCancels { get; set; }
        public virtual DbSet<ExitCancelTmp> ExitCancelTmps { get; set; }
        public virtual DbSet<ExpenseType> ExpenseTypes { get; set; }
        public virtual DbSet<ExpenseTypeTemp> ExpenseTypeTemps { get; set; }
        public virtual DbSet<Fee> Fees { get; set; }
        public virtual DbSet<FeedGroup> FeedGroups { get; set; }
        public virtual DbSet<FeedGroupSequence> FeedGroupSequences { get; set; }
        public virtual DbSet<FeedGroupSetting> FeedGroupSettings { get; set; }
        public virtual DbSet<FeedJob> FeedJobs { get; set; }
        public virtual DbSet<FeedSequence> FeedSequences { get; set; }
        public virtual DbSet<GradeLevel> GradeLevels { get; set; }
        public virtual DbSet<HelpLink> HelpLinks { get; set; }
        public virtual DbSet<HelpMenu> HelpMenus { get; set; }
        public virtual DbSet<HelpSubMenu> HelpSubMenus { get; set; }
        public virtual DbSet<Hier> Hiers { get; set; }
        public virtual DbSet<HitRateReportTable> HitRateReportTables { get; set; }
        public virtual DbSet<HitTemp1> HitTemp1s { get; set; }
        public virtual DbSet<HitTemp2> HitTemp2s { get; set; }
        public virtual DbSet<HitTemp3> HitTemp3s { get; set; }
        public virtual DbSet<HitTemp4> HitTemp4s { get; set; }
        public virtual DbSet<HitTempTable> HitTempTables { get; set; }
        public virtual DbSet<Hol> Hols { get; set; }
        public virtual DbSet<HoldCode> HoldCodes { get; set; }
        public virtual DbSet<Holiday> Holidays { get; set; }
        public virtual DbSet<InactivePoReport> InactivePoReports { get; set; }
        public virtual DbSet<IneligibleCandidatesPnet> IneligibleCandidatesPnets { get; set; }
        public virtual DbSet<IneligibleReassignment> IneligibleReassignments { get; set; }
        public virtual DbSet<InterviewApproval> InterviewApprovals { get; set; }
        public virtual DbSet<InterviewDetail> InterviewDetails { get; set; }
        public virtual DbSet<InterviewDetailsHistory> InterviewDetailsHistories { get; set; }
        public virtual DbSet<InterviewFeedback> InterviewFeedbacks { get; set; }
        public virtual DbSet<Job> Jobs { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<LanguageMaster> LanguageMasters { get; set; }
        public virtual DbSet<LaunchStatus> LaunchStatuses { get; set; }
        public virtual DbSet<LeaversReport> LeaversReports { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<LocationRegionCode> LocationRegionCodes { get; set; }
        public virtual DbSet<LocationsUkTemp> LocationsUkTemps { get; set; }
        public virtual DbSet<Lookup> Lookups { get; set; }
        public virtual DbSet<Margin> Margins { get; set; }
        public virtual DbSet<MarginType> MarginTypes { get; set; }
        public virtual DbSet<Metric> Metrics { get; set; }
        public virtual DbSet<Microsoftdtproperty> Microsoftdtproperties { get; set; }
        public virtual DbSet<MinorityGroup> MinorityGroups { get; set; }
        public virtual DbSet<MismatchPoDatum> MismatchPoData { get; set; }
        public virtual DbSet<MlogAmendment> MlogAmendments { get; set; }
        public virtual DbSet<MlogAporReport> MlogAporReports { get; set; }
        public virtual DbSet<MlogBid> MlogBids { get; set; }
        public virtual DbSet<MlogBroadcast> MlogBroadcasts { get; set; }
        public virtual DbSet<MlogDmcReport> MlogDmcReports { get; set; }
        public virtual DbSet<MlogProductCode> MlogProductCodes { get; set; }
        public virtual DbSet<MlogPurchaseOrder> MlogPurchaseOrders { get; set; }
        public virtual DbSet<MlogReportUsercostcente> MlogReportUsercostcentes { get; set; }
        public virtual DbSet<MlogSupplier> MlogSuppliers { get; set; }
        public virtual DbSet<MlogTimesheetHeader> MlogTimesheetHeaders { get; set; }
        public virtual DbSet<Multiplier> Multipliers { get; set; }
        public virtual DbSet<MvAmendmentDashboard> MvAmendmentDashboards { get; set; }
        public virtual DbSet<MvAporDashboard> MvAporDashboards { get; set; }
        public virtual DbSet<MvBidpositionDashboard> MvBidpositionDashboards { get; set; }
        public virtual DbSet<MvClass> MvClasses { get; set; }
        public virtual DbSet<MvDcrDashboard> MvDcrDashboards { get; set; }
        public virtual DbSet<MvTimesheetDashboard> MvTimesheetDashboards { get; set; }
        public virtual DbSet<NavPageAccess> NavPageAccesses { get; set; }
        public virtual DbSet<NewLogin> NewLogins { get; set; }
        public virtual DbSet<OldPosPnet> OldPosPnets { get; set; }
        public virtual DbSet<OpenOrdersReport> OpenOrdersReports { get; set; }
        public virtual DbSet<OpenOrdersRrsReport> OpenOrdersRrsReports { get; set; }
        public virtual DbSet<Opn> Opns { get; set; }
        public virtual DbSet<OpnSupplier> OpnSuppliers { get; set; }
        public virtual DbSet<OpnType> OpnTypes { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrderApprovalHistory> OrderApprovalHistories { get; set; }
        public virtual DbSet<OrderHistory> OrderHistories { get; set; }
        public virtual DbSet<OrderHistoryForddev> OrderHistoryForddevs { get; set; }
        public virtual DbSet<OrderLanguage> OrderLanguages { get; set; }
        public virtual DbSet<OrderMultiplier> OrderMultipliers { get; set; }
        public virtual DbSet<OrderNote> OrderNotes { get; set; }
        public virtual DbSet<OrderNotesForddev> OrderNotesForddevs { get; set; }
        public virtual DbSet<OrderResponsibilitiesForddev> OrderResponsibilitiesForddevs { get; set; }
        public virtual DbSet<OrderResponsibility> OrderResponsibilities { get; set; }
        public virtual DbSet<OrderSpecification> OrderSpecifications { get; set; }
        public virtual DbSet<OrderStatus> OrderStatuses { get; set; }
        public virtual DbSet<OrderTask> OrderTasks { get; set; }
        public virtual DbSet<OrderTasksForddev> OrderTasksForddevs { get; set; }
        public virtual DbSet<OrderType> OrderTypes { get; set; }
        public virtual DbSet<OrdersForddev> OrdersForddevs { get; set; }
        public virtual DbSet<OrdersTemp> OrdersTemps { get; set; }
        public virtual DbSet<OrganizationType> OrganizationTypes { get; set; }
        public virtual DbSet<OutgoingMail> OutgoingMails { get; set; }
        public virtual DbSet<OutgoingMailHistory> OutgoingMailHistories { get; set; }
        public virtual DbSet<Page> Pages { get; set; }
        public virtual DbSet<PartialSafe> PartialSaves { get; set; }
        public virtual DbSet<PendingCostCenter> PendingCostCenters { get; set; }
        public virtual DbSet<PendingWorkOrder> PendingWorkOrders { get; set; }
        public virtual DbSet<PerformanceReview> PerformanceReviews { get; set; }
        public virtual DbSet<Person> People { get; set; }
        public virtual DbSet<PlacementTimingBackfill> PlacementTimingBackfills { get; set; }
        public virtual DbSet<PlacementTimingBfOld> PlacementTimingBfOlds { get; set; }
        public virtual DbSet<PlacementTimingNewposition> PlacementTimingNewpositions { get; set; }
        public virtual DbSet<PlacementTimingNpOld> PlacementTimingNpOlds { get; set; }
        public virtual DbSet<PlacementTimingNpTemp> PlacementTimingNpTemps { get; set; }
        public virtual DbSet<PlacementTimingReport> PlacementTimingReports { get; set; }
        public virtual DbSet<PlanTable> PlanTables { get; set; }
        public virtual DbSet<Po10Feb2021> Po10Feb2021s { get; set; }
        public virtual DbSet<Po10jun2021> Po10jun2021s { get; set; }
        public virtual DbSet<PoBackup10jun2021> PoBackup10jun2021s { get; set; }
        public virtual DbSet<PoHist10Feb2021> PoHist10Feb2021s { get; set; }
        public virtual DbSet<PoQuarterTable> PoQuarterTables { get; set; }
        public virtual DbSet<PoStatus> PoStatuses { get; set; }
        public virtual DbSet<PosMultOpt10Feb2021> PosMultOpt10Feb2021s { get; set; }
        public virtual DbSet<PosMultOptHistory1jun2021> PosMultOptHistory1jun2021s { get; set; }
        public virtual DbSet<PosMultiplierOptHistory> PosMultiplierOptHistories { get; set; }
        public virtual DbSet<PosMultiplierOptionsHistory> PosMultiplierOptionsHistories { get; set; }
        public virtual DbSet<Position> Positions { get; set; }
        public virtual DbSet<PositionHistory> PositionHistories { get; set; }
        public virtual DbSet<PositionHistoryFordedev> PositionHistoryFordedevs { get; set; }
        public virtual DbSet<PositionMultOptions1jun2021> PositionMultOptions1jun2021s { get; set; }
        public virtual DbSet<PositionMultiplierOption> PositionMultiplierOptions { get; set; }
        public virtual DbSet<PositionSnapshotInfo> PositionSnapshotInfos { get; set; }
        public virtual DbSet<PositionStatus> PositionStatuses { get; set; }
        public virtual DbSet<Positions376807> Positions376807s { get; set; }
        public virtual DbSet<PositionsForddev> PositionsForddevs { get; set; }
        public virtual DbSet<ProcessErrorLog> ProcessErrorLogs { get; set; }
        public virtual DbSet<ProcessLog> ProcessLogs { get; set; }
        public virtual DbSet<ProductCode> ProductCodes { get; set; }
        public virtual DbSet<ProductCodeMap1> ProductCodeMap1s { get; set; }
        public virtual DbSet<ProductCodesMap> ProductCodesMaps { get; set; }
        public virtual DbSet<ProductCodesMap2> ProductCodesMap2s { get; set; }
        public virtual DbSet<ProductCodesMapBand> ProductCodesMapBands { get; set; }
        public virtual DbSet<ProductMain> ProductMains { get; set; }
        public virtual DbSet<ProductRateCode> ProductRateCodes { get; set; }
        public virtual DbSet<ProductSub> ProductSubs { get; set; }
        public virtual DbSet<ProductcodesTemp> ProductcodesTemps { get; set; }
        public virtual DbSet<PsFeedDataArchieve> PsFeedDataArchieves { get; set; }
        public virtual DbSet<PsFeedDataArchieveTemp> PsFeedDataArchieveTemps { get; set; }
        public virtual DbSet<PsFeedDataTemp> PsFeedDataTemps { get; set; }
        public virtual DbSet<PsFeedDatum> PsFeedData { get; set; }
        public virtual DbSet<PsFeedMaster> PsFeedMasters { get; set; }
        public virtual DbSet<PsFeedMasterTemp> PsFeedMasterTemps { get; set; }
        public virtual DbSet<PsFeedRequest> PsFeedRequests { get; set; }
        public virtual DbSet<PsPositionDatum> PsPositionData { get; set; }
        public virtual DbSet<PsPositionMapping> PsPositionMappings { get; set; }
        public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }
        public virtual DbSet<PurchaseOrdersHistory> PurchaseOrdersHistories { get; set; }
        public virtual DbSet<PurchaseOrdersTalenteibckyp> PurchaseOrdersTalenteibckyps { get; set; }
        public virtual DbSet<QaAccessType> QaAccessTypes { get; set; }
        public virtual DbSet<QaMessage> QaMessages { get; set; }
        public virtual DbSet<QaMessageAccess> QaMessageAccesses { get; set; }
        public virtual DbSet<QaReferenceType> QaReferenceTypes { get; set; }
        public virtual DbSet<QualityCertificationType> QualityCertificationTypes { get; set; }
        public virtual DbSet<QualityRating> QualityRatings { get; set; }
        public virtual DbSet<RatecutChangePo> RatecutChangePos { get; set; }
        public virtual DbSet<RatingCode> RatingCodes { get; set; }
        public virtual DbSet<Rawpodatasupplierfee> Rawpodatasupplierfees { get; set; }
        public virtual DbSet<RegionCode> RegionCodes { get; set; }
        public virtual DbSet<Renewal> Renewals { get; set; }
        public virtual DbSet<RenewalApprover> RenewalApprovers { get; set; }
        public virtual DbSet<RenewalRejectionReason> RenewalRejectionReasons { get; set; }
        public virtual DbSet<ReportGroup> ReportGroups { get; set; }
        public virtual DbSet<ReportJobParameter> ReportJobParameters { get; set; }
        public virtual DbSet<ReportName> ReportNames { get; set; }
        public virtual DbSet<ReportNamesSave> ReportNamesSaves { get; set; }
        public virtual DbSet<ReportParameterType> ReportParameterTypes { get; set; }
        public virtual DbSet<ReportTable> ReportTables { get; set; }
        public virtual DbSet<ReportUsercostcenterAccess> ReportUsercostcenterAccesses { get; set; }
        public virtual DbSet<ReportsJob> ReportsJobs { get; set; }
        public virtual DbSet<ResumepathOldNew> ResumepathOldNews { get; set; }
        public virtual DbSet<ResumepathPnetB2b> ResumepathPnetB2bs { get; set; }
        public virtual DbSet<ResumepathPnetB2bTemp> ResumepathPnetB2bTemps { get; set; }
        public virtual DbSet<RrsCandidateCdsidFeedDatum> RrsCandidateCdsidFeedData { get; set; }
        public virtual DbSet<RrsExceptionStatus> RrsExceptionStatuses { get; set; }
        public virtual DbSet<RrsFeedError> RrsFeedErrors { get; set; }
        public virtual DbSet<RrsFeedMaster> RrsFeedMasters { get; set; }
        public virtual DbSet<RrsHoliday> RrsHolidays { get; set; }
        public virtual DbSet<RrsOrderDatum> RrsOrderData { get; set; }
        public virtual DbSet<RrsPoFileidFeedDataArc> RrsPoFileidFeedDataArcs { get; set; }
        public virtual DbSet<RrsPoFileidFeedDatum> RrsPoFileidFeedData { get; set; }
        public virtual DbSet<RrsSupplierFeed> RrsSupplierFeeds { get; set; }
        public virtual DbSet<RunNumber> RunNumbers { get; set; }
        public virtual DbSet<RupdAmendment> RupdAmendments { get; set; }
        public virtual DbSet<RupdBid> RupdBids { get; set; }
        public virtual DbSet<RupdBroadcast> RupdBroadcasts { get; set; }
        public virtual DbSet<RupdProductCode> RupdProductCodes { get; set; }
        public virtual DbSet<RupdPurchaseOrder> RupdPurchaseOrders { get; set; }
        public virtual DbSet<RupdReportUsercostcente> RupdReportUsercostcentes { get; set; }
        public virtual DbSet<RupdSupplier> RupdSuppliers { get; set; }
        public virtual DbSet<RupdTimesheetHeader> RupdTimesheetHeaders { get; set; }
        public virtual DbSet<SecurityCheck> SecurityChecks { get; set; }
        public virtual DbSet<Sequence> Sequences { get; set; }
        public virtual DbSet<ServiceLevel> ServiceLevels { get; set; }
        public virtual DbSet<Session> Sessions { get; set; }
        public virtual DbSet<SiteCode> SiteCodes { get; set; }
        public virtual DbSet<StartersReport> StartersReports { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<SupplierActivePo1> SupplierActivePos1 { get; set; }
        public virtual DbSet<SupplierActivepo> SupplierActivepos { get; set; }
        public virtual DbSet<SupplierAlgorithm> SupplierAlgorithms { get; set; }
        public virtual DbSet<SupplierAlgorithmHistory> SupplierAlgorithmHistories { get; set; }
        public virtual DbSet<SupplierAmendedPo> SupplierAmendedPos { get; set; }
        public virtual DbSet<SupplierBuyout> SupplierBuyouts { get; set; }
        public virtual DbSet<SupplierCandfeed> SupplierCandfeeds { get; set; }
        public virtual DbSet<SupplierCandsub> SupplierCandsubs { get; set; }
        public virtual DbSet<SupplierClosed> SupplierCloseds { get; set; }
        public virtual DbSet<SupplierContact> SupplierContacts { get; set; }
        public virtual DbSet<SupplierContactPersonnel> SupplierContactPersonnel { get; set; }
        public virtual DbSet<SupplierContactType> SupplierContactTypes { get; set; }
        public virtual DbSet<SupplierContractFee> SupplierContractFees { get; set; }
        public virtual DbSet<SupplierContractFeesBkup> SupplierContractFeesBkups { get; set; }
        public virtual DbSet<SupplierDeclined> SupplierDeclineds { get; set; }
        public virtual DbSet<SupplierHistory> SupplierHistories { get; set; }
        public virtual DbSet<SupplierHold> SupplierHolds { get; set; }
        public virtual DbSet<SupplierHoliday> SupplierHolidays { get; set; }
        public virtual DbSet<SupplierIpAddress> SupplierIpAddresses { get; set; }
        public virtual DbSet<SupplierIpAddressesBkup> SupplierIpAddressesBkups { get; set; }
        public virtual DbSet<SupplierJde> SupplierJdes { get; set; }
        public virtual DbSet<SupplierLocation> SupplierLocations { get; set; }
        public virtual DbSet<SupplierNewPo> SupplierNewPos { get; set; }
        public virtual DbSet<SupplierOpen> SupplierOpens { get; set; }
        public virtual DbSet<SupplierOpen2> SupplierOpen2s { get; set; }
        public virtual DbSet<SupplierQuality> SupplierQualities { get; set; }
        public virtual DbSet<SupplierReplacementDatum> SupplierReplacementData { get; set; }
        public virtual DbSet<SupplierSpecificDatum> SupplierSpecificData { get; set; }
        public virtual DbSet<SupplierStanding> SupplierStandings { get; set; }
        public virtual DbSet<SupplierStanding2> SupplierStanding2s { get; set; }
        public virtual DbSet<SupplierStatus> SupplierStatuses { get; set; }
        public virtual DbSet<SupplierUser> SupplierUsers { get; set; }
        public virtual DbSet<Survey> Surveys { get; set; }
        public virtual DbSet<SurveyQuestion> SurveyQuestions { get; set; }
        public virtual DbSet<SurveyResponse> SurveyResponses { get; set; }
        public virtual DbSet<SurveyResultsCode> SurveyResultsCodes { get; set; }
        public virtual DbSet<SurveyType> SurveyTypes { get; set; }
        public virtual DbSet<TalentEiStaging> TalentEiStagings { get; set; }
        public virtual DbSet<TalentEiTrack> TalentEiTracks { get; set; }
        public virtual DbSet<TalenteiCostCenter> TalenteiCostCenters { get; set; }
        public virtual DbSet<TalenteiFeedDataArchive> TalenteiFeedDataArchives { get; set; }
        public virtual DbSet<TalenteiFeedDatum> TalenteiFeedData { get; set; }
        public virtual DbSet<TargetRate> TargetRates { get; set; }
        public virtual DbSet<TargetRatesTemp> TargetRatesTemps { get; set; }
        public virtual DbSet<Task> Tasks { get; set; }
        public virtual DbSet<TaskType> TaskTypes { get; set; }
        public virtual DbSet<TasksForddev> TasksForddevs { get; set; }
        public virtual DbSet<TemmSuppFee> TemmSuppFees { get; set; }
        public virtual DbSet<Temp> Temps { get; set; }
        public virtual DbSet<Temp1> Temp1s { get; set; }
        public virtual DbSet<Temp2> Temp2s { get; set; }
        public virtual DbSet<Temp3> Temp3s { get; set; }
        public virtual DbSet<Temp4> Temp4s { get; set; }
        public virtual DbSet<TempActivePoLine> TempActivePoLines { get; set; }
        public virtual DbSet<TempActivePoLine12feb> TempActivePoLine12febs { get; set; }
        public virtual DbSet<TempAdsFmccPo> TempAdsFmccPos { get; set; }
        public virtual DbSet<TempAdsTransferPo> TempAdsTransferPos { get; set; }
        public virtual DbSet<TempAporDuplicateResult> TempAporDuplicateResults { get; set; }
        public virtual DbSet<TempAporReport> TempAporReports { get; set; }
        public virtual DbSet<TempAporReportDuplicate> TempAporReportDuplicates { get; set; }
        public virtual DbSet<TempApproversChange> TempApproversChanges { get; set; }
        public virtual DbSet<TempApproversFord> TempApproversFords { get; set; }
        public virtual DbSet<TempApproversFord2> TempApproversFord2s { get; set; }
        public virtual DbSet<TempApproversJag> TempApproversJags { get; set; }
        public virtual DbSet<TempBid> TempBids { get; set; }
        public virtual DbSet<TempBidBucket> TempBidBuckets { get; set; }
        public virtual DbSet<TempCcMap> TempCcMaps { get; set; }
        public virtual DbSet<TempCostCentersUk> TempCostCentersUks { get; set; }
        public virtual DbSet<TempCostcenterAmendment> TempCostcenterAmendments { get; set; }
        public virtual DbSet<TempCount> TempCounts { get; set; }
        public virtual DbSet<TempCustomerSetting> TempCustomerSettings { get; set; }
        public virtual DbSet<TempDept> TempDepts { get; set; }
        public virtual DbSet<TempDivRemap> TempDivRemaps { get; set; }
        public virtual DbSet<TempDivisionUpdate> TempDivisionUpdates { get; set; }
        public virtual DbSet<TempDmcReport> TempDmcReports { get; set; }
        public virtual DbSet<TempDmcReportVerify> TempDmcReportVerifies { get; set; }
        public virtual DbSet<TempEcrReport> TempEcrReports { get; set; }
        public virtual DbSet<TempFmccPo> TempFmccPos { get; set; }
        public virtual DbSet<TempGrApor> TempGrApors { get; set; }
        public virtual DbSet<TempGrDcr> TempGrDcrs { get; set; }
        public virtual DbSet<TempItPosRemap> TempItPosRemaps { get; set; }
        public virtual DbSet<TempLocRegionRemap> TempLocRegionRemaps { get; set; }
        public virtual DbSet<TempLocation> TempLocations { get; set; }
        public virtual DbSet<TempMultiplier> TempMultipliers { get; set; }
        public virtual DbSet<TempNavAuthLevel> TempNavAuthLevels { get; set; }
        public virtual DbSet<TempNavMainMenu> TempNavMainMenus { get; set; }
        public virtual DbSet<TempNavPageAccess> TempNavPageAccesses { get; set; }
        public virtual DbSet<TempNavSubMenu> TempNavSubMenus { get; set; }
        public virtual DbSet<TempPo> TempPos { get; set; }
        public virtual DbSet<TempPo12feb> TempPo12febs { get; set; }
        public virtual DbSet<TempPo1jun2021> TempPo1jun2021s { get; set; }
        public virtual DbSet<TempPohistory1jun2021> TempPohistory1jun2021s { get; set; }
        public virtual DbSet<TempProductCode> TempProductCodes { get; set; }
        public virtual DbSet<TempProductCodesRemap> TempProductCodesRemaps { get; set; }
        public virtual DbSet<TempProductCodesRemapAd> TempProductCodesRemapAds { get; set; }
        public virtual DbSet<TempProductCodesUsford> TempProductCodesUsfords { get; set; }
        public virtual DbSet<TempProductCodesUsfordOld> TempProductCodesUsfordOlds { get; set; }
        public virtual DbSet<TempPsPositionAmendment> TempPsPositionAmendments { get; set; }
        public virtual DbSet<TempPurchaseOrder> TempPurchaseOrders { get; set; }
        public virtual DbSet<TempRateReductionPo> TempRateReductionPos { get; set; }
        public virtual DbSet<TempReportingManager> TempReportingManagers { get; set; }
        public virtual DbSet<TempSupplier> TempSuppliers { get; set; }
        public virtual DbSet<TempSupplierJde> TempSupplierJdes { get; set; }
        public virtual DbSet<TempSupplierNewFee> TempSupplierNewFees { get; set; }
        public virtual DbSet<TempT> TempTs { get; set; }
        public virtual DbSet<TempTRate> TempTRates { get; set; }
        public virtual DbSet<TempTable276419> TempTable276419s { get; set; }
        public virtual DbSet<TempTalentEiTrack> TempTalentEiTracks { get; set; }
        public virtual DbSet<TempTalenteifeeupdate> TempTalenteifeeupdates { get; set; }
        public virtual DbSet<TempTargetRate> TempTargetRates { get; set; }
        public virtual DbSet<TempTargetRatesCpcUsford> TempTargetRatesCpcUsfords { get; set; }
        public virtual DbSet<TempTest> TempTests { get; set; }
        public virtual DbSet<TempTest1> TempTest1s { get; set; }
        public virtual DbSet<TempTreasonMap> TempTreasonMaps { get; set; }
        public virtual DbSet<TempTsDetails10jun2021> TempTsDetails10jun2021s { get; set; }
        public virtual DbSet<TempTsDetails10jun2021A> TempTsDetails10jun2021As { get; set; }
        public virtual DbSet<TempTsDetails10jun2021B> TempTsDetails10jun2021Bs { get; set; }
        public virtual DbSet<TempValidCc> TempValidCcs { get; set; }
        public virtual DbSet<TempWorkOrdersUk> TempWorkOrdersUks { get; set; }
        public virtual DbSet<TempWrongFeePo> TempWrongFeePos { get; set; }
        public virtual DbSet<TempccTalentFeeFlag> TempccTalentFeeFlags { get; set; }
        public virtual DbSet<Temptbl> Temptbls { get; set; }
        public virtual DbSet<TerminationReason> TerminationReasons { get; set; }
        public virtual DbSet<TimesheetAdjust> TimesheetAdjusts { get; set; }
        public virtual DbSet<TimesheetDetail> TimesheetDetails { get; set; }
        public virtual DbSet<TimesheetDetails10jun2021> TimesheetDetails10jun2021s { get; set; }
        public virtual DbSet<TimesheetDetails12feb2021> TimesheetDetails12feb2021s { get; set; }
        public virtual DbSet<TimesheetDetailsCi> TimesheetDetailsCis { get; set; }
        public virtual DbSet<TimesheetError> TimesheetErrors { get; set; }
        public virtual DbSet<TimesheetExport> TimesheetExports { get; set; }
        public virtual DbSet<TimesheetExportEmergency> TimesheetExportEmergencies { get; set; }
        public virtual DbSet<TimesheetExportException> TimesheetExportExceptions { get; set; }
        public virtual DbSet<TimesheetHdetails12feb2021> TimesheetHdetails12feb2021s { get; set; }
        public virtual DbSet<TimesheetHeader> TimesheetHeaders { get; set; }
        public virtual DbSet<TimesheetHeaders12feb2021> TimesheetHeaders12feb2021s { get; set; }
        public virtual DbSet<TimesheetHeadersCi> TimesheetHeadersCis { get; set; }
        public virtual DbSet<TimesheetHheaders12feb2021> TimesheetHheaders12feb2021s { get; set; }
        public virtual DbSet<TimesheetHhours12feb2021> TimesheetHhours12feb2021s { get; set; }
        public virtual DbSet<TimesheetHistoryDetail> TimesheetHistoryDetails { get; set; }
        public virtual DbSet<TimesheetHistoryHeader> TimesheetHistoryHeaders { get; set; }
        public virtual DbSet<TimesheetHistoryHour> TimesheetHistoryHours { get; set; }
        public virtual DbSet<TimesheetHour> TimesheetHours { get; set; }
        public virtual DbSet<TimesheetHours12feb2021> TimesheetHours12feb2021s { get; set; }
        public virtual DbSet<TimesheetHoursCi> TimesheetHoursCis { get; set; }
        public virtual DbSet<TimesheetStatus> TimesheetStatuses { get; set; }
        public virtual DbSet<TrackPkgMovingExpense> TrackPkgMovingExpenses { get; set; }
        public virtual DbSet<TrackProcedure> TrackProcedures { get; set; }
        public virtual DbSet<TrackProcedureTemp> TrackProcedureTemps { get; set; }
        public virtual DbSet<Transition> Transitions { get; set; }
        public virtual DbSet<TransitionCustomer> TransitionCustomers { get; set; }
        public virtual DbSet<TransitionDetail> TransitionDetails { get; set; }
        public virtual DbSet<TransitionError> TransitionErrors { get; set; }
        public virtual DbSet<TransitionFieldDefault> TransitionFieldDefaults { get; set; }
        public virtual DbSet<TransitionReport> TransitionReports { get; set; }
        public virtual DbSet<TransitionReportField> TransitionReportFields { get; set; }
        public virtual DbSet<TsMappingPnet> TsMappingPnets { get; set; }
        public virtual DbSet<UserCostcenterAccess> UserCostcenterAccesses { get; set; }
        public virtual DbSet<UserDashboardAccess> UserDashboardAccesses { get; set; }
        public virtual DbSet<UserReportAccess> UserReportAccesses { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<UserType> UserTypes { get; set; }
        public virtual DbSet<VAllPoRevision> VAllPoRevisions { get; set; }
        public virtual DbSet<VAvgBillRate> VAvgBillRates { get; set; }
        public virtual DbSet<VBidExist> VBidExists { get; set; }
        public virtual DbSet<VBidPlacementDate> VBidPlacementDates { get; set; }
        public virtual DbSet<VBprMinMaxCycle> VBprMinMaxCycles { get; set; }
        public virtual DbSet<VBroadcastsBroadcastDetail> VBroadcastsBroadcastDetails { get; set; }
        public virtual DbSet<VCycleDate> VCycleDates { get; set; }
        public virtual DbSet<VIneligibleCandidate> VIneligibleCandidates { get; set; }
        public virtual DbSet<VLastperiodBilledT> VLastperiodBilledTs { get; set; }
        public virtual DbSet<VMinstartMaxendMaxpol> VMinstartMaxendMaxpols { get; set; }
        public virtual DbSet<VMinstartMaxendMaxpolNo> VMinstartMaxendMaxpolNos { get; set; }
        public virtual DbSet<VMinstartMaxendMaxpolPo> VMinstartMaxendMaxpolPos { get; set; }
        public virtual DbSet<VMinstartMaxendMaxpoline> VMinstartMaxendMaxpolines { get; set; }
        public virtual DbSet<VPoContracteeLine> VPoContracteeLines { get; set; }
        public virtual DbSet<VPoisedPosition> VPoisedPositions { get; set; }
        public virtual DbSet<VPostPoDev> VPostPoDevs { get; set; }
        public virtual DbSet<VRrsBidsDatum> VRrsBidsData { get; set; }
        public virtual DbSet<VRtcBid> VRtcBids { get; set; }
        public virtual DbSet<VSupplierContactInfo> VSupplierContactInfos { get; set; }
        public virtual DbSet<VSupplierPerformanceReport> VSupplierPerformanceReports { get; set; }
        public virtual DbSet<VTeiOrderAllDataFile> VTeiOrderAllDataFiles { get; set; }
        public virtual DbSet<VTeiOrderDataBackup> VTeiOrderDataBackups { get; set; }
        public virtual DbSet<VTeiOrderDataFile> VTeiOrderDataFiles { get; set; }
        public virtual DbSet<VTeiOrderDatum> VTeiOrderData { get; set; }
        public virtual DbSet<VTsDetail> VTsDetails { get; set; }
        public virtual DbSet<VTsDetailsMv> VTsDetailsMvs { get; set; }
        public virtual DbSet<VTsHoursExpense> VTsHoursExpenses { get; set; }
        public virtual DbSet<VTsHoursExpenseMv> VTsHoursExpenseMvs { get; set; }
        public virtual DbSet<VTsTemp> VTsTemps { get; set; }
        public virtual DbSet<VUseridApproverRole> VUseridApproverRoles { get; set; }
        public virtual DbSet<Vacation> Vacations { get; set; }
        public virtual DbSet<VacationReplacement> VacationReplacements { get; set; }
        public virtual DbSet<WorkOrder> WorkOrders { get; set; }
        public virtual DbSet<WorkOrdersNew> WorkOrdersNews { get; set; }

//        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
//        {
//            if (!optionsBuilder.IsConfigured)
//            {
//#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
//                optionsBuilder.UseOracle("User Id = fordus; Password=devil; Data Source = 10.11.10.5:1521/UATFOUS");
//            }
//        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasDefaultSchema("FORDUS");

            modelBuilder.Entity<Abc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ABC");

                entity.Property(e => e.AlgExpectedHit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ALG_EXPECTED_HIT");

                entity.Property(e => e.AlgHit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ALG_HIT");

                entity.Property(e => e.OrderNumOpportunities)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ORDER_NUM_OPPORTUNITIES");

                entity.Property(e => e.OrderNumSuppliers)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ORDER_NUM_SUPPLIERS");

                entity.Property(e => e.Position)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("POSITION");
            });

            modelBuilder.Entity<AccountCodeImport>(entity =>
            {
                entity.ToTable("ACCOUNT_CODE_IMPORT");

                entity.Property(e => e.AccountCodeImportId)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("ACCOUNT_CODE_IMPORT_ID");

                entity.Property(e => e.CompanyCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COMPANY_CODE");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.NationalCompanyCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NATIONAL_COMPANY_CODE");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.WorkOrderNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WORK_ORDER_NUMBER");
            });

            modelBuilder.Entity<AccountingFeed>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ACCOUNTING_FEEDS");

                entity.HasIndex(e => new { e.TimesheetNumber, e.TimesheetRevision }, "IDX1_ACCOUNTING_FEEDS");

                entity.HasIndex(e => new { e.PoNumber, e.ContracteeId, e.WeekEndingDate }, "IDX2_ACCOUNTING_FEEDS");

                entity.HasIndex(e => e.SupplierId, "IDX3_ACCOUNTING_FEEDS");

                entity.HasIndex(e => e.CycleNumber, "IDX4_ACCOUNTING_FEEDS");

                entity.HasIndex(e => e.InvoiceNumber, "IDX5_ACCOUNTING_FEEDS");

                entity.Property(e => e.AmountBilled)
                    .HasColumnType("NUMBER(12,2)")
                    .HasColumnName("AMOUNT_BILLED");

                entity.Property(e => e.AmountPaid)
                    .HasColumnType("NUMBER(12,2)")
                    .HasColumnName("AMOUNT_PAID");

                entity.Property(e => e.CheckAmountBilled)
                    .HasColumnType("NUMBER(12,2)")
                    .HasColumnName("CHECK_AMOUNT_BILLED");

                entity.Property(e => e.CheckAmountPaid)
                    .HasColumnType("NUMBER(12,2)")
                    .HasColumnName("CHECK_AMOUNT_PAID");

                entity.Property(e => e.CheckNumberBilled)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CHECK_NUMBER_BILLED");

                entity.Property(e => e.CheckNumberPaid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CHECK_NUMBER_PAID");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CycleNumber)
                    .HasPrecision(10)
                    .HasColumnName("CYCLE_NUMBER");

                entity.Property(e => e.GroupId)
                    .HasPrecision(10)
                    .HasColumnName("GROUP_ID");

                entity.Property(e => e.InvoiceNumber)
                    .HasPrecision(10)
                    .HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.UdfDate1)
                    .HasColumnType("DATE")
                    .HasColumnName("UDF_DATE1");

                entity.Property(e => e.UdfDate2)
                    .HasColumnType("DATE")
                    .HasColumnName("UDF_DATE2");

                entity.Property(e => e.UdfDate3)
                    .HasColumnType("DATE")
                    .HasColumnName("UDF_DATE3");

                entity.Property(e => e.UdfDate4)
                    .HasColumnType("DATE")
                    .HasColumnName("UDF_DATE4");

                entity.Property(e => e.UdfDate5)
                    .HasColumnType("DATE")
                    .HasColumnName("UDF_DATE5");

                entity.Property(e => e.UdfDecimal1)
                    .HasColumnType("NUMBER(12,2)")
                    .HasColumnName("UDF_DECIMAL1");

                entity.Property(e => e.UdfDecimal10)
                    .HasColumnType("NUMBER(12,2)")
                    .HasColumnName("UDF_DECIMAL10");

                entity.Property(e => e.UdfDecimal2)
                    .HasColumnType("NUMBER(12,2)")
                    .HasColumnName("UDF_DECIMAL2");

                entity.Property(e => e.UdfDecimal3)
                    .HasColumnType("NUMBER(12,2)")
                    .HasColumnName("UDF_DECIMAL3");

                entity.Property(e => e.UdfDecimal4)
                    .HasColumnType("NUMBER(12,2)")
                    .HasColumnName("UDF_DECIMAL4");

                entity.Property(e => e.UdfDecimal5)
                    .HasColumnType("NUMBER(12,2)")
                    .HasColumnName("UDF_DECIMAL5");

                entity.Property(e => e.UdfDecimal6)
                    .HasColumnType("NUMBER(12,2)")
                    .HasColumnName("UDF_DECIMAL6");

                entity.Property(e => e.UdfDecimal7)
                    .HasColumnType("NUMBER(12,2)")
                    .HasColumnName("UDF_DECIMAL7");

                entity.Property(e => e.UdfDecimal8)
                    .HasColumnType("NUMBER(12,2)")
                    .HasColumnName("UDF_DECIMAL8");

                entity.Property(e => e.UdfDecimal9)
                    .HasColumnType("NUMBER(12,2)")
                    .HasColumnName("UDF_DECIMAL9");

                entity.Property(e => e.UdfNumber1)
                    .HasPrecision(10)
                    .HasColumnName("UDF_NUMBER1");

                entity.Property(e => e.UdfNumber10)
                    .HasPrecision(10)
                    .HasColumnName("UDF_NUMBER10");

                entity.Property(e => e.UdfNumber2)
                    .HasPrecision(10)
                    .HasColumnName("UDF_NUMBER2");

                entity.Property(e => e.UdfNumber3)
                    .HasPrecision(10)
                    .HasColumnName("UDF_NUMBER3");

                entity.Property(e => e.UdfNumber4)
                    .HasPrecision(10)
                    .HasColumnName("UDF_NUMBER4");

                entity.Property(e => e.UdfNumber5)
                    .HasPrecision(10)
                    .HasColumnName("UDF_NUMBER5");

                entity.Property(e => e.UdfNumber6)
                    .HasPrecision(10)
                    .HasColumnName("UDF_NUMBER6");

                entity.Property(e => e.UdfNumber7)
                    .HasPrecision(10)
                    .HasColumnName("UDF_NUMBER7");

                entity.Property(e => e.UdfNumber8)
                    .HasPrecision(10)
                    .HasColumnName("UDF_NUMBER8");

                entity.Property(e => e.UdfNumber9)
                    .HasPrecision(10)
                    .HasColumnName("UDF_NUMBER9");

                entity.Property(e => e.UdfString1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING1");

                entity.Property(e => e.UdfString10)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING10");

                entity.Property(e => e.UdfString11)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING11");

                entity.Property(e => e.UdfString12)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING12");

                entity.Property(e => e.UdfString13)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING13");

                entity.Property(e => e.UdfString14)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING14");

                entity.Property(e => e.UdfString15)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING15");

                entity.Property(e => e.UdfString16)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING16");

                entity.Property(e => e.UdfString17)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING17");

                entity.Property(e => e.UdfString18)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING18");

                entity.Property(e => e.UdfString19)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING19");

                entity.Property(e => e.UdfString2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING2");

                entity.Property(e => e.UdfString20)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING20");

                entity.Property(e => e.UdfString3)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING3");

                entity.Property(e => e.UdfString4)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING4");

                entity.Property(e => e.UdfString5)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING5");

                entity.Property(e => e.UdfString6)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING6");

                entity.Property(e => e.UdfString7)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING7");

                entity.Property(e => e.UdfString8)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING8");

                entity.Property(e => e.UdfString9)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING9");

                entity.Property(e => e.WeekEndingDate)
                    .HasColumnType("DATE")
                    .HasColumnName("WEEK_ENDING_DATE");
            });

            modelBuilder.Entity<ActiveOrdersPnet>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ACTIVE_ORDERS_PNET");

                entity.Property(e => e.Issuance)
                    .HasPrecision(10)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_STATUS");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.PositionStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_STATUS");

                entity.Property(e => e.ProcessedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PROCESSED_FLAG");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(10)
                    .HasColumnName("SUB_ISSUANCE");
            });

            modelBuilder.Entity<ActivePosPnet>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ACTIVE_POS_PNET");

                entity.Property(e => e.CandidateId)
                    .HasPrecision(10)
                    .HasColumnName("CANDIDATE_ID");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.ProcessedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PROCESSED_FLAG");
            });

            modelBuilder.Entity<AdjDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ADJ_DETAILS");

                entity.Property(e => e.Amount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.Doc)
                    .HasMaxLength(44)
                    .IsUnicode(false)
                    .HasColumnName("DOC");

                entity.Property(e => e.GroupCode)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("GROUP_CODE");

                entity.Property(e => e.Hours)
                    .HasColumnType("NUMBER")
                    .HasColumnName("HOURS");

                entity.Property(e => e.HoursOrExpenses)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("HOURS_OR_EXPENSES");

                entity.Property(e => e.NewInvoicenum)
                    .HasMaxLength(44)
                    .IsUnicode(false)
                    .HasColumnName("NEW_INVOICENUM");

                entity.Property(e => e.Ponumbereces)
                    .HasMaxLength(17)
                    .IsUnicode(false)
                    .HasColumnName("PONUMBERECES");

                entity.Property(e => e.RateAr)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RATE_AR");

                entity.Property(e => e.WeekEndingDate)
                    .HasColumnType("DATE")
                    .HasColumnName("WEEK_ENDING_DATE");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");
            });

            modelBuilder.Entity<AdjT>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ADJ_TS");

                entity.Property(e => e.Bol)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BOL");

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY")
                    .IsFixedLength(true);

                entity.Property(e => e.DebitCredit)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DEBIT_CREDIT");

                entity.Property(e => e.Doc)
                    .HasPrecision(10)
                    .HasColumnName("DOC");

                entity.Property(e => e.DocDate)
                    .HasColumnType("DATE")
                    .HasColumnName("DOC_DATE");

                entity.Property(e => e.DocTotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DOC_TOTAL");

                entity.Property(e => e.DocType)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("DOC_TYPE")
                    .IsFixedLength(true);

                entity.Property(e => e.Docprefix)
                    .HasMaxLength(43)
                    .IsUnicode(false)
                    .HasColumnName("DOCPREFIX");

                entity.Property(e => e.MultiPlt)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MULTI_PLT")
                    .IsFixedLength(true);

                entity.Property(e => e.MultiPo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MULTI_PO")
                    .IsFixedLength(true);

                entity.Property(e => e.PlantCode)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("PLANT_CODE");

                entity.Property(e => e.Po)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("PO")
                    .IsFixedLength(true);

                entity.Property(e => e.Remitduns)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("REMITDUNS")
                    .IsFixedLength(true);

                entity.Property(e => e.Terms)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TERMS");

                entity.Property(e => e.TsaDate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TSA_DATE");
            });

            modelBuilder.Entity<AdjustmentReason>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("ADJUSTMENT_REASONS");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<Algorithm>(entity =>
            {
                entity.HasKey(e => e.AlgorithmNumber);

                entity.ToTable("ALGORITHMS");

                entity.Property(e => e.AlgorithmNumber)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("ALGORITHM_NUMBER");

                entity.Property(e => e.ActiveFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_FLAG");

                entity.Property(e => e.AlgorithmName)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ALGORITHM_NAME");

                entity.Property(e => e.BillingGroup)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_GROUP");

                entity.Property(e => e.BroadcastGroupCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BROADCAST_GROUP_CODE");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.LastModifiedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_MODIFIED_BY");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_MODIFIED_DATE");

                entity.Property(e => e.LocationRegionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_REGION_CODE");

                entity.HasOne(d => d.BillingGroupNavigation)
                    .WithMany(p => p.Algorithms)
                    .HasForeignKey(d => d.BillingGroup)
                    .HasConstraintName("FK_BILLING_GROUP");

                entity.HasOne(d => d.BroadcastGroupCodeNavigation)
                    .WithMany(p => p.Algorithms)
                    .HasForeignKey(d => d.BroadcastGroupCode)
                    .HasConstraintName("FK_BROAD_GROUP_CODE");

                entity.HasOne(d => d.LocationRegionCodeNavigation)
                    .WithMany(p => p.Algorithms)
                    .HasForeignKey(d => d.LocationRegionCode)
                    .HasConstraintName("FK_AL_LOCATION_REGION_CODE");
            });

            modelBuilder.Entity<AlgorithmOverride>(entity =>
            {
                entity.HasKey(e => new { e.OrderNumber, e.PositionNumber });

                entity.ToTable("ALGORITHM_OVERRIDE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.IncludeAlgorithmFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INCLUDE_ALGORITHM_FLAG");

                entity.Property(e => e.TimingOverrideFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIMING_OVERRIDE_FLAG");

                entity.Property(e => e.TimingOverrideReasonCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TIMING_OVERRIDE_REASON_CODE");
            });

            modelBuilder.Entity<AlgorithmOverrideReason>(entity =>
            {
                entity.HasKey(e => e.ReasonCode);

                entity.ToTable("ALGORITHM_OVERRIDE_REASONS");

                entity.Property(e => e.ReasonCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("REASON_CODE");

                entity.Property(e => e.IsValidFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_VALID_FLAG");

                entity.Property(e => e.ReasonText)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REASON_TEXT");

                entity.Property(e => e.ReasonType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("REASON_TYPE");
            });

            modelBuilder.Entity<AlgorithmOverrideSupplier>(entity =>
            {
                entity.HasKey(e => new { e.OrderNumber, e.SupplierId, e.PositionNumber });

                entity.ToTable("ALGORITHM_OVERRIDE_SUPPLIER");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.CandidateName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_NAME");

                entity.Property(e => e.ExcludeFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("EXCLUDE_FLAG");

                entity.Property(e => e.IncludeFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INCLUDE_FLAG");

                entity.Property(e => e.ReasonCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("REASON_CODE");

                entity.Property(e => e.SpecifiedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPECIFIED_FLAG");
            });

            modelBuilder.Entity<AlgorithmSupplier>(entity =>
            {
                entity.HasKey(e => e.SupplierId);

                entity.ToTable("ALGORITHM_SUPPLIER");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.AlgorithmDay)
                    .HasPrecision(2)
                    .HasColumnName("ALGORITHM_DAY");
            });

            modelBuilder.Entity<Amendment>(entity =>
            {
                entity.HasKey(e => e.AmendmentNumber);

                entity.ToTable("AMENDMENTS");

                entity.HasIndex(e => e.ContracteeId, "IDX_AMENDMENT_REF_CANDIDATE");

                entity.HasIndex(e => e.PositionNumber, "IDX_AMENDMENT_REF_POSITION");

                entity.HasIndex(e => e.OrderNumber, "IDX_ORDER_NO");

                entity.HasIndex(e => e.PoNumber, "IDX_PO_NUMBER");

                entity.Property(e => e.AmendmentNumber)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("AMENDMENT_NUMBER");

                entity.Property(e => e.AmendmentStatus)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("AMENDMENT_STATUS");

                entity.Property(e => e.AmendmentType)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("AMENDMENT_TYPE");

                entity.Property(e => e.ApplyToAllFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("APPLY_TO_ALL_FLAG");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EFFECTIVE_DATE");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.NewValue)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NEW_VALUE");

                entity.Property(e => e.OldValue)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OLD_VALUE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.PoLineNumber)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.HasOne(d => d.AmendmentStatusNavigation)
                    .WithMany(p => p.Amendments)
                    .HasForeignKey(d => d.AmendmentStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AMENDMEN_REF_AMEND_AMENDME2");

                entity.HasOne(d => d.AmendmentTypeNavigation)
                    .WithMany(p => p.Amendments)
                    .HasForeignKey(d => d.AmendmentType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AMENDMEN_REF_AMEND_AMENDMEN");

                entity.HasOne(d => d.Contractee)
                    .WithMany(p => p.Amendments)
                    .HasForeignKey(d => d.ContracteeId)
                    .HasConstraintName("FK_AMENDMEN_REF_16218_CANDIDAT");

                entity.HasOne(d => d.PositionNumberNavigation)
                    .WithMany(p => p.Amendments)
                    .HasForeignKey(d => d.PositionNumber)
                    .HasConstraintName("FK_AMENDMEN_REF_6837_POSITION");
            });

            modelBuilder.Entity<AmendmentStatus>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("AMENDMENT_STATUS");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<AmendmentType>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("AMENDMENT_TYPE");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<Amendmetns1jun2021>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AMENDMETNS_1JUN2021");

                entity.Property(e => e.AmendmentNumber)
                    .HasPrecision(10)
                    .HasColumnName("AMENDMENT_NUMBER");

                entity.Property(e => e.AmendmentStatus)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("AMENDMENT_STATUS");

                entity.Property(e => e.AmendmentType)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("AMENDMENT_TYPE");

                entity.Property(e => e.ApplyToAllFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("APPLY_TO_ALL_FLAG");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EFFECTIVE_DATE");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.NewValue)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NEW_VALUE");

                entity.Property(e => e.OldValue)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OLD_VALUE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.PoLineNumber)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");
            });

            modelBuilder.Entity<AporReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("APOR_REPORT");

                entity.HasIndex(e => e.CandidateId, "CAND_ID_IDX");

                entity.HasIndex(e => e.CostCenter, "COST_CENTER_IDX");

                entity.HasIndex(e => new { e.Month, e.Year }, "MONTH_YEAR_IDX");

                entity.HasIndex(e => e.PoNumber, "PO_NUM_IDX");

                entity.Property(e => e.Building)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BUILDING");

                entity.Property(e => e.CandidateFirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_FIRST_NAME");

                entity.Property(e => e.CandidateId)
                    .HasPrecision(10)
                    .HasColumnName("CANDIDATE_ID");

                entity.Property(e => e.CandidateLastName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_LAST_NAME");

                entity.Property(e => e.CandidateLoginId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_LOGIN_ID");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CustomerFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("CUSTOMER_FEE");

                entity.Property(e => e.CustomerRetiree)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_RETIREE");

                entity.Property(e => e.DivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_CODE");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.Invoice)
                    .HasColumnType("NUMBER(22,10)")
                    .HasColumnName("INVOICE");

                entity.Property(e => e.InvoiceNumber)
                    .HasColumnType("NUMBER(22,10)")
                    .HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.LocationCode)
                    .HasColumnType("NUMBER(22,10)")
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.LoginId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LOGIN_ID");

                entity.Property(e => e.MaxEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("MAX_END_DATE");

                entity.Property(e => e.MinStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("MIN_START_DATE");

                entity.Property(e => e.MiscRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MISC_REF");

                entity.Property(e => e.Month)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MONTH");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.PeopleFirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PEOPLE_FIRST_NAME");

                entity.Property(e => e.PeopleLastName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PEOPLE_LAST_NAME");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNteAmount)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("PO_NTE_AMOUNT");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.ProductMainDescription)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_MAIN_DESCRIPTION");

                entity.Property(e => e.ProductSubDescription)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_SUB_DESCRIPTION");

                entity.Property(e => e.RegionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("REGION_CODE");

                entity.Property(e => e.RegionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REGION_DESCRIPTION");

                entity.Property(e => e.ReportsTo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REPORTS_TO");

                entity.Property(e => e.ReportsToId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("REPORTS_TO_ID");

                entity.Property(e => e.Room)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ROOM");

                entity.Property(e => e.StRateCustomer)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE_CUSTOMER");

                entity.Property(e => e.StRateSupplier)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE_SUPPLIER");

                entity.Property(e => e.SupplierFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_FEE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");

                entity.Property(e => e.UdfDate1)
                    .HasColumnType("DATE")
                    .HasColumnName("UDF_DATE1");

                entity.Property(e => e.UdfDate2)
                    .HasColumnType("DATE")
                    .HasColumnName("UDF_DATE2");

                entity.Property(e => e.UdfDate3)
                    .HasColumnType("DATE")
                    .HasColumnName("UDF_DATE3");

                entity.Property(e => e.UdfDate4)
                    .HasColumnType("DATE")
                    .HasColumnName("UDF_DATE4");

                entity.Property(e => e.UdfDate5)
                    .HasColumnType("DATE")
                    .HasColumnName("UDF_DATE5");

                entity.Property(e => e.UdfDecimal1)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("UDF_DECIMAL1");

                entity.Property(e => e.UdfDecimal2)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("UDF_DECIMAL2");

                entity.Property(e => e.UdfDecimal3)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("UDF_DECIMAL3");

                entity.Property(e => e.UdfDecimal4)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("UDF_DECIMAL4");

                entity.Property(e => e.UdfDecimal5)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("UDF_DECIMAL5");

                entity.Property(e => e.UdfNumber1)
                    .HasPrecision(10)
                    .HasColumnName("UDF_NUMBER1");

                entity.Property(e => e.UdfNumber2)
                    .HasPrecision(10)
                    .HasColumnName("UDF_NUMBER2");

                entity.Property(e => e.UdfNumber3)
                    .HasPrecision(10)
                    .HasColumnName("UDF_NUMBER3");

                entity.Property(e => e.UdfNumber4)
                    .HasPrecision(10)
                    .HasColumnName("UDF_NUMBER4");

                entity.Property(e => e.UdfNumber5)
                    .HasPrecision(10)
                    .HasColumnName("UDF_NUMBER5");

                entity.Property(e => e.UdfString1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING1");

                entity.Property(e => e.UdfString2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING2");

                entity.Property(e => e.UdfString3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING3");

                entity.Property(e => e.UdfString4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING4");

                entity.Property(e => e.UdfString5)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING5");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");

                entity.Property(e => e.Year)
                    .HasColumnType("NUMBER")
                    .HasColumnName("YEAR");
            });

            modelBuilder.Entity<AporReportTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("APOR_REPORT_TEST");

                entity.Property(e => e.Building)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BUILDING");

                entity.Property(e => e.CandidateFirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_FIRST_NAME");

                entity.Property(e => e.CandidateId)
                    .HasPrecision(10)
                    .HasColumnName("CANDIDATE_ID");

                entity.Property(e => e.CandidateLastName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_LAST_NAME");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CustomerFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("CUSTOMER_FEE");

                entity.Property(e => e.CustomerRetiree)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_RETIREE");

                entity.Property(e => e.DivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_CODE");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.Invoice)
                    .HasColumnType("NUMBER(22,10)")
                    .HasColumnName("INVOICE");

                entity.Property(e => e.InvoiceNumber)
                    .HasColumnType("NUMBER(22,10)")
                    .HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.LocationCode)
                    .HasColumnType("NUMBER(22,10)")
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.LoginId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LOGIN_ID");

                entity.Property(e => e.MaxEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("MAX_END_DATE");

                entity.Property(e => e.MinStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("MIN_START_DATE");

                entity.Property(e => e.MiscRef)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MISC_REF");

                entity.Property(e => e.Month)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MONTH");

                entity.Property(e => e.PeopleFirstName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("PEOPLE_FIRST_NAME");

                entity.Property(e => e.PeopleLastName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("PEOPLE_LAST_NAME");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNteAmount)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("PO_NTE_AMOUNT");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.ProductMainDescription)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_MAIN_DESCRIPTION");

                entity.Property(e => e.ProductSubDescription)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_SUB_DESCRIPTION");

                entity.Property(e => e.ReportsTo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REPORTS_TO");

                entity.Property(e => e.ReportsToId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("REPORTS_TO_ID");

                entity.Property(e => e.Room)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ROOM");

                entity.Property(e => e.StRateCustomer)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE_CUSTOMER");

                entity.Property(e => e.StRateSupplier)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE_SUPPLIER");

                entity.Property(e => e.SupplierFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_FEE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");

                entity.Property(e => e.UdfDate1)
                    .HasColumnType("DATE")
                    .HasColumnName("UDF_DATE1");

                entity.Property(e => e.UdfDate2)
                    .HasColumnType("DATE")
                    .HasColumnName("UDF_DATE2");

                entity.Property(e => e.UdfDate3)
                    .HasColumnType("DATE")
                    .HasColumnName("UDF_DATE3");

                entity.Property(e => e.UdfDate4)
                    .HasColumnType("DATE")
                    .HasColumnName("UDF_DATE4");

                entity.Property(e => e.UdfDate5)
                    .HasColumnType("DATE")
                    .HasColumnName("UDF_DATE5");

                entity.Property(e => e.UdfDecimal1)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("UDF_DECIMAL1");

                entity.Property(e => e.UdfDecimal2)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("UDF_DECIMAL2");

                entity.Property(e => e.UdfDecimal3)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("UDF_DECIMAL3");

                entity.Property(e => e.UdfDecimal4)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("UDF_DECIMAL4");

                entity.Property(e => e.UdfDecimal5)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("UDF_DECIMAL5");

                entity.Property(e => e.UdfNumber1)
                    .HasPrecision(10)
                    .HasColumnName("UDF_NUMBER1");

                entity.Property(e => e.UdfNumber2)
                    .HasPrecision(10)
                    .HasColumnName("UDF_NUMBER2");

                entity.Property(e => e.UdfNumber3)
                    .HasPrecision(10)
                    .HasColumnName("UDF_NUMBER3");

                entity.Property(e => e.UdfNumber4)
                    .HasPrecision(10)
                    .HasColumnName("UDF_NUMBER4");

                entity.Property(e => e.UdfNumber5)
                    .HasPrecision(10)
                    .HasColumnName("UDF_NUMBER5");

                entity.Property(e => e.UdfString1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING1");

                entity.Property(e => e.UdfString2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING2");

                entity.Property(e => e.UdfString3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING3");

                entity.Property(e => e.UdfString4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING4");

                entity.Property(e => e.UdfString5)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING5");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");

                entity.Property(e => e.Year)
                    .HasColumnType("NUMBER")
                    .HasColumnName("YEAR");
            });

            modelBuilder.Entity<Appmenu>(entity =>
            {
                entity.HasKey(e => e.Listorder)
                    .HasName("PK_LISTORDER");

                entity.ToTable("APPMENU");

                entity.Property(e => e.Listorder)
                    .HasPrecision(3)
                    .HasColumnName("LISTORDER");

                entity.Property(e => e.Authlevel)
                    .HasPrecision(11)
                    .HasColumnName("AUTHLEVEL");

                entity.Property(e => e.Enabled)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ENABLED")
                    .IsFixedLength(true);

                entity.Property(e => e.Href)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("HREF");

                entity.Property(e => e.Image)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("IMAGE");

                entity.Property(e => e.Modulename)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("MODULENAME");
            });

            modelBuilder.Entity<Approval>(entity =>
            {
                entity.ToTable("APPROVALS");

                entity.HasIndex(e => new { e.ApprovalType, e.ApprovalStatus, e.RequestorId, e.ObjectId }, "APPROVALS_IDX_001");

                entity.HasIndex(e => e.TargetApprover, "IDX_APPROVALS_REF_TRG_APPR");

                entity.HasIndex(e => e.ApprovedBy, "IDX_APPROVAL_REF_PEOPLE");

                entity.HasIndex(e => e.TaskId, "IDX_APPROVAL_REF_TASKS");

                entity.Property(e => e.ApprovalId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("APPROVAL_ID");

                entity.Property(e => e.ApprovalStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("APPROVAL_STATUS");

                entity.Property(e => e.ApprovalType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("APPROVAL_TYPE");

                entity.Property(e => e.ApprovedBy)
                    .HasPrecision(10)
                    .HasColumnName("APPROVED_BY");

                entity.Property(e => e.ApprovedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("APPROVED_DATE");

                entity.Property(e => e.Comments)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.Notes)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.NoticeDate)
                    .HasColumnType("DATE")
                    .HasColumnName("NOTICE_DATE");

                entity.Property(e => e.ObjectId)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("OBJECT_ID");

                entity.Property(e => e.RequestorId)
                    .HasPrecision(10)
                    .HasColumnName("REQUESTOR_ID");

                entity.Property(e => e.Role)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ROLE");

                entity.Property(e => e.TargetApprover)
                    .HasPrecision(10)
                    .HasColumnName("TARGET_APPROVER");

                entity.Property(e => e.TaskId)
                    .HasPrecision(10)
                    .HasColumnName("TASK_ID");

                entity.HasOne(d => d.ApprovalStatusNavigation)
                    .WithMany(p => p.Approvals)
                    .HasForeignKey(d => d.ApprovalStatus)
                    .HasConstraintName("FK_APPROVAL_REF_APPRO_APPROVAL");

                entity.HasOne(d => d.ApprovalTypeNavigation)
                    .WithMany(p => p.Approvals)
                    .HasForeignKey(d => d.ApprovalType)
                    .HasConstraintName("FK_APPROVAL_REF_APPRO_APPROVA2");

                entity.HasOne(d => d.ApprovedByNavigation)
                    .WithMany(p => p.ApprovalApprovedByNavigations)
                    .HasForeignKey(d => d.ApprovedBy)
                    .HasConstraintName("FK_APPROVAL_REF_17445_PEOPLE");

                entity.HasOne(d => d.RoleNavigation)
                    .WithMany(p => p.Approvals)
                    .HasForeignKey(d => d.Role)
                    .HasConstraintName("FK_APPROVAL_REF_APPRO_APPROVE2");

                entity.HasOne(d => d.TargetApproverNavigation)
                    .WithMany(p => p.ApprovalTargetApproverNavigations)
                    .HasForeignKey(d => d.TargetApprover)
                    .HasConstraintName("FK_APPROVALS_TARGET_APPROVER");

                entity.HasOne(d => d.Task)
                    .WithMany(p => p.Approvals)
                    .HasForeignKey(d => d.TaskId)
                    .HasConstraintName("FK_APPROVAL_REF_TASKS_TASKS");
            });

            modelBuilder.Entity<ApprovalRule>(entity =>
            {
                entity.HasKey(e => new { e.CostCenter, e.Role });

                entity.ToTable("APPROVAL_RULES");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.Role)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ROLE");

                entity.Property(e => e.LastUpdatedBy)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.NumberRequired)
                    .HasPrecision(2)
                    .HasColumnName("NUMBER_REQUIRED");

                entity.HasOne(d => d.RoleNavigation)
                    .WithMany(p => p.ApprovalRules)
                    .HasForeignKey(d => d.Role)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_APPROVAL_REF_APPRO_APPROVER");
            });

            modelBuilder.Entity<ApprovalStatus>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("APPROVAL_STATUS");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<ApprovalType>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("APPROVAL_TYPE");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<ApprovalsForddev>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("APPROVALS_FORDDEV");

                entity.Property(e => e.ApprovalId)
                    .HasPrecision(10)
                    .HasColumnName("APPROVAL_ID");

                entity.Property(e => e.ApprovalStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("APPROVAL_STATUS");

                entity.Property(e => e.ApprovalType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("APPROVAL_TYPE");

                entity.Property(e => e.ApprovedBy)
                    .HasPrecision(10)
                    .HasColumnName("APPROVED_BY");

                entity.Property(e => e.ApprovedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("APPROVED_DATE");

                entity.Property(e => e.Comments)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.Notes)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.NoticeDate)
                    .HasColumnType("DATE")
                    .HasColumnName("NOTICE_DATE");

                entity.Property(e => e.ObjectId)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("OBJECT_ID");

                entity.Property(e => e.RequestorId)
                    .HasPrecision(10)
                    .HasColumnName("REQUESTOR_ID");

                entity.Property(e => e.Role)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ROLE");

                entity.Property(e => e.TargetApprover)
                    .HasPrecision(10)
                    .HasColumnName("TARGET_APPROVER");

                entity.Property(e => e.TaskId)
                    .HasPrecision(10)
                    .HasColumnName("TASK_ID");
            });

            modelBuilder.Entity<Approver>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.Role, e.CostCenter });

                entity.ToTable("APPROVERS");

                entity.HasIndex(e => e.DivisionCode, "IDX_APP_DIV_CODE");

                entity.Property(e => e.UserId)
                    .HasPrecision(10)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.Role)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ROLE");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.ApproverSequenceNumber)
                    .HasPrecision(3)
                    .HasColumnName("APPROVER_SEQUENCE_NUMBER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.DivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_CODE");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.Notes)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.PassiveApproverFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PASSIVE_APPROVER_FLAG")
                    .HasDefaultValueSql("('N')");

                entity.HasOne(d => d.RoleNavigation)
                    .WithMany(p => p.Approvers)
                    .HasForeignKey(d => d.Role)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_APPROVER_REF_APPRO_APPROVER");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Approvers)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_APPROVER_REF_PEOPL_PEOPLE");
            });

            modelBuilder.Entity<ApproverRole>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("APPROVER_ROLE");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<ApproversJag>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("APPROVERS_JAG");

                entity.Property(e => e.ApproverSequenceNumber)
                    .HasPrecision(3)
                    .HasColumnName("APPROVER_SEQUENCE_NUMBER");

                entity.Property(e => e.CostCenter)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.DivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_CODE");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.Notes)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.PassiveApproverFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PASSIVE_APPROVER_FLAG");

                entity.Property(e => e.Role)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ROLE");

                entity.Property(e => e.UserId)
                    .HasPrecision(10)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<ApproversList>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("APPROVERS_LIST");

                entity.HasIndex(e => new { e.Unit, e.Opnsloc, e.Dept, e.ApproverCdsId, e.AccountProfessional, e.Type, e.ApproverRole, e.ApproverNotes }, "IDX_T_AL")
                    .IsUnique();

                entity.Property(e => e.AccountProfessional)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_PROFESSIONAL");

                entity.Property(e => e.ApproverCdsId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("APPROVER_CDS_ID");

                entity.Property(e => e.ApproverNotes)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("APPROVER_NOTES");

                entity.Property(e => e.ApproverRole)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("APPROVER_ROLE");

                entity.Property(e => e.Ccs)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CCS");

                entity.Property(e => e.ClericalCcs)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CLERICAL_CCS");

                entity.Property(e => e.Ctm)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CTM");

                entity.Property(e => e.DepartmentActivity)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DEPARTMENT_ACTIVITY");

                entity.Property(e => e.DepartmentName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DEPARTMENT_NAME");

                entity.Property(e => e.Dept)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DEPT");

                entity.Property(e => e.Division)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION");

                entity.Property(e => e.Opnsloc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OPNSLOC");

                entity.Property(e => e.Type)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TYPE");

                entity.Property(e => e.Unit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");
            });

            modelBuilder.Entity<AvgBidRateTab>(entity =>
            {
                entity.HasKey(e => e.SupplierName)
                    .HasName("SYS_C0012012");

                entity.ToTable("AVG_BID_RATE_TAB");

                entity.Property(e => e.SupplierName)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SUPPLIER_NAME");
            });

            modelBuilder.Entity<AvgBillRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AVG_BILL_RATE");

                entity.Property(e => e.BackfillStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BACKFILL_STATUS");

                entity.Property(e => e.BillingGroupCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_GROUP_CODE");

                entity.Property(e => e.BroadcastType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BROADCAST_TYPE");

                entity.Property(e => e.Commodity)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("COMMODITY");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CustomerFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("CUSTOMER_FEE");

                entity.Property(e => e.CustomerRetiree)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_RETIREE");

                entity.Property(e => e.DivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_CODE");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EFFECTIVE_DATE");

                entity.Property(e => e.GradeLevel)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.PoBillrate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PO_BILLRATE");

                entity.Property(e => e.PoStrate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("PO_STRATE");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.PositionStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_STATUS");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RegionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("REGION_CODE");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("SUB_ISSUANCE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");

                entity.Property(e => e.Trate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TRATE");
            });

            modelBuilder.Entity<BackgroundVerification>(entity =>
            {
                entity.HasKey(e => e.HistoryId)
                    .HasName("PK_");

                entity.ToTable("BACKGROUND_VERIFICATION");

                entity.HasIndex(e => new { e.OrderNumber, e.BidNumber, e.CandidateId }, "IDX_BACKGROUND_VERI");

                entity.Property(e => e.HistoryId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("HISTORY_ID");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.BvInitiateDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BV_INITIATE_DATE");

                entity.Property(e => e.BvInitiated)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BV_INITIATED")
                    .IsFixedLength(true);

                entity.Property(e => e.BvRecd)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BV_RECD")
                    .IsFixedLength(true);

                entity.Property(e => e.BvRecdDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BV_RECD_DATE");

                entity.Property(e => e.BvRejectDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BV_REJECT_DATE");

                entity.Property(e => e.BvRejected)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BV_REJECTED")
                    .IsFixedLength(true);

                entity.Property(e => e.BvToYale)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BV_TO_YALE")
                    .IsFixedLength(true);

                entity.Property(e => e.BvWaived)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BV_WAIVED")
                    .IsFixedLength(true);

                entity.Property(e => e.BvWaivedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BV_WAIVED_DATE");

                entity.Property(e => e.BvYaleDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BV_YALE_DATE");

                entity.Property(e => e.CandidateId)
                    .HasPrecision(10)
                    .HasColumnName("CANDIDATE_ID");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.HasOne(d => d.BidNumberNavigation)
                    .WithMany(p => p.BackgroundVerifications)
                    .HasForeignKey(d => d.BidNumber)
                    .HasConstraintName("FK_BID_NUM");

                entity.HasOne(d => d.Candidate)
                    .WithMany(p => p.BackgroundVerifications)
                    .HasForeignKey(d => d.CandidateId)
                    .HasConstraintName("FK_CANDIDATE_ID");

                entity.HasOne(d => d.OrderNumberNavigation)
                    .WithMany(p => p.BackgroundVerifications)
                    .HasForeignKey(d => d.OrderNumber)
                    .HasConstraintName("FK_ORDER_NUM");
            });

            modelBuilder.Entity<Bid>(entity =>
            {
                entity.HasKey(e => e.BidNumber);

                entity.ToTable("BIDS");

                entity.HasIndex(e => new { e.OrderNumber, e.Issuance, e.CandidateId, e.SupplierId, e.BidNumber }, "BIDS_IDX_001");

                entity.HasIndex(e => new { e.SupplierId, e.Issuance, e.OrderNumber, e.BidNumber }, "BIDS_IDX_005");

                entity.HasIndex(e => new { e.OrderNumber, e.Issuance, e.BidStatus, e.CandidateId, e.SupplierId, e.BidNumber }, "BIDS_ORDER_NUMBER_INDX");

                entity.HasIndex(e => new { e.SupplierId, e.CandidateId, e.BidStatus, e.BidReceivedDate }, "BIDS_SUPPLIER_ID_INDX");

                entity.HasIndex(e => e.CandidateId, "CANDIDATE_ID_INDX");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.AdditionalInfo)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONAL_INFO");

                entity.Property(e => e.Availability)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("AVAILABILITY");

                entity.Property(e => e.BidFaxedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BID_FAXED_DATE");

                entity.Property(e => e.BidReceivedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BID_RECEIVED_DATE");

                entity.Property(e => e.BidStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BID_STATUS");

                entity.Property(e => e.CandRetiredDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CAND_RETIRED_DATE");

                entity.Property(e => e.CandRetiredGrade)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CAND_RETIRED_GRADE");

                entity.Property(e => e.CandidateId)
                    .HasPrecision(10)
                    .HasColumnName("CANDIDATE_ID");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CustomerRetiree)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_RETIREE")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.DaysToEligibility)
                    .HasPrecision(3)
                    .HasColumnName("DAYS_TO_ELIGIBILITY");

                entity.Property(e => e.DeclinedCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DECLINED_CODE");

                entity.Property(e => e.DeclinedComments)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("DECLINED_COMMENTS");

                entity.Property(e => e.EduPreferred)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EDU_PREFERRED");

                entity.Property(e => e.EduRequired)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EDU_REQUIRED");

                entity.Property(e => e.EligibleUsWorkerFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ELIGIBLE_US_WORKER_FLAG");

                entity.Property(e => e.EmpReleaseReqFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("EMP_RELEASE_REQ_FLAG")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.ExpPreferred)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EXP_PREFERRED");

                entity.Property(e => e.ExpRequired)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EXP_REQUIRED");

                entity.Property(e => e.InterviewAvailabilityDate)
                    .HasColumnType("DATE")
                    .HasColumnName("INTERVIEW_AVAILABILITY_DATE");

                entity.Property(e => e.InterviewCompletedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("INTERVIEW_COMPLETED_DATE");

                entity.Property(e => e.InterviewExpense)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("INTERVIEW_EXPENSE");

                entity.Property(e => e.InterviewNotes)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("INTERVIEW_NOTES");

                entity.Property(e => e.InterviewWantedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INTERVIEW_WANTED_FLAG")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.Nationality)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NATIONALITY");

                entity.Property(e => e.NoSsnReason)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NO_SSN_REASON");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OriginalRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ORIGINAL_RATE");

                entity.Property(e => e.OtPremiumRequiredFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("OT_PREMIUM_REQUIRED_FLAG");

                entity.Property(e => e.PhoneInterviewOnlyFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PHONE_INTERVIEW_ONLY_FLAG")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.PreapprovedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PREAPPROVED_FLAG")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.PrescreenFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PRESCREEN_FLAG")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.PrevCustPositionType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("PREV_CUST_POSITION_TYPE");

                entity.Property(e => e.PrevCustWorkNoViolation)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PREV_CUST_WORK_NO_VIOLATION")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.PrevCustomerManagers)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("PREV_CUSTOMER_MANAGERS");

                entity.Property(e => e.PrevCustomerPosEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PREV_CUSTOMER_POS_END_DATE");

                entity.Property(e => e.PrevCustomerPosFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PREV_CUSTOMER_POS_FLAG")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.RateOverTargetFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RATE_OVER_TARGET_FLAG")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.RecruiterName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RECRUITER_NAME");

                entity.Property(e => e.RecruiterPhone)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("RECRUITER_PHONE");

                entity.Property(e => e.RelocationExpense)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("RELOCATION_EXPENSE");

                entity.Property(e => e.ResumeComments)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("RESUME_COMMENTS");

                entity.Property(e => e.ResumePath)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("RESUME_PATH");

                entity.Property(e => e.ResumeReviewedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RESUME_REVIEWED_FLAG")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.SkillsPreferred)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SKILLS_PREFERRED");

                entity.Property(e => e.SkillsRequired)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SKILLS_REQUIRED");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.TransferViolationFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TRANSFER_VIOLATION_FLAG")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf10)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF10");

                entity.Property(e => e.Udf11)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF11");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.Udf5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF5");

                entity.Property(e => e.Udf6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF6");

                entity.Property(e => e.Udf7)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF7");

                entity.Property(e => e.Udf8)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF8");

                entity.Property(e => e.Udf9)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF9");

                entity.Property(e => e.WorkPermitFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("WORK_PERMIT_FLAG");

                entity.HasOne(d => d.BidStatusNavigation)
                    .WithMany(p => p.Bids)
                    .HasForeignKey(d => d.BidStatus)
                    .HasConstraintName("FK_BIDS_BID_STATUS");

                entity.HasOne(d => d.Candidate)
                    .WithMany(p => p.Bids)
                    .HasForeignKey(d => d.CandidateId)
                    .HasConstraintName("FK_BID_CANDIDATE_CAND_ID");
            });

            modelBuilder.Entity<BidBreakdown>(entity =>
            {
                entity.HasKey(e => e.DeviationNumber);

                entity.ToTable("BID_BREAKDOWNS");

                entity.Property(e => e.DeviationNumber)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("DEVIATION_NUMBER");

                entity.Property(e => e.AdditionalInfo)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONAL_INFO");

                entity.Property(e => e.AdministrationCost)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ADMINISTRATION_COST");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.BidType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BID_TYPE")
                    .HasDefaultValueSql("('STD')");

                entity.Property(e => e.Comments)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.EmploymentStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("EMPLOYMENT_STATUS");

                entity.Property(e => e.Facilities)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("FACILITIES");

                entity.Property(e => e.Fica)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("FICA");

                entity.Property(e => e.Futa)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("FUTA");

                entity.Property(e => e.GeneralManagement)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("GENERAL_MANAGEMENT");

                entity.Property(e => e.HealthInsurance)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("HEALTH_INSURANCE");

                entity.Property(e => e.HolidayMultiplier)
                    .HasColumnType("NUMBER(7,3)")
                    .HasColumnName("HOLIDAY_MULTIPLIER");

                entity.Property(e => e.LifeInsurance)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("LIFE_INSURANCE");

                entity.Property(e => e.NonbillableWork)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("NONBILLABLE_WORK");

                entity.Property(e => e.OtherOpExpenses)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("OTHER_OP_EXPENSES");

                entity.Property(e => e.OtherSemivarExpenses)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("OTHER_SEMIVAR_EXPENSES");

                entity.Property(e => e.OvertimeMultiplier)
                    .HasColumnType("NUMBER(7,3)")
                    .HasColumnName("OVERTIME_MULTIPLIER");

                entity.Property(e => e.PaidTimeOff)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("PAID_TIME_OFF");

                entity.Property(e => e.Phone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PHONE");

                entity.Property(e => e.Recruiting)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("RECRUITING");

                entity.Property(e => e.Selling)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SELLING");

                entity.Property(e => e.ShiftPremiumMultiplier)
                    .HasColumnType("NUMBER(7,3)")
                    .HasColumnName("SHIFT_PREMIUM_MULTIPLIER");

                entity.Property(e => e.SicknessCost)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("SICKNESS_COST");

                entity.Property(e => e.SingleBusinessTax)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SINGLE_BUSINESS_TAX");

                entity.Property(e => e.StraightTimeRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("STRAIGHT_TIME_RATE");

                entity.Property(e => e.SupplierMarginPercent)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("SUPPLIER_MARGIN_PERCENT");

                entity.Property(e => e.SupplierRep)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_REP");

                entity.Property(e => e.Suta)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUTA");

                entity.Property(e => e.TotalHourlyCosts)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TOTAL_HOURLY_COSTS");

                entity.Property(e => e.TotalOpExpenses)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TOTAL_OP_EXPENSES");

                entity.Property(e => e.TotalSemivarExpenses)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TOTAL_SEMIVAR_EXPENSES");

                entity.Property(e => e.TotalVarExpenses)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TOTAL_VAR_EXPENSES");

                entity.Property(e => e.TrainingCost)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TRAINING_COST");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.WorkersCompCost)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("WORKERS_COMP_COST");
            });

            modelBuilder.Entity<BidBreakdownsHistory>(entity =>
            {
                entity.ToTable("BID_BREAKDOWNS_HISTORY");

                entity.Property(e => e.BidBreakdownsHistoryId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("BID_BREAKDOWNS_HISTORY_ID");

                entity.Property(e => e.AdditionalInfo)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONAL_INFO");

                entity.Property(e => e.AdministrationCost)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ADMINISTRATION_COST");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.BidType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BID_TYPE");

                entity.Property(e => e.Comments)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.DeviationNumber)
                    .HasPrecision(10)
                    .HasColumnName("DEVIATION_NUMBER");

                entity.Property(e => e.EmploymentStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("EMPLOYMENT_STATUS");

                entity.Property(e => e.Facilities)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("FACILITIES");

                entity.Property(e => e.Fica)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("FICA");

                entity.Property(e => e.Futa)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("FUTA");

                entity.Property(e => e.GeneralManagement)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("GENERAL_MANAGEMENT");

                entity.Property(e => e.HealthInsurance)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("HEALTH_INSURANCE");

                entity.Property(e => e.HolidayMultiplier)
                    .HasColumnType("NUMBER(7,3)")
                    .HasColumnName("HOLIDAY_MULTIPLIER");

                entity.Property(e => e.LifeInsurance)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("LIFE_INSURANCE");

                entity.Property(e => e.NonbillableWork)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("NONBILLABLE_WORK");

                entity.Property(e => e.OtherOpExpenses)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("OTHER_OP_EXPENSES");

                entity.Property(e => e.OtherSemivarExpenses)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("OTHER_SEMIVAR_EXPENSES");

                entity.Property(e => e.OvertimeMultiplier)
                    .HasColumnType("NUMBER(7,3)")
                    .HasColumnName("OVERTIME_MULTIPLIER");

                entity.Property(e => e.PaidTimeOff)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("PAID_TIME_OFF");

                entity.Property(e => e.Phone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PHONE");

                entity.Property(e => e.Recruiting)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("RECRUITING");

                entity.Property(e => e.Selling)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SELLING");

                entity.Property(e => e.ShiftPremiumMultiplier)
                    .HasColumnType("NUMBER(7,3)")
                    .HasColumnName("SHIFT_PREMIUM_MULTIPLIER");

                entity.Property(e => e.SicknessCost)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("SICKNESS_COST");

                entity.Property(e => e.SingleBusinessTax)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SINGLE_BUSINESS_TAX");

                entity.Property(e => e.StraightTimeRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("STRAIGHT_TIME_RATE");

                entity.Property(e => e.SupplierMarginPercent)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("SUPPLIER_MARGIN_PERCENT");

                entity.Property(e => e.SupplierRep)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_REP");

                entity.Property(e => e.Suta)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUTA");

                entity.Property(e => e.TotalHourlyCosts)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TOTAL_HOURLY_COSTS");

                entity.Property(e => e.TotalOpExpenses)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TOTAL_OP_EXPENSES");

                entity.Property(e => e.TotalSemivarExpenses)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TOTAL_SEMIVAR_EXPENSES");

                entity.Property(e => e.TotalVarExpenses)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TOTAL_VAR_EXPENSES");

                entity.Property(e => e.TrainingCost)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TRAINING_COST");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.WorkersCompCost)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("WORKERS_COMP_COST");
            });

            modelBuilder.Entity<BidBucket>(entity =>
            {
                entity.HasKey(e => e.BidBucketNumber);

                entity.ToTable("BID_BUCKET");

                entity.Property(e => e.BidBucketNumber)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("BID_BUCKET_NUMBER");

                entity.Property(e => e.AdditionalInfo)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONAL_INFO");

                entity.Property(e => e.Availability)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("AVAILABILITY");

                entity.Property(e => e.BidFaxedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BID_FAXED_DATE");

                entity.Property(e => e.BidReceivedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BID_RECEIVED_DATE");

                entity.Property(e => e.CandRetiredDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CAND_RETIRED_DATE");

                entity.Property(e => e.CandRetiredGrade)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CAND_RETIRED_GRADE");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CustomerRetiree)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_RETIREE")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.DaysToEligibility)
                    .HasPrecision(3)
                    .HasColumnName("DAYS_TO_ELIGIBILITY");

                entity.Property(e => e.EduPreferred)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EDU_PREFERRED");

                entity.Property(e => e.EduRequired)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EDU_REQUIRED");

                entity.Property(e => e.EligibleUsWorkerFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ELIGIBLE_US_WORKER_FLAG");

                entity.Property(e => e.EmpReleaseReqFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("EMP_RELEASE_REQ_FLAG")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.ExpPreferred)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EXP_PREFERRED");

                entity.Property(e => e.ExpRequired)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EXP_REQUIRED");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("FIRST_NAME");

                entity.Property(e => e.InterviewAvailabilityDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INTERVIEW_AVAILABILITY_DATE");

                entity.Property(e => e.InterviewCompletedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("INTERVIEW_COMPLETED_DATE");

                entity.Property(e => e.InterviewExpense)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("INTERVIEW_EXPENSE");

                entity.Property(e => e.InterviewNotes)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("INTERVIEW_NOTES");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.LastName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LAST_NAME");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.MiddleInitial)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("MIDDLE_INITIAL");

                entity.Property(e => e.Nationality)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NATIONALITY");

                entity.Property(e => e.NoSsnReason)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NO_SSN_REASON");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OriginalRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ORIGINAL_RATE");

                entity.Property(e => e.OtPremiumRequiredFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("OT_PREMIUM_REQUIRED_FLAG");

                entity.Property(e => e.PhoneInterviewOnlyFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PHONE_INTERVIEW_ONLY_FLAG");

                entity.Property(e => e.PreapprovedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PREAPPROVED_FLAG")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.PrevCustPositionEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PREV_CUST_POSITION_END_DATE");

                entity.Property(e => e.PrevCustPositionFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PREV_CUST_POSITION_FLAG")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.PrevCustPositionType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("PREV_CUST_POSITION_TYPE");

                entity.Property(e => e.PrevCustomerManagers)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("PREV_CUSTOMER_MANAGERS");

                entity.Property(e => e.RateOverTargetFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RATE_OVER_TARGET_FLAG")
                    .HasDefaultValueSql("'N'");

                entity.Property(e => e.RecruiterName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RECRUITER_NAME");

                entity.Property(e => e.RecruiterPhone)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("RECRUITER_PHONE");

                entity.Property(e => e.RelocationExpense)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("RELOCATION_EXPENSE");

                entity.Property(e => e.ResumeComments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("RESUME_COMMENTS");

                entity.Property(e => e.ResumePath)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("RESUME_PATH");

                entity.Property(e => e.ResumeReviewedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RESUME_REVIEWED_FLAG")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.SkillsPreferred)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SKILLS_PREFERRED");

                entity.Property(e => e.SkillsRequired)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SKILLS_REQUIRED");

                entity.Property(e => e.Ssn)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("SSN");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.TransferViolationFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TRANSFER_VIOLATION_FLAG");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.Udf5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF5");

                entity.Property(e => e.Udf6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF6");

                entity.Property(e => e.WorkPermitFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("WORK_PERMIT_FLAG");
            });

            modelBuilder.Entity<BidHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId)
                    .HasName("PK1_BID_HISTORY");

                entity.ToTable("BID_HISTORY");

                entity.HasIndex(e => new { e.BidStatus, e.BidNumber, e.CreatedBy }, "BID_HISTORY_IDX_002");

                entity.HasIndex(e => new { e.BidStatus, e.CreatedDate }, "BID_HISTORY_INDX1");

                entity.HasIndex(e => new { e.BidNumber, e.BidStatus }, "BID_STATUS_BID_NUM_INDX2");

                entity.Property(e => e.HistoryId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("HISTORY_ID");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.BidStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BID_STATUS");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.StatusChangedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_CHANGED_FLAG")
                    .HasDefaultValueSql("'N'");

                entity.HasOne(d => d.BidNumberNavigation)
                    .WithMany(p => p.BidHistories)
                    .HasForeignKey(d => d.BidNumber)
                    .HasConstraintName("FK_BID_HISTORY_BIDS");
            });

            modelBuilder.Entity<BidStatus>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("BID_STATUS");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<BidsBidHistoryMv>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BIDS_BID_HISTORY_MV");

                entity.HasIndex(e => e.BidNumber, "BID_MV_INDX");

                entity.Property(e => e.BidDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BID_DATE");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.BidRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("BID_RATE");

                entity.Property(e => e.CpDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CP_DATE");

                entity.Property(e => e.IvCustDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IV_CUST_DATE");

                entity.Property(e => e.IvRebidDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IV_REBID_DATE");

                entity.Property(e => e.IvRequestedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IV_REQUESTED_DATE");

                entity.Property(e => e.PrescrDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PRESCR_DATE");

                entity.Property(e => e.RtcDate)
                    .HasColumnType("DATE")
                    .HasColumnName("RTC_DATE");

                entity.Property(e => e.ScDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SC_DATE");
            });

            modelBuilder.Entity<BillableType>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("BILLABLE_TYPE");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsBillable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_BILLABLE");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");
            });

            modelBuilder.Entity<BillingGroup>(entity =>
            {
                entity.HasKey(e => e.BillingGroupCode);

                entity.ToTable("BILLING_GROUP");

                entity.Property(e => e.BillingGroupCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_GROUP_CODE");

                entity.Property(e => e.BidLimit)
                    .HasPrecision(5)
                    .HasColumnName("BID_LIMIT");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.High)
                    .HasPrecision(7)
                    .HasColumnName("HIGH");

                entity.Property(e => e.Low)
                    .HasPrecision(7)
                    .HasColumnName("LOW");

                entity.Property(e => e.StdTimingDays)
                    .HasPrecision(5)
                    .HasColumnName("STD_TIMING_DAYS");
            });

            modelBuilder.Entity<BillingIncrement>(entity =>
            {
                entity.HasKey(e => e.IncrementId)
                    .HasName("PK_BILLING_INCREMENT");

                entity.ToTable("BILLING_INCREMENTS");

                entity.Property(e => e.IncrementId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("INCREMENT_ID");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EFFECTIVE_DATE");

                entity.Property(e => e.IncrementValue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INCREMENT_VALUE");
            });

            modelBuilder.Entity<BkupTargetRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BKUP_TARGET_RATES");

                entity.Property(e => e.BillingGroupCode)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_GROUP_CODE");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EFFECTIVE_DATE");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("REGION_CODE");

                entity.Property(e => e.SupplierTargetRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_TARGET_RATE");

                entity.Property(e => e.TargetRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TARGET_RATE");
            });

            modelBuilder.Entity<Brief>(entity =>
            {
                entity.ToTable("BRIEFS");

                entity.Property(e => e.BriefId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("BRIEF_ID");

                entity.Property(e => e.AvailableFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AVAILABLE_FLAG");

                entity.Property(e => e.BriefOrigin)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BRIEF_ORIGIN");

                entity.Property(e => e.BriefSubject)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRIEF_SUBJECT");

                entity.Property(e => e.BriefText)
                    .IsRequired()
                    .HasColumnType("LONG")
                    .HasColumnName("BRIEF_TEXT");

                entity.Property(e => e.BriefType)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BRIEF_TYPE");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.DateExpires)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE_EXPIRES");

                entity.Property(e => e.DateStart)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE_START");

                entity.HasOne(d => d.BriefTypeNavigation)
                    .WithMany(p => p.Briefs)
                    .HasForeignKey(d => d.BriefType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BRIEFS_REF_BRIEF_BRIEF_TY");
            });

            modelBuilder.Entity<BriefAttachment>(entity =>
            {
                entity.HasKey(e => e.AttachmentId);

                entity.ToTable("BRIEF_ATTACHMENTS");

                entity.HasIndex(e => e.AttachmentTitle, "IND_ATTACHMENT_TITLES");

                entity.HasIndex(e => e.BriefId, "IND_BRIEF_ID");

                entity.Property(e => e.AttachmentId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ATTACHMENT_ID");

                entity.Property(e => e.AttachmentPath)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ATTACHMENT_PATH");

                entity.Property(e => e.AttachmentSize)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("ATTACHMENT_SIZE");

                entity.Property(e => e.AttachmentTitle)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ATTACHMENT_TITLE");

                entity.Property(e => e.BriefId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BRIEF_ID");
            });

            modelBuilder.Entity<BriefType>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("BRIEF_TYPE");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<Broadcast>(entity =>
            {
                entity.ToTable("BROADCASTS");

                entity.HasIndex(e => new { e.OrderNumber, e.Issuance, e.BroadcastDate }, "BROADCASTS_IDX");

                entity.HasIndex(e => new { e.UndoBroadcastFlag, e.BroadcastId, e.OrderNumber }, "BROADCASTS_IDX_001");

                entity.HasIndex(e => new { e.BroadcastId, e.Issuance, e.OrderNumber }, "BROADCASTS_IDX_006")
                    .IsUnique();

                entity.Property(e => e.BroadcastId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("BROADCAST_ID");

                entity.Property(e => e.AlgorithmDay)
                    .HasPrecision(18)
                    .HasColumnName("ALGORITHM_DAY");

                entity.Property(e => e.AlgorithmNumber)
                    .HasPrecision(18)
                    .HasColumnName("ALGORITHM_NUMBER");

                entity.Property(e => e.BroadcastDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BROADCAST_DATE");

                entity.Property(e => e.BroadcastRound)
                    .HasPrecision(2)
                    .HasColumnName("BROADCAST_ROUND");

                entity.Property(e => e.BroadcastType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BROADCAST_TYPE");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("SUB_ISSUANCE");

                entity.Property(e => e.TimingOverrideReason)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TIMING_OVERRIDE_REASON");

                entity.Property(e => e.UndoBroadcastFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("UNDO_BROADCAST_FLAG");

                entity.HasOne(d => d.BroadcastTypeNavigation)
                    .WithMany(p => p.Broadcasts)
                    .HasForeignKey(d => d.BroadcastType)
                    .HasConstraintName("FK_BROADCAS_REF_12951_BROADCAS");

                entity.HasOne(d => d.OrderNumberNavigation)
                    .WithMany(p => p.Broadcasts)
                    .HasForeignKey(d => d.OrderNumber)
                    .HasConstraintName("FK_BROADCASTS_ORDERS");

                entity.HasOne(d => d.TimingOverrideReasonNavigation)
                    .WithMany(p => p.Broadcasts)
                    .HasForeignKey(d => d.TimingOverrideReason)
                    .HasConstraintName("FK_BROADCAS_REF_ALGOO_ALGORITH");
            });

            modelBuilder.Entity<BroadcastDetail>(entity =>
            {
                entity.HasKey(e => new { e.BroadcastId, e.SupplierId });

                entity.ToTable("BROADCAST_DETAIL");

                entity.HasIndex(e => e.SupplierId, "BROADCASTS_DETAIL_IDX");

                entity.HasIndex(e => e.ExcludedFlag, "BROADCASTS_DETAIL_IDX1");

                entity.HasIndex(e => e.BroadcastId, "BROADCASTS_DETAIL_IDX3");

                entity.Property(e => e.BroadcastId)
                    .HasPrecision(10)
                    .HasColumnName("BROADCAST_ID");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.AlgorithmOverrideReason)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ALGORITHM_OVERRIDE_REASON");

                entity.Property(e => e.CandidateName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_NAME");

                entity.Property(e => e.ExcludedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("EXCLUDED_FLAG");

                entity.Property(e => e.IncludedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INCLUDED_FLAG");

                entity.Property(e => e.MaxRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("MAX_RATE");

                entity.Property(e => e.PassFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PASS_FLAG");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("DATE")
                    .HasColumnName("RESPONSE_DATE");

                entity.Property(e => e.SpecifiedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPECIFIED_FLAG");
            });

            modelBuilder.Entity<BroadcastGroup>(entity =>
            {
                entity.HasKey(e => e.Code)
                    .HasName("PK_BG_TYPE");

                entity.ToTable("BROADCAST_GROUP");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<BroadcastType>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("BROADCAST_TYPE");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<Candidate>(entity =>
            {
                entity.ToTable("CANDIDATES");

                entity.HasIndex(e => new { e.CandidateId, e.LastName, e.FirstName }, "CANDIDATES_IDX_001")
                    .IsUnique();

                entity.HasIndex(e => new { e.LastName, e.CandidateId, e.FirstName, e.MiddleInitial }, "CANDIDATES_IDX_002");

                entity.HasIndex(e => new { e.FirstName, e.LastName, e.CandidateId }, "CANDIDATES_INDX");

                entity.HasIndex(e => e.Ssn, "SSN_INDX");

                entity.Property(e => e.CandidateId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("CANDIDATE_ID");

                entity.Property(e => e.CustomerRetireeFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_RETIREE_FLAG")
                    .HasDefaultValueSql("'N'");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FIRST_NAME");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LAST_NAME");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.MiddleInitial)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MIDDLE_INITIAL");

                entity.Property(e => e.Ssn)
                    .IsRequired()
                    .HasMaxLength(280)
                    .IsUnicode(false)
                    .HasColumnName("SSN");
            });

            modelBuilder.Entity<CandidateContractee>(entity =>
            {
                entity.HasKey(e => new { e.CandidateId, e.UserId });

                entity.ToTable("CANDIDATE_CONTRACTEE");

                entity.HasIndex(e => e.UserId, "IDX_CANDIDATE_REF_PEOPLE");

                entity.Property(e => e.CandidateId)
                    .HasPrecision(10)
                    .HasColumnName("CANDIDATE_ID");

                entity.Property(e => e.UserId)
                    .HasPrecision(10)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.UserField1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_FIELD1");

                entity.Property(e => e.UserField2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_FIELD2");

                entity.Property(e => e.UserField3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_FIELD3");

                entity.Property(e => e.UserField4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_FIELD4");

                entity.HasOne(d => d.Candidate)
                    .WithMany(p => p.CandidateContractees)
                    .HasForeignKey(d => d.CandidateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CANDIDAT_REF_CADID_CANDIDAT");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CandidateContractees)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CANDIDAT_REF_PEOPL_PEOPLE");
            });

            modelBuilder.Entity<CandidateContracteeCorrect>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CANDIDATE_CONTRACTEE_CORRECT");

                entity.Property(e => e.CandidateId)
                    .HasPrecision(10)
                    .HasColumnName("CANDIDATE_ID");

                entity.Property(e => e.UserField1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_FIELD1");

                entity.Property(e => e.UserField2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_FIELD2");

                entity.Property(e => e.UserField3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_FIELD3");

                entity.Property(e => e.UserField4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_FIELD4");

                entity.Property(e => e.UserId)
                    .HasPrecision(10)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<CandidateIdCorrection>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CANDIDATE_ID_CORRECTION");

                entity.Property(e => e.CorrectCdsId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CORRECT_CDS_ID");

                entity.Property(e => e.Corrected)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CORRECTED")
                    .HasDefaultValueSql("'N'");

                entity.Property(e => e.CorrectedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CORRECTED_DATE");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.LoginId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LOGIN_ID");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");
            });

            modelBuilder.Entity<CategoryCode>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("CATEGORY_CODE");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<CcTalenteiFeeFlag>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CC_TALENTEI_FEE_FLAG");

                entity.Property(e => e.AddlFeeAllowed)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ADDL_FEE_ALLOWED");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.LastUpdatedBy)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");
            });

            modelBuilder.Entity<CcWoImport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CC_WO_IMPORT");

                entity.Property(e => e.UdfString1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING1");

                entity.Property(e => e.UdfString10)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING10");

                entity.Property(e => e.UdfString11)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING11");

                entity.Property(e => e.UdfString12)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING12");

                entity.Property(e => e.UdfString13)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING13");

                entity.Property(e => e.UdfString14)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING14");

                entity.Property(e => e.UdfString15)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING15");

                entity.Property(e => e.UdfString16)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING16");

                entity.Property(e => e.UdfString17)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING17");

                entity.Property(e => e.UdfString18)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING18");

                entity.Property(e => e.UdfString19)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING19");

                entity.Property(e => e.UdfString2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING2");

                entity.Property(e => e.UdfString20)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING20");

                entity.Property(e => e.UdfString3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING3");

                entity.Property(e => e.UdfString4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING4");

                entity.Property(e => e.UdfString5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING5");

                entity.Property(e => e.UdfString6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING6");

                entity.Property(e => e.UdfString7)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING7");

                entity.Property(e => e.UdfString8)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING8");

                entity.Property(e => e.UdfString9)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING9");
            });

            modelBuilder.Entity<CheckRegister>(entity =>
            {
                entity.HasKey(e => e.RegisterId)
                    .HasName("PK_REGISTER_ID");

                entity.ToTable("CHECK_REGISTER");

                entity.HasIndex(e => e.InvoiceNumber, "CHECKREGISTER_INDEX_INVNUM");

                entity.HasIndex(e => e.CheckDate, "CHECK_DATE_IDX");

                entity.HasIndex(e => e.CheckNumber, "CHECK_NUMBER_IDX");

                entity.HasIndex(e => e.PoNumber, "PO_NUMBER_IDX");

                entity.Property(e => e.RegisterId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REGISTER_ID");

                entity.Property(e => e.CheckDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CHECK_DATE");

                entity.Property(e => e.CheckNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("CHECK_NUMBER");

                entity.Property(e => e.CycleNumber)
                    .HasPrecision(10)
                    .HasColumnName("CYCLE_NUMBER");

                entity.Property(e => e.DiscountAmount)
                    .HasColumnType("NUMBER(22,11)")
                    .HasColumnName("DISCOUNT_AMOUNT");

                entity.Property(e => e.GrossAmount)
                    .HasColumnType("NUMBER(22,11)")
                    .HasColumnName("GROSS_AMOUNT");

                entity.Property(e => e.GroupId)
                    .HasPrecision(10)
                    .HasColumnName("GROUP_ID");

                entity.Property(e => e.ImportDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IMPORT_DATE");

                entity.Property(e => e.InvoiceNumber)
                    .HasPrecision(18)
                    .HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.JdeSupplierId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("JDE_SUPPLIER_ID");

                entity.Property(e => e.PayItem)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PAY_ITEM");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.Suffix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("SUFFIX");

                entity.Property(e => e.TimesheetCount)
                    .HasColumnType("NUMBER(22,6)")
                    .HasColumnName("TIMESHEET_COUNT");

                entity.Property(e => e.WeekEndingDate)
                    .HasColumnType("DATE")
                    .HasColumnName("WEEK_ENDING_DATE");

                entity.Property(e => e.WorkOrderNumber)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("WORK_ORDER_NUMBER");
            });

            modelBuilder.Entity<CitizenshipMaster>(entity =>
            {
                entity.HasKey(e => e.CitizenshipCode)
                    .HasName("CITIZENSHIP_MASTER_PK");

                entity.ToTable("CITIZENSHIP_MASTER");

                entity.Property(e => e.CitizenshipCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CITIZENSHIP_CODE");

                entity.Property(e => e.ActiveFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_FLAG");

                entity.Property(e => e.CitizenshipName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CITIZENSHIP_NAME");
            });

            modelBuilder.Entity<Class>(entity =>
            {
                entity.ToTable("CLASSES");

                entity.Property(e => e.ClassId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("CLASS_ID");

                entity.Property(e => e.ClassName)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("CLASS_NAME");
            });

            modelBuilder.Entity<ClassReference>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CLASS_REFERENCE");

                entity.Property(e => e.ClassId)
                    .HasPrecision(10)
                    .HasColumnName("CLASS_ID");

                entity.Property(e => e.ReferenceId)
                    .HasPrecision(10)
                    .HasColumnName("REFERENCE_ID");
            });

            modelBuilder.Entity<ColumnReference>(entity =>
            {
                entity.HasKey(e => new { e.TableName, e.ColumnName });

                entity.ToTable("COLUMN_REFERENCE");

                entity.Property(e => e.TableName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TABLE_NAME");

                entity.Property(e => e.ColumnName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COLUMN_NAME");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Label)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LABEL");
            });

            modelBuilder.Entity<CompetencyMaster>(entity =>
            {
                entity.HasKey(e => e.CompetencyCode)
                    .HasName("COMPETENCY_MASTER_PK");

                entity.ToTable("COMPETENCY_MASTER");

                entity.Property(e => e.CompetencyCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("COMPETENCY_CODE");

                entity.Property(e => e.ActiveFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_FLAG");

                entity.Property(e => e.CompetencyName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("COMPETENCY_NAME");
            });

            modelBuilder.Entity<ContractItemCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CONTRACT_ITEM_CODE");

                entity.Property(e => e.BillingClass)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_CLASS");

                entity.Property(e => e.BillingGroup)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_GROUP");

                entity.Property(e => e.Description)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.ItemClassName)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_CLASS_NAME");

                entity.Property(e => e.MainCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MAIN_CODE");

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.SubCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SUB_CODE");

                entity.Property(e => e.Title)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("TITLE");
            });

            modelBuilder.Entity<CostCenter>(entity =>
            {
                entity.HasKey(e => e.CostCenter1);

                entity.ToTable("COST_CENTERS");

                entity.HasIndex(e => e.ReqDeveloperId, "IDX_COST_CENTERS_REF_PEOPLE");

                entity.Property(e => e.CostCenter1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.AccountManagerId)
                    .HasPrecision(10)
                    .HasColumnName("ACCOUNT_MANAGER_ID");

                entity.Property(e => e.ActiveFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_FLAG")
                    .HasDefaultValueSql("'N' ");

                entity.Property(e => e.BackgroundVerificationFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BACKGROUND_VERIFICATION_FLAG");

                entity.Property(e => e.ChannelPartnerId)
                    .HasPrecision(10)
                    .HasColumnName("CHANNEL_PARTNER_ID");

                entity.Property(e => e.DepartmentId)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DEPARTMENT_ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_CODE");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.RenewalSubmitterId)
                    .HasPrecision(10)
                    .HasColumnName("RENEWAL_SUBMITTER_ID");

                entity.Property(e => e.ReqDeveloperId)
                    .HasPrecision(10)
                    .HasColumnName("REQ_DEVELOPER_ID");

                entity.Property(e => e.StaffingSpecialistId)
                    .HasPrecision(10)
                    .HasColumnName("STAFFING_SPECIALIST_ID");

                entity.Property(e => e.SupplierRelationsId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_RELATIONS_ID");

                entity.HasOne(d => d.ReqDeveloper)
                    .WithMany(p => p.CostCenters)
                    .HasForeignKey(d => d.ReqDeveloperId)
                    .HasConstraintName("FK_COST_CEN_REF_PEOPL_PEOPLE3");
            });

            modelBuilder.Entity<CostCenterNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("COST_CENTER_NEW");

                entity.Property(e => e.AccountManagerId)
                    .HasPrecision(10)
                    .HasColumnName("ACCOUNT_MANAGER_ID");

                entity.Property(e => e.ActiveFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_FLAG");

                entity.Property(e => e.BackgroundVerificationFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BACKGROUND_VERIFICATION_FLAG");

                entity.Property(e => e.CostCenter)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.DepartmentId)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DEPARTMENT_ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_CODE");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.ReqDeveloperId)
                    .HasPrecision(10)
                    .HasColumnName("REQ_DEVELOPER_ID");

                entity.Property(e => e.StaffingSpecialistId)
                    .HasPrecision(10)
                    .HasColumnName("STAFFING_SPECIALIST_ID");
            });

            modelBuilder.Entity<CostCentersBkup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("COST_CENTERS_BKUP");

                entity.Property(e => e.AccountManagerId)
                    .HasPrecision(10)
                    .HasColumnName("ACCOUNT_MANAGER_ID");

                entity.Property(e => e.ActiveFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_FLAG");

                entity.Property(e => e.BackgroundVerificationFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BACKGROUND_VERIFICATION_FLAG");

                entity.Property(e => e.ChannelPartnerId)
                    .HasPrecision(10)
                    .HasColumnName("CHANNEL_PARTNER_ID");

                entity.Property(e => e.CostCenter)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.DepartmentId)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DEPARTMENT_ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_CODE");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.RenewalSubmitterId)
                    .HasPrecision(10)
                    .HasColumnName("RENEWAL_SUBMITTER_ID");

                entity.Property(e => e.ReqDeveloperId)
                    .HasPrecision(10)
                    .HasColumnName("REQ_DEVELOPER_ID");

                entity.Property(e => e.StaffingSpecialistId)
                    .HasPrecision(10)
                    .HasColumnName("STAFFING_SPECIALIST_ID");

                entity.Property(e => e.SupplierRelationsId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_RELATIONS_ID");
            });

            modelBuilder.Entity<CostManagement>(entity =>
            {
                entity.HasKey(e => e.CostMgmtId);

                entity.ToTable("COST_MANAGEMENT");

                entity.HasIndex(e => e.DeviationNumber, "IDX_DEVIATION_NUMBER");

                entity.Property(e => e.CostMgmtId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("COST_MGMT_ID");

                entity.Property(e => e.CostMgmtComments)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("COST_MGMT_COMMENTS");

                entity.Property(e => e.CostMgmtRequested)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("COST_MGMT_REQUESTED");

                entity.Property(e => e.CostMgmtRequestorUserId)
                    .HasPrecision(10)
                    .HasColumnName("COST_MGMT_REQUESTOR_USER_ID");

                entity.Property(e => e.CustomerComments)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_COMMENTS");

                entity.Property(e => e.CustomerConfirmationFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_CONFIRMATION_FLAG");

                entity.Property(e => e.CustomerUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CUSTOMER_UPDATED_DATE");

                entity.Property(e => e.CustomerUserId)
                    .HasPrecision(10)
                    .HasColumnName("CUSTOMER_USER_ID");

                entity.Property(e => e.DeviationNumber)
                    .HasPrecision(10)
                    .HasColumnName("DEVIATION_NUMBER");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SupplierComments)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_COMMENTS");

                entity.Property(e => e.SupplierConfirmationFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_CONFIRMATION_FLAG");

                entity.Property(e => e.SupplierUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SUPPLIER_UPDATED_DATE");

                entity.Property(e => e.SupplierUserId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_USER_ID");

                entity.HasOne(d => d.CostMgmtRequestorUser)
                    .WithMany(p => p.CostManagementCostMgmtRequestorUsers)
                    .HasForeignKey(d => d.CostMgmtRequestorUserId)
                    .HasConstraintName("FK_CUSTOMER_USER_ID");

                entity.HasOne(d => d.DeviationNumberNavigation)
                    .WithMany(p => p.CostManagements)
                    .HasForeignKey(d => d.DeviationNumber)
                    .HasConstraintName("FK_DEVIATION_NUMBER");

                entity.HasOne(d => d.SupplierUser)
                    .WithMany(p => p.CostManagementSupplierUsers)
                    .HasForeignKey(d => d.SupplierUserId)
                    .HasConstraintName("FK_SUPPLIER_USER_ID");
            });

            modelBuilder.Entity<CrewPlantCi>(entity =>
            {
                entity.HasKey(e => e.PlantCode)
                    .HasName("SYS_C0012011");

                entity.ToTable("CREW_PLANT_CIS");

                entity.Property(e => e.PlantCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PLANT_CODE");

                entity.Property(e => e.Plant)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PLANT");
            });

            modelBuilder.Entity<CustomerRole>(entity =>
            {
                entity.HasKey(e => e.CdsId);

                entity.ToTable("CUSTOMER_ROLE");

                entity.Property(e => e.CdsId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CDS_ID");

                entity.Property(e => e.Role)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ROLE");
            });

            modelBuilder.Entity<CustomerRoleBackup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CUSTOMER_ROLE_BACKUP");

                entity.Property(e => e.CdsId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CDS_ID");

                entity.Property(e => e.Role)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ROLE");
            });

            modelBuilder.Entity<CustomerSetting>(entity =>
            {
                entity.HasKey(e => new { e.SettingCategory, e.SettingName });

                entity.ToTable("CUSTOMER_SETTINGS");

                entity.Property(e => e.SettingCategory)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("SETTING_CATEGORY");

                entity.Property(e => e.SettingName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SETTING_NAME");

                entity.Property(e => e.SettingValue)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SETTING_VALUE");
            });

            modelBuilder.Entity<Cycle>(entity =>
            {
                entity.HasKey(e => e.CycleNumber);

                entity.ToTable("CYCLE");

                entity.HasIndex(e => e.CycleStatus, "IDX_CYC_STAT");

                entity.Property(e => e.CycleNumber)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("CYCLE_NUMBER");

                entity.Property(e => e.CycleStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CYCLE_STATUS");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.FirstInvoice)
                    .HasPrecision(10)
                    .HasColumnName("FIRST_INVOICE");

                entity.Property(e => e.LastInvoice)
                    .HasPrecision(10)
                    .HasColumnName("LAST_INVOICE");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.PostByDate)
                    .HasColumnType("DATE")
                    .HasColumnName("POST_BY_DATE");

                entity.Property(e => e.PostedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("POSTED_DATE");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.YearMonth)
                    .HasPrecision(6)
                    .HasColumnName("YEAR_MONTH");

                entity.HasOne(d => d.CycleStatusNavigation)
                    .WithMany(p => p.Cycles)
                    .HasForeignKey(d => d.CycleStatus)
                    .HasConstraintName("FK_CYCLE_REF_4200_CYCLE_ST");
            });

            modelBuilder.Entity<CycleStatus>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("CYCLE_STATUS");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<DashboardMaster>(entity =>
            {
                entity.HasKey(e => e.DashboardViewId)
                    .HasName("DASHBOARDMASTER_PK");

                entity.ToTable("DASHBOARD_MASTER");

                entity.Property(e => e.DashboardViewId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("DASHBOARD_VIEW_ID");

                entity.Property(e => e.DashboardViewName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DASHBOARD_VIEW_NAME");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");
            });

            modelBuilder.Entity<DeclinedCode>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("DECLINED_CODE");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<Delegation>(entity =>
            {
                entity.HasKey(e => new { e.ObjectId, e.DelegatedFrom, e.StartDate, e.DelegationType, e.DelegatedTo });

                entity.ToTable("DELEGATIONS");

                entity.HasIndex(e => new { e.DelegationType, e.ObjectId, e.StartDate, e.EndDate, e.DelegatedTo }, "DELEGATIONS_IDX_001");

                entity.HasIndex(e => e.DelegatedFrom, "IDX_DELEGATION_REF_PEOPLE");

                entity.HasIndex(e => e.DelegatedTo, "IDX_DELEGATION_REF_PEOPLE_2");

                entity.Property(e => e.ObjectId)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("OBJECT_ID");

                entity.Property(e => e.DelegatedFrom)
                    .HasPrecision(10)
                    .HasColumnName("DELEGATED_FROM");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.DelegationType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DELEGATION_TYPE");

                entity.Property(e => e.DelegatedTo)
                    .HasPrecision(10)
                    .HasColumnName("DELEGATED_TO");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.HasOne(d => d.DelegatedFromNavigation)
                    .WithMany(p => p.DelegationDelegatedFromNavigations)
                    .HasForeignKey(d => d.DelegatedFrom)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DELEGATI_REF_PEOPL_PEOPLE");

                entity.HasOne(d => d.DelegatedToNavigation)
                    .WithMany(p => p.DelegationDelegatedToNavigations)
                    .HasForeignKey(d => d.DelegatedTo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DELEGATI_REF_PEOPL_PEOPLE2");

                entity.HasOne(d => d.DelegationTypeNavigation)
                    .WithMany(p => p.Delegations)
                    .HasForeignKey(d => d.DelegationType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DELEGATI_REF_812_DELEGATI");
            });

            modelBuilder.Entity<DelegationType>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("DELEGATION_TYPES");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<Department>(entity =>
            {
                entity.ToTable("DEPARTMENTS");

                entity.Property(e => e.DepartmentId)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DEPARTMENT_ID");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsActiveFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_ACTIVE_FLAG");
            });

            modelBuilder.Entity<Deviation>(entity =>
            {
                entity.HasKey(e => e.DeviationNumber);

                entity.ToTable("DEVIATIONS");

                entity.HasIndex(e => e.DeviationType, "IDX_DEVIATIONS_DEVTYPE");

                entity.HasIndex(e => e.CandidateId, "IDX_DEVIATIONS_REF_CANDIDATE");

                entity.HasIndex(e => e.ApprovedBy, "IDX_DEVIATIONS_REF_PEOPLE");

                entity.HasIndex(e => e.RebidAcknowledgedBy, "IDX_DEVIATIONS_REF_PEOPLE_3");

                entity.HasIndex(e => e.RequisitionerId, "IDX_DEVIATIONS_REF_PEOPLE_4");

                entity.HasIndex(e => e.StaffingsPecialistId, "IDX_DEVIATIONS_REF_PEOPLE_5");

                entity.HasIndex(e => e.SupervisorId, "IDX_DEVIATIONS_REF_PEOPLE_6");

                entity.HasIndex(e => e.SupplierId, "IDX_DEVIATIONS_REF_PEOPLE_7");

                entity.HasIndex(e => e.PositionNumber, "IDX_DEVIATIONS_REF_POSITION");

                entity.HasIndex(e => e.ProductCode, "IDX_DEVIATIONS_REF_PRODUCT");

                entity.HasIndex(e => e.IncumbentSupplierId, "IDX_DEVIATIONS_REF_SUPPLIER");

                entity.Property(e => e.DeviationNumber)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("DEVIATION_NUMBER");

                entity.Property(e => e.AppDenCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("APP_DEN_CODE");

                entity.Property(e => e.ApprovedBy)
                    .HasPrecision(10)
                    .HasColumnName("APPROVED_BY");

                entity.Property(e => e.ApprovedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("APPROVED_DATE");

                entity.Property(e => e.ApprovedDeniedComments)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("APPROVED_DENIED_COMMENTS");

                entity.Property(e => e.BackgroundCheckReceivedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BACKGROUND_CHECK_RECEIVED_FLAG");

                entity.Property(e => e.BackgroundInfo)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("BACKGROUND_INFO");

                entity.Property(e => e.BidBreakdownReceivedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BID_BREAKDOWN_RECEIVED_DATE");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.BidReceivedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BID_RECEIVED_DATE");

                entity.Property(e => e.BroadcastType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BROADCAST_TYPE");

                entity.Property(e => e.CandidateId)
                    .HasPrecision(10)
                    .HasColumnName("CANDIDATE_ID");

                entity.Property(e => e.CandidateName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_NAME");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CustomerFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("CUSTOMER_FEE");

                entity.Property(e => e.CustomerStRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("CUSTOMER_ST_RATE");

                entity.Property(e => e.DeviationPriority)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DEVIATION_PRIORITY");

                entity.Property(e => e.DeviationStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DEVIATION_STATUS");

                entity.Property(e => e.DeviationType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DEVIATION_TYPE");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.IncumbentCustomerRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("INCUMBENT_CUSTOMER_RATE");

                entity.Property(e => e.IncumbentSupplierId)
                    .HasPrecision(10)
                    .HasColumnName("INCUMBENT_SUPPLIER_ID");

                entity.Property(e => e.IncumbentSupplierRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("INCUMBENT_SUPPLIER_RATE");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.LocationCode)
                    .HasPrecision(10)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.OrderBroadcastedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ORDER_BROADCASTED_DATE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderRecdDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ORDER_RECD_DATE");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.PrecommitDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PRECOMMIT_DATE");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.QualityComments)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("QUALITY_COMMENTS");

                entity.Property(e => e.QualityRating)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("QUALITY_RATING");

                entity.Property(e => e.RaIssuedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("RA_ISSUED_DATE");

                entity.Property(e => e.RebidAcknowledgedBy)
                    .HasPrecision(10)
                    .HasColumnName("REBID_ACKNOWLEDGED_BY");

                entity.Property(e => e.RebidReceivedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("REBID_RECEIVED_FLAG")
                    .HasDefaultValueSql("'N'");

                entity.Property(e => e.RebidStraightRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("REBID_STRAIGHT_RATE");

                entity.Property(e => e.RecentCustomerRate)
                    .HasPrecision(7)
                    .HasColumnName("RECENT_CUSTOMER_RATE");

                entity.Property(e => e.RecentPoNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("RECENT_PO_NUMBER");

                entity.Property(e => e.RecentRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("RECENT_RATE");

                entity.Property(e => e.RecruiterName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RECRUITER_NAME");

                entity.Property(e => e.RequisitionerId)
                    .HasPrecision(10)
                    .HasColumnName("REQUISITIONER_ID");

                entity.Property(e => e.StaffingsPecialistId)
                    .HasPrecision(10)
                    .HasColumnName("STAFFINGS_PECIALIST_ID");

                entity.Property(e => e.StatusChangedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("STATUS_CHANGED_DATE");

                entity.Property(e => e.SupervisorId)
                    .HasPrecision(10)
                    .HasColumnName("SUPERVISOR_ID");

                entity.Property(e => e.SupplierFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_FEE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierStRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_ST_RATE");

                entity.Property(e => e.SupplierStRateMax)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_ST_RATE_MAX");

                entity.Property(e => e.TargetEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TARGET_END_DATE");

                entity.Property(e => e.TargetStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TARGET_START_DATE");

                entity.HasOne(d => d.ApprovedByNavigation)
                    .WithMany(p => p.DeviationApprovedByNavigations)
                    .HasForeignKey(d => d.ApprovedBy)
                    .HasConstraintName("FK_DEVIATIO_REF_1360_PEOPLE");

                entity.HasOne(d => d.BroadcastTypeNavigation)
                    .WithMany(p => p.Deviations)
                    .HasForeignKey(d => d.BroadcastType)
                    .HasConstraintName("FK_DEVIATIO_REF_12955_BROADCAS");

                entity.HasOne(d => d.Candidate)
                    .WithMany(p => p.Deviations)
                    .HasForeignKey(d => d.CandidateId)
                    .HasConstraintName("FK_DEVIATIO_REF_1336_CANDIDAT");

                entity.HasOne(d => d.DeviationStatusNavigation)
                    .WithMany(p => p.Deviations)
                    .HasForeignKey(d => d.DeviationStatus)
                    .HasConstraintName("FK_DEVIATIO_REF_DEVIA_DEVIATI2");

                entity.HasOne(d => d.DeviationTypeNavigation)
                    .WithMany(p => p.Deviations)
                    .HasForeignKey(d => d.DeviationType)
                    .HasConstraintName("FK_DEVIATIO_REF_DEVIA_DEVIATIO");

                entity.HasOne(d => d.GradeLevelNavigation)
                    .WithMany(p => p.Deviations)
                    .HasForeignKey(d => d.GradeLevel)
                    .HasConstraintName("FK_DEVIATIO_REF_417_GRADE_LE");

                entity.HasOne(d => d.IncumbentSupplier)
                    .WithMany(p => p.DeviationIncumbentSuppliers)
                    .HasForeignKey(d => d.IncumbentSupplierId)
                    .HasConstraintName("FK_DEVIATIO_REF_17396_SUPPLIER");

                entity.HasOne(d => d.LocationCodeNavigation)
                    .WithMany(p => p.Deviations)
                    .HasForeignKey(d => d.LocationCode)
                    .HasConstraintName("FK_DEVIATIO_REF_1378_LOCATION");

                entity.HasOne(d => d.OrderTypeNavigation)
                    .WithMany(p => p.Deviations)
                    .HasForeignKey(d => d.OrderType)
                    .HasConstraintName("FK_DEVIATIO_REF_1322_ORDER_TY");

                entity.HasOne(d => d.PositionNumberNavigation)
                    .WithMany(p => p.Deviations)
                    .HasForeignKey(d => d.PositionNumber)
                    .HasConstraintName("FK_DEVIATIO_REF_12973_POSITION");

                entity.HasOne(d => d.ProductCodeNavigation)
                    .WithMany(p => p.Deviations)
                    .HasForeignKey(d => d.ProductCode)
                    .HasConstraintName("FK_DEVIATIO_REF_12961_PRODUCT_");

                entity.HasOne(d => d.QualityRatingNavigation)
                    .WithMany(p => p.Deviations)
                    .HasForeignKey(d => d.QualityRating)
                    .HasConstraintName("FK_DEVIATIO_REF_17390_QUALITY_");

                entity.HasOne(d => d.RebidAcknowledgedByNavigation)
                    .WithMany(p => p.DeviationRebidAcknowledgedByNavigations)
                    .HasForeignKey(d => d.RebidAcknowledgedBy)
                    .HasConstraintName("FK_DEVIATIO_REF_1381_PEOPLE");

                entity.HasOne(d => d.Requisitioner)
                    .WithMany(p => p.DeviationRequisitioners)
                    .HasForeignKey(d => d.RequisitionerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DEVIATIO_REF_1345_PEOPLE");

                entity.HasOne(d => d.StaffingsPecialist)
                    .WithMany(p => p.DeviationStaffingsPecialists)
                    .HasForeignKey(d => d.StaffingsPecialistId)
                    .HasConstraintName("FK_DEVIATIO_REF_1339_PEOPLE");

                entity.HasOne(d => d.Supervisor)
                    .WithMany(p => p.DeviationSupervisors)
                    .HasForeignKey(d => d.SupervisorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DEVIATIO_REF_1350_PEOPLE");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.DeviationSuppliers)
                    .HasForeignKey(d => d.SupplierId)
                    .HasConstraintName("FK_DEVIATIO_REF_12967_SUPPLIER");
            });

            modelBuilder.Entity<DeviationApprovalCode>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("DEVIATION_APPROVAL_CODES");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<DeviationDenialCode>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("DEVIATION_DENIAL_CODES");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<DeviationPriority>(entity =>
            {
                entity.HasKey(e => new { e.Code, e.DeviationLevel });

                entity.ToTable("DEVIATION_PRIORITY");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.DeviationLevel)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DEVIATION_LEVEL");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<DeviationStatus>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("DEVIATION_STATUS");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<DeviationType>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("DEVIATION_TYPE");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DeviationLevel)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DEVIATION_LEVEL");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<Division>(entity =>
            {
                entity.HasKey(e => e.DivisionCode);

                entity.ToTable("DIVISION");

                entity.Property(e => e.DivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_CODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsActiveFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_ACTIVE_FLAG");
            });

            modelBuilder.Entity<DmcRepBackup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DMC_REP_BACKUP");

                entity.Property(e => e.AmountBilled)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("AMOUNT_BILLED");

                entity.Property(e => e.AmountBilledActual)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("AMOUNT_BILLED_ACTUAL");

                entity.Property(e => e.AmountBilledExpense)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("AMOUNT_BILLED_EXPENSE");

                entity.Property(e => e.AmountPaid)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("AMOUNT_PAID");

                entity.Property(e => e.CandFileId)
                    .HasPrecision(8)
                    .HasColumnName("CAND_FILE_ID");

                entity.Property(e => e.CandFirstName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CAND_FIRST_NAME");

                entity.Property(e => e.CandLastName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CAND_LAST_NAME");

                entity.Property(e => e.ContractEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CONTRACT_END_DATE");

                entity.Property(e => e.ContractStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CONTRACT_START_DATE");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CycleProcessed)
                    .HasPrecision(6)
                    .HasColumnName("CYCLE_PROCESSED");

                entity.Property(e => e.EarningsCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EARNINGS_CODE");

                entity.Property(e => e.Fee)
                    .HasColumnType("NUMBER(6,2)")
                    .HasColumnName("FEE");

                entity.Property(e => e.Hours)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("HOURS");

                entity.Property(e => e.InvoiceNumber)
                    .HasColumnType("NUMBER(22,10)")
                    .HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("JOB_TITLE");

                entity.Property(e => e.LastTsReceivedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_TS_RECEIVED_DATE");

                entity.Property(e => e.MaxOtRate)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("MAX_OT_RATE");

                entity.Property(e => e.MaxPrRate)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("MAX_PR_RATE");

                entity.Property(e => e.MaxStRate)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("MAX_ST_RATE");

                entity.Property(e => e.Month)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MONTH");

                entity.Property(e => e.OtHours)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("OT_HOURS");

                entity.Property(e => e.OtRate)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("OT_RATE");

                entity.Property(e => e.PoNum)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUM");

                entity.Property(e => e.PrHours)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("PR_HOURS");

                entity.Property(e => e.RateAp)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("RATE_AP");

                entity.Property(e => e.RateAr)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("RATE_AR");

                entity.Property(e => e.RgHours)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("RG_HOURS");

                entity.Property(e => e.SeqNo)
                    .HasPrecision(10)
                    .HasColumnName("SEQ_NO");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.SubDivision)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUB_DIVISION");

                entity.Property(e => e.SubLedger)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUB_LEDGER");

                entity.Property(e => e.SupervisorFirstName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_FIRST_NAME");

                entity.Property(e => e.SupervisorLastName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_LAST_NAME");

                entity.Property(e => e.SupervisorLogin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_LOGIN");

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");

                entity.Property(e => e.TsEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TS_END_DATE");

                entity.Property(e => e.Year)
                    .HasPrecision(4)
                    .HasColumnName("YEAR");
            });

            modelBuilder.Entity<DmcReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DMC_REPORT");

                entity.HasIndex(e => e.CostCenter, "DMC_INDX1");

                entity.HasIndex(e => new { e.Year, e.Month, e.CostCenter, e.SupervisorLogin, e.SupplierId }, "DMC_REPORT_IDX");

                entity.HasIndex(e => e.CycleProcessed, "DMC_REPORT_IDX10");

                entity.HasIndex(e => new { e.Year, e.CostCenter }, "DMC_REPORT_IDX2");

                entity.HasIndex(e => new { e.Year, e.CostCenter, e.SupervisorLogin }, "DMC_REPORT_IDX3");

                entity.HasIndex(e => new { e.Year, e.Month }, "DMC_REPORT_IDX4");

                entity.HasIndex(e => new { e.Year, e.Month, e.SupervisorLogin }, "DMC_REPORT_IDX5");

                entity.HasIndex(e => e.PoNum, "DMC_REPORT_IDX6");

                entity.HasIndex(e => e.CandFileId, "DMC_REPORT_IDX7");

                entity.HasIndex(e => new { e.Year, e.PoNum, e.CandFileId, e.Month }, "DMC_REPORT_IDX8");

                entity.HasIndex(e => new { e.TimesheetNumber, e.TimesheetRevision, e.DetailLineNumber }, "DMC_REPORT_IDX9");

                entity.Property(e => e.AmountBilled)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("AMOUNT_BILLED");

                entity.Property(e => e.AmountBilledActual)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("AMOUNT_BILLED_ACTUAL");

                entity.Property(e => e.AmountBilledExpense)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("AMOUNT_BILLED_EXPENSE");

                entity.Property(e => e.AmountPaid)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("AMOUNT_PAID");

                entity.Property(e => e.BandingRate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("BANDING_RATE");

                entity.Property(e => e.Bill1Hours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("BILL1_HOURS");

                entity.Property(e => e.Bill1Rate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("BILL1_RATE");

                entity.Property(e => e.Bill2Hours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("BILL2_HOURS");

                entity.Property(e => e.Bill2Rate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("BILL2_RATE");

                entity.Property(e => e.CandFileId)
                    .HasPrecision(8)
                    .HasColumnName("CAND_FILE_ID");

                entity.Property(e => e.CandFirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CAND_FIRST_NAME");

                entity.Property(e => e.CandLastName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CAND_LAST_NAME");

                entity.Property(e => e.ContractEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CONTRACT_END_DATE");

                entity.Property(e => e.ContractStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CONTRACT_START_DATE");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CycleProcessed)
                    .HasPrecision(6)
                    .HasColumnName("CYCLE_PROCESSED");

                entity.Property(e => e.DetailLineNumber)
                    .HasPrecision(3)
                    .HasColumnName("DETAIL_LINE_NUMBER");

                entity.Property(e => e.EarningsCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("EARNINGS_CODE");

                entity.Property(e => e.Fee)
                    .HasColumnType("NUMBER(6,2)")
                    .HasColumnName("FEE");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.Hours)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("HOURS");

                entity.Property(e => e.InvoiceNumber)
                    .HasColumnType("NUMBER(22,10)")
                    .HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JOB_TITLE");

                entity.Property(e => e.LastTsReceivedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_TS_RECEIVED_DATE");

                entity.Property(e => e.MaxOtRate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("MAX_OT_RATE");

                entity.Property(e => e.MaxPrRate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("MAX_PR_RATE");

                entity.Property(e => e.MaxStRate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("MAX_ST_RATE");

                entity.Property(e => e.MiscRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MISC_REF");

                entity.Property(e => e.Month)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MONTH");

                entity.Property(e => e.NteAmount)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("NTE_AMOUNT");

                entity.Property(e => e.OrderNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.Ot2Hours)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("OT2_HOURS");

                entity.Property(e => e.Ot2Rate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("OT2_RATE");

                entity.Property(e => e.OtHours)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("OT_HOURS");

                entity.Property(e => e.OtRate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("OT_RATE");

                entity.Property(e => e.PoNum)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUM");

                entity.Property(e => e.PrHours)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("PR_HOURS");

                entity.Property(e => e.PrRate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("PR_RATE");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.ProjectNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PROJECT_NUMBER");

                entity.Property(e => e.RateAp)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("RATE_AP");

                entity.Property(e => e.RateAr)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("RATE_AR");

                entity.Property(e => e.RgHours)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("RG_HOURS");

                entity.Property(e => e.SeqNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SEQ_NO");

                entity.Property(e => e.Shift)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SHIFT");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.SubDivision)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUB_DIVISION");

                entity.Property(e => e.SubLedger)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUB_LEDGER");

                entity.Property(e => e.SupervisorFirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_FIRST_NAME");

                entity.Property(e => e.SupervisorLastName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_LAST_NAME");

                entity.Property(e => e.SupervisorLogin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_LOGIN");

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.TsEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TS_END_DATE");

                entity.Property(e => e.Year)
                    .HasPrecision(4)
                    .HasColumnName("YEAR");
            });

            modelBuilder.Entity<DmcReportBkup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DMC_REPORT_BKUP");

                entity.Property(e => e.AmountBilled)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("AMOUNT_BILLED");

                entity.Property(e => e.AmountBilledActual)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("AMOUNT_BILLED_ACTUAL");

                entity.Property(e => e.AmountBilledExpense)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("AMOUNT_BILLED_EXPENSE");

                entity.Property(e => e.AmountPaid)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("AMOUNT_PAID");

                entity.Property(e => e.BandingRate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("BANDING_RATE");

                entity.Property(e => e.Bill1Hours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("BILL1_HOURS");

                entity.Property(e => e.Bill1Rate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("BILL1_RATE");

                entity.Property(e => e.Bill2Hours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("BILL2_HOURS");

                entity.Property(e => e.Bill2Rate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("BILL2_RATE");

                entity.Property(e => e.CandFileId)
                    .HasPrecision(8)
                    .HasColumnName("CAND_FILE_ID");

                entity.Property(e => e.CandFirstName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CAND_FIRST_NAME");

                entity.Property(e => e.CandLastName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CAND_LAST_NAME");

                entity.Property(e => e.ContractEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CONTRACT_END_DATE");

                entity.Property(e => e.ContractStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CONTRACT_START_DATE");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CycleProcessed)
                    .HasPrecision(6)
                    .HasColumnName("CYCLE_PROCESSED");

                entity.Property(e => e.DetailLineNumber)
                    .HasPrecision(3)
                    .HasColumnName("DETAIL_LINE_NUMBER");

                entity.Property(e => e.EarningsCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("EARNINGS_CODE");

                entity.Property(e => e.Fee)
                    .HasColumnType("NUMBER(6,2)")
                    .HasColumnName("FEE");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.Hours)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("HOURS");

                entity.Property(e => e.InvoiceNumber)
                    .HasColumnType("NUMBER(22,10)")
                    .HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JOB_TITLE");

                entity.Property(e => e.LastTsReceivedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_TS_RECEIVED_DATE");

                entity.Property(e => e.MaxOtRate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("MAX_OT_RATE");

                entity.Property(e => e.MaxPrRate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("MAX_PR_RATE");

                entity.Property(e => e.MaxStRate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("MAX_ST_RATE");

                entity.Property(e => e.MiscRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MISC_REF");

                entity.Property(e => e.Month)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MONTH");

                entity.Property(e => e.NteAmount)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("NTE_AMOUNT");

                entity.Property(e => e.OrderNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.Ot2Hours)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("OT2_HOURS");

                entity.Property(e => e.Ot2Rate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("OT2_RATE");

                entity.Property(e => e.OtHours)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("OT_HOURS");

                entity.Property(e => e.OtRate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("OT_RATE");

                entity.Property(e => e.PoNum)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUM");

                entity.Property(e => e.PrHours)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("PR_HOURS");

                entity.Property(e => e.PrRate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("PR_RATE");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RateAp)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("RATE_AP");

                entity.Property(e => e.RateAr)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("RATE_AR");

                entity.Property(e => e.RgHours)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("RG_HOURS");

                entity.Property(e => e.SeqNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SEQ_NO");

                entity.Property(e => e.Shift)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SHIFT");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.SubDivision)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUB_DIVISION");

                entity.Property(e => e.SubLedger)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUB_LEDGER");

                entity.Property(e => e.SupervisorFirstName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_FIRST_NAME");

                entity.Property(e => e.SupervisorLastName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_LAST_NAME");

                entity.Property(e => e.SupervisorLogin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_LOGIN");

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.TsEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TS_END_DATE");

                entity.Property(e => e.Year)
                    .HasPrecision(4)
                    .HasColumnName("YEAR");
            });

            modelBuilder.Entity<DmcReportKv>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DMC_REPORT_KV");

                entity.Property(e => e.AmountBilled)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("AMOUNT_BILLED");

                entity.Property(e => e.AmountBilledActual)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("AMOUNT_BILLED_ACTUAL");

                entity.Property(e => e.AmountBilledExpense)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("AMOUNT_BILLED_EXPENSE");

                entity.Property(e => e.AmountPaid)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("AMOUNT_PAID");

                entity.Property(e => e.BandingRate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("BANDING_RATE");

                entity.Property(e => e.Bill1Hours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("BILL1_HOURS");

                entity.Property(e => e.Bill1Rate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("BILL1_RATE");

                entity.Property(e => e.Bill2Hours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("BILL2_HOURS");

                entity.Property(e => e.Bill2Rate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("BILL2_RATE");

                entity.Property(e => e.CandFileId)
                    .HasPrecision(8)
                    .HasColumnName("CAND_FILE_ID");

                entity.Property(e => e.CandFirstName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CAND_FIRST_NAME");

                entity.Property(e => e.CandLastName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CAND_LAST_NAME");

                entity.Property(e => e.ContractEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CONTRACT_END_DATE");

                entity.Property(e => e.ContractStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CONTRACT_START_DATE");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CycleProcessed)
                    .HasPrecision(6)
                    .HasColumnName("CYCLE_PROCESSED");

                entity.Property(e => e.DetailLineNumber)
                    .HasPrecision(3)
                    .HasColumnName("DETAIL_LINE_NUMBER");

                entity.Property(e => e.EarningsCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("EARNINGS_CODE");

                entity.Property(e => e.Fee)
                    .HasColumnType("NUMBER(6,2)")
                    .HasColumnName("FEE");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.Hours)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("HOURS");

                entity.Property(e => e.InvoiceNumber)
                    .HasColumnType("NUMBER(22,10)")
                    .HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JOB_TITLE");

                entity.Property(e => e.LastTsReceivedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_TS_RECEIVED_DATE");

                entity.Property(e => e.MaxOtRate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("MAX_OT_RATE");

                entity.Property(e => e.MaxPrRate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("MAX_PR_RATE");

                entity.Property(e => e.MaxStRate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("MAX_ST_RATE");

                entity.Property(e => e.MiscRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MISC_REF");

                entity.Property(e => e.Month)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MONTH");

                entity.Property(e => e.NteAmount)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("NTE_AMOUNT");

                entity.Property(e => e.OrderNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.Ot2Hours)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("OT2_HOURS");

                entity.Property(e => e.Ot2Rate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("OT2_RATE");

                entity.Property(e => e.OtHours)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("OT_HOURS");

                entity.Property(e => e.OtRate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("OT_RATE");

                entity.Property(e => e.PoNum)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUM");

                entity.Property(e => e.PrHours)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("PR_HOURS");

                entity.Property(e => e.PrRate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("PR_RATE");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RateAp)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("RATE_AP");

                entity.Property(e => e.RateAr)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("RATE_AR");

                entity.Property(e => e.RgHours)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("RG_HOURS");

                entity.Property(e => e.SeqNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SEQ_NO");

                entity.Property(e => e.Shift)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SHIFT");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.SubDivision)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUB_DIVISION");

                entity.Property(e => e.SubLedger)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUB_LEDGER");

                entity.Property(e => e.SupervisorFirstName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_FIRST_NAME");

                entity.Property(e => e.SupervisorLastName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_LAST_NAME");

                entity.Property(e => e.SupervisorLogin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_LOGIN");

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.TsEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TS_END_DATE");

                entity.Property(e => e.Year)
                    .HasPrecision(4)
                    .HasColumnName("YEAR");
            });

            modelBuilder.Entity<DorfExceptionStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DORF_EXCEPTION_STATUS");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<DorfFeedStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DORF_FEED_STATUS");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<DorfFileStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DORF_FILE_STATUS");

                entity.Property(e => e.Comments)
                    .HasMaxLength(1000)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.DorfFeed)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DORF_FEED");

                entity.Property(e => e.GroupId)
                    .HasPrecision(2)
                    .HasColumnName("GROUP_ID");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_MODIFIED_DATE");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STATUS");
            });

            modelBuilder.Entity<DorfGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DORF_GROUP");

                entity.Property(e => e.ActiveFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_FLAG")
                    .HasDefaultValueSql("'Y'");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EFFECTIVE_DATE");

                entity.Property(e => e.FileName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FILE_NAME");

                entity.Property(e => e.GroupId)
                    .HasPrecision(2)
                    .HasColumnName("GROUP_ID");

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GROUP_NAME");
            });

            modelBuilder.Entity<DorfPo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DORF_POS");

                entity.HasIndex(e => new { e.PoNumber, e.FileId }, "IDX_DORF_PO_FILEID");

                entity.Property(e => e.ActiveFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_FLAG");

                entity.Property(e => e.CdsId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CDS_ID");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EFFECTIVE_DATE");

                entity.Property(e => e.FileId)
                    .HasPrecision(10)
                    .HasColumnName("FILE_ID");

                entity.Property(e => e.GroupId)
                    .HasPrecision(2)
                    .HasColumnName("GROUP_ID");

                entity.Property(e => e.PersonId)
                    .HasPrecision(10)
                    .HasColumnName("PERSON_ID");

                entity.Property(e => e.PoNumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");
            });

            modelBuilder.Entity<DorfTimesheetDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DORF_TIMESHEET_DATA");

                entity.HasIndex(e => new { e.PoNumber, e.FileId }, "INDX_DORF_POS_PO");

                entity.HasIndex(e => e.DorfBatchId, "INDX_DORF_TIMESHEET_DATA_BATCH");

                entity.HasIndex(e => new { e.PoNumber, e.FileId, e.WeekEndingDate }, "INDX_DORF_TIMESHEET_DATA_PO");

                entity.Property(e => e.BillableType)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BILLABLE_TYPE");

                entity.Property(e => e.CdsId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CDS_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedByDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_BY_DATE");

                entity.Property(e => e.DorfBatchId)
                    .HasPrecision(10)
                    .HasColumnName("DORF_BATCH_ID");

                entity.Property(e => e.DorfRecordId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DORF_RECORD_ID");

                entity.Property(e => e.ExceptionComments)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EXCEPTION_COMMENTS");

                entity.Property(e => e.ExceptionResolution)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EXCEPTION_RESOLUTION");

                entity.Property(e => e.ExceptionStatus)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("EXCEPTION_STATUS");

                entity.Property(e => e.ExpenseAmount)
                    .HasColumnType("NUMBER(22,2)")
                    .HasColumnName("EXPENSE_AMOUNT");

                entity.Property(e => e.ExpenseType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("EXPENSE_TYPE");

                entity.Property(e => e.FeedComments)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("FEED_COMMENTS");

                entity.Property(e => e.FeedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("FEED_DATE");

                entity.Property(e => e.FeedStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FEED_STATUS");

                entity.Property(e => e.FileId)
                    .HasPrecision(10)
                    .HasColumnName("FILE_ID");

                entity.Property(e => e.GroupId)
                    .HasPrecision(2)
                    .HasColumnName("GROUP_ID");

                entity.Property(e => e.Hours)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("HOURS");

                entity.Property(e => e.HoursLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("HOURS_LINE_NUMBER");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.PersonId)
                    .HasPrecision(10)
                    .HasColumnName("PERSON_ID");

                entity.Property(e => e.PoNumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.ShiftType)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SHIFT_TYPE");

                entity.Property(e => e.WeekEndingDate)
                    .HasColumnType("DATE")
                    .HasColumnName("WEEK_ENDING_DATE");

                entity.Property(e => e.WorkDate)
                    .HasColumnType("DATE")
                    .HasColumnName("WORK_DATE");
            });

            modelBuilder.Entity<DraftApproval>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DRAFT_APPROVALS");

                entity.Property(e => e.ApprovalId)
                    .HasPrecision(10)
                    .HasColumnName("APPROVAL_ID");

                entity.Property(e => e.ApprovalStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("APPROVAL_STATUS");

                entity.Property(e => e.ApprovalType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("APPROVAL_TYPE");

                entity.Property(e => e.ApprovedBy)
                    .HasPrecision(10)
                    .HasColumnName("APPROVED_BY");

                entity.Property(e => e.ApprovedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("APPROVED_DATE");

                entity.Property(e => e.Comments)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.Notes)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.NoticeDate)
                    .HasColumnType("DATE")
                    .HasColumnName("NOTICE_DATE");

                entity.Property(e => e.ObjectId)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("OBJECT_ID");

                entity.Property(e => e.RequestorId)
                    .HasPrecision(10)
                    .HasColumnName("REQUESTOR_ID");

                entity.Property(e => e.Role)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ROLE");

                entity.Property(e => e.TargetApprover)
                    .HasPrecision(10)
                    .HasColumnName("TARGET_APPROVER");

                entity.Property(e => e.TaskId)
                    .HasPrecision(10)
                    .HasColumnName("TASK_ID");
            });

            modelBuilder.Entity<DraftOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DRAFT_ORDERS");

                entity.Property(e => e.AccountManagerId)
                    .HasPrecision(10)
                    .HasColumnName("ACCOUNT_MANAGER_ID");

                entity.Property(e => e.AdditionalInfo)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONAL_INFO");

                entity.Property(e => e.AdditionalSafetyInfo)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONAL_SAFETY_INFO");

                entity.Property(e => e.BidLimit)
                    .HasPrecision(5)
                    .HasColumnName("BID_LIMIT");

                entity.Property(e => e.CitizenshipCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CITIZENSHIP_CODE");

                entity.Property(e => e.CompetencyCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("COMPETENCY_CODE");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CustomerContactId)
                    .HasPrecision(10)
                    .HasColumnName("CUSTOMER_CONTACT_ID");

                entity.Property(e => e.CustomerSupplierContactFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_SUPPLIER_CONTACT_FLAG");

                entity.Property(e => e.DefaultSubmitByDate)
                    .HasColumnType("DATE")
                    .HasColumnName("DEFAULT_SUBMIT_BY_DATE");

                entity.Property(e => e.Description)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_CODE");

                entity.Property(e => e.DraftOrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("DRAFT_ORDER_NUMBER");

                entity.Property(e => e.Duration)
                    .HasPrecision(4)
                    .HasColumnName("DURATION");

                entity.Property(e => e.DurationUnits)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DURATION_UNITS");

                entity.Property(e => e.EduPreferred)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EDU_PREFERRED");

                entity.Property(e => e.EduRequired)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EDU_REQUIRED");

                entity.Property(e => e.EducationCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EDUCATION_CODE");

                entity.Property(e => e.ExpPreferred)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("EXP_PREFERRED");

                entity.Property(e => e.ExpRequired)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("EXP_REQUIRED");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.GraspTrainingFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("GRASP_TRAINING_FLAG")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.HazcomTrainingFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAZCOM_TRAINING_FLAG")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.HiringManagerId)
                    .HasPrecision(10)
                    .HasColumnName("HIRING_MANAGER_ID");

                entity.Property(e => e.HoldCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("HOLD_CODE");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LANGUAGE_CODE");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.LocationCode)
                    .HasPrecision(10)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.MultiplierId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("MULTIPLIER_ID");

                entity.Property(e => e.NoOfOpenings)
                    .HasPrecision(5)
                    .HasColumnName("NO_OF_OPENINGS");

                entity.Property(e => e.OrderStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_STATUS");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.OvertimePremiumFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("OVERTIME_PREMIUM_FLAG")
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.PartTime)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PART_TIME");

                entity.Property(e => e.PersonalQualities)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("PERSONAL_QUALITIES");

                entity.Property(e => e.PositionTitle)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_TITLE");

                entity.Property(e => e.PrescreenFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PRESCREEN_FLAG");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.PurchasedAgency)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PURCHASED_AGENCY");

                entity.Property(e => e.ReqDeveloperId)
                    .HasPrecision(10)
                    .HasColumnName("REQ_DEVELOPER_ID");

                entity.Property(e => e.RequestedStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("REQUESTED_START_DATE");

                entity.Property(e => e.RequisitionerId)
                    .HasPrecision(10)
                    .HasColumnName("REQUISITIONER_ID");

                entity.Property(e => e.SafetyMaterialReqFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SAFETY_MATERIAL_REQ_FLAG")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.SecurityCheckRequiredFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SECURITY_CHECK_REQUIRED_FLAG");

                entity.Property(e => e.SkillsPreferred)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SKILLS_PREFERRED");

                entity.Property(e => e.SkillsRequired)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SKILLS_REQUIRED");

                entity.Property(e => e.Specified)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPECIFIED");

                entity.Property(e => e.StaffVacancyFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("STAFF_VACANCY_FLAG")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.StaffingSpecialistId)
                    .HasPrecision(10)
                    .HasColumnName("STAFFING_SPECIALIST_ID");

                entity.Property(e => e.SupervisorId)
                    .HasPrecision(10)
                    .HasColumnName("SUPERVISOR_ID");

                entity.Property(e => e.TotalEccAmount)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("TOTAL_ECC_AMOUNT");

                entity.Property(e => e.TravelPercent)
                    .HasPrecision(7)
                    .HasColumnName("TRAVEL_PERCENT");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.WeeklyOtHours)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("WEEKLY_OT_HOURS");

                entity.Property(e => e.WeeklyStHours)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("WEEKLY_ST_HOURS");

                entity.Property(e => e.WorkBuilding)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WORK_BUILDING");

                entity.Property(e => e.WorkHours)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WORK_HOURS");

                entity.Property(e => e.WorkRoom)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("WORK_ROOM");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");
            });

            modelBuilder.Entity<DurationUnit>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("DURATION_UNITS");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<EcrReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ECR_REPORT");

                entity.HasIndex(e => e.CostCenter, "IDX1_COST_CENTER");

                entity.HasIndex(e => new { e.Year, e.Month, e.SupervisorLoginId }, "IDX2_REPORTS_ID");

                entity.HasIndex(e => new { e.PoNumber, e.CandidateFileId }, "IDX3_PO_NUM");

                entity.HasIndex(e => new { e.Year, e.Month }, "IDX_YEARMONT");

                entity.Property(e => e.AccountCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_CODE");

                entity.Property(e => e.Bill1Rate)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("BILL1_RATE");

                entity.Property(e => e.Bill2Rate)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("BILL2_RATE");

                entity.Property(e => e.CandidateFileId)
                    .HasPrecision(10)
                    .HasColumnName("CANDIDATE_FILE_ID");

                entity.Property(e => e.CandidateName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_NAME");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.EstAnnualExpenditure)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("EST_ANNUAL_EXPENDITURE");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("JOB_TITLE");

                entity.Property(e => e.MaxWeekEndingDate)
                    .HasColumnType("DATE")
                    .HasColumnName("MAX_WEEK_ENDING_DATE");

                entity.Property(e => e.Month)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MONTH");

                entity.Property(e => e.MtdAmountBilled)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("MTD_AMOUNT_BILLED");

                entity.Property(e => e.MtdBill1Hours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("MTD_BILL1_HOURS");

                entity.Property(e => e.MtdBill2Hours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("MTD_BILL2_HOURS");

                entity.Property(e => e.MtdExpensesBilled)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("MTD_EXPENSES_BILLED");

                entity.Property(e => e.MtdOvertime2Hours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("MTD_OVERTIME2_HOURS");

                entity.Property(e => e.MtdOvertimeHours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("MTD_OVERTIME_HOURS");

                entity.Property(e => e.MtdPremiumHours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("MTD_PREMIUM_HOURS");

                entity.Property(e => e.MtdRegularHours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("MTD_REGULAR_HOURS");

                entity.Property(e => e.MtdTravelHours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("MTD_TRAVEL_HOURS");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.Overtime2Rate)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("OVERTIME2_RATE");

                entity.Property(e => e.OvertimeRate)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("OVERTIME_RATE");

                entity.Property(e => e.PoEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PO_END_DATE");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PO_START_DATE");

                entity.Property(e => e.PremiumRate)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("PREMIUM_RATE");

                entity.Property(e => e.ProjectNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PROJECT_NUMBER");

                entity.Property(e => e.RegularRate)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("REGULAR_RATE");

                entity.Property(e => e.SalaryGrade)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SALARY_GRADE");

                entity.Property(e => e.SalaryGradeMaxRate)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("SALARY_GRADE_MAX_RATE");

                entity.Property(e => e.SupervisorLoginId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_LOGIN_ID");

                entity.Property(e => e.SupervisorName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_NAME");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");

                entity.Property(e => e.TotalNteAmount)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("TOTAL_NTE_AMOUNT");

                entity.Property(e => e.Year)
                    .HasPrecision(4)
                    .HasColumnName("YEAR");

                entity.Property(e => e.YtdAmountBilled)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("YTD_AMOUNT_BILLED");

                entity.Property(e => e.YtdBill1Hours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("YTD_BILL1_HOURS");

                entity.Property(e => e.YtdBill2Hours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("YTD_BILL2_HOURS");

                entity.Property(e => e.YtdExpensesBilled)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("YTD_EXPENSES_BILLED");

                entity.Property(e => e.YtdOvertime2Hours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("YTD_OVERTIME2_HOURS");

                entity.Property(e => e.YtdOvertimeHours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("YTD_OVERTIME_HOURS");

                entity.Property(e => e.YtdPremiumHours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("YTD_PREMIUM_HOURS");

                entity.Property(e => e.YtdRegularHours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("YTD_REGULAR_HOURS");

                entity.Property(e => e.YtdTravelHours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("YTD_TRAVEL_HOURS");
            });

            modelBuilder.Entity<EcrReportBkup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ECR_REPORT_BKUP");

                entity.Property(e => e.AccountCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_CODE");

                entity.Property(e => e.Bill1Rate)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("BILL1_RATE");

                entity.Property(e => e.Bill2Rate)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("BILL2_RATE");

                entity.Property(e => e.CandidateFileId)
                    .HasPrecision(10)
                    .HasColumnName("CANDIDATE_FILE_ID");

                entity.Property(e => e.CandidateName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_NAME");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.EstAnnualExpenditure)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("EST_ANNUAL_EXPENDITURE");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("JOB_TITLE");

                entity.Property(e => e.MaxWeekEndingDate)
                    .HasColumnType("DATE")
                    .HasColumnName("MAX_WEEK_ENDING_DATE");

                entity.Property(e => e.Month)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MONTH");

                entity.Property(e => e.MtdAmountBilled)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("MTD_AMOUNT_BILLED");

                entity.Property(e => e.MtdBill1Hours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("MTD_BILL1_HOURS");

                entity.Property(e => e.MtdBill2Hours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("MTD_BILL2_HOURS");

                entity.Property(e => e.MtdExpensesBilled)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("MTD_EXPENSES_BILLED");

                entity.Property(e => e.MtdOvertime2Hours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("MTD_OVERTIME2_HOURS");

                entity.Property(e => e.MtdOvertimeHours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("MTD_OVERTIME_HOURS");

                entity.Property(e => e.MtdPremiumHours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("MTD_PREMIUM_HOURS");

                entity.Property(e => e.MtdRegularHours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("MTD_REGULAR_HOURS");

                entity.Property(e => e.MtdTravelHours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("MTD_TRAVEL_HOURS");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.Overtime2Rate)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("OVERTIME2_RATE");

                entity.Property(e => e.OvertimeRate)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("OVERTIME_RATE");

                entity.Property(e => e.PoEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PO_END_DATE");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PO_START_DATE");

                entity.Property(e => e.PremiumRate)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("PREMIUM_RATE");

                entity.Property(e => e.RegularRate)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("REGULAR_RATE");

                entity.Property(e => e.SalaryGrade)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SALARY_GRADE");

                entity.Property(e => e.SalaryGradeMaxRate)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("SALARY_GRADE_MAX_RATE");

                entity.Property(e => e.SupervisorLoginId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_LOGIN_ID");

                entity.Property(e => e.SupervisorName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_NAME");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");

                entity.Property(e => e.TotalNteAmount)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("TOTAL_NTE_AMOUNT");

                entity.Property(e => e.Year)
                    .HasPrecision(4)
                    .HasColumnName("YEAR");

                entity.Property(e => e.YtdAmountBilled)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("YTD_AMOUNT_BILLED");

                entity.Property(e => e.YtdBill1Hours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("YTD_BILL1_HOURS");

                entity.Property(e => e.YtdBill2Hours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("YTD_BILL2_HOURS");

                entity.Property(e => e.YtdExpensesBilled)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("YTD_EXPENSES_BILLED");

                entity.Property(e => e.YtdOvertime2Hours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("YTD_OVERTIME2_HOURS");

                entity.Property(e => e.YtdOvertimeHours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("YTD_OVERTIME_HOURS");

                entity.Property(e => e.YtdPremiumHours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("YTD_PREMIUM_HOURS");

                entity.Property(e => e.YtdRegularHours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("YTD_REGULAR_HOURS");

                entity.Property(e => e.YtdTravelHours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("YTD_TRAVEL_HOURS");
            });

            modelBuilder.Entity<EcrReportTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ECR_REPORT_TEMP");

                entity.Property(e => e.AccountCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_CODE");

                entity.Property(e => e.Bill1Rate)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("BILL1_RATE");

                entity.Property(e => e.Bill2Rate)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("BILL2_RATE");

                entity.Property(e => e.CandidateFileId)
                    .HasPrecision(10)
                    .HasColumnName("CANDIDATE_FILE_ID");

                entity.Property(e => e.CandidateName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_NAME");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.EstAnnualExpenditure)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("EST_ANNUAL_EXPENDITURE");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("JOB_TITLE");

                entity.Property(e => e.MaxWeekEndingDate)
                    .HasColumnType("DATE")
                    .HasColumnName("MAX_WEEK_ENDING_DATE");

                entity.Property(e => e.Month)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MONTH");

                entity.Property(e => e.MtdAmountBilled)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("MTD_AMOUNT_BILLED");

                entity.Property(e => e.MtdBill1Hours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("MTD_BILL1_HOURS");

                entity.Property(e => e.MtdBill2Hours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("MTD_BILL2_HOURS");

                entity.Property(e => e.MtdExpensesBilled)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("MTD_EXPENSES_BILLED");

                entity.Property(e => e.MtdOvertime2Hours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("MTD_OVERTIME2_HOURS");

                entity.Property(e => e.MtdOvertimeHours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("MTD_OVERTIME_HOURS");

                entity.Property(e => e.MtdPremiumHours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("MTD_PREMIUM_HOURS");

                entity.Property(e => e.MtdRegularHours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("MTD_REGULAR_HOURS");

                entity.Property(e => e.MtdTravelHours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("MTD_TRAVEL_HOURS");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.Overtime2Rate)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("OVERTIME2_RATE");

                entity.Property(e => e.OvertimeRate)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("OVERTIME_RATE");

                entity.Property(e => e.PoEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PO_END_DATE");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PO_START_DATE");

                entity.Property(e => e.PremiumRate)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("PREMIUM_RATE");

                entity.Property(e => e.RegularRate)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("REGULAR_RATE");

                entity.Property(e => e.SalaryGrade)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SALARY_GRADE");

                entity.Property(e => e.SalaryGradeMaxRate)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("SALARY_GRADE_MAX_RATE");

                entity.Property(e => e.SupervisorLoginId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_LOGIN_ID");

                entity.Property(e => e.SupervisorName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_NAME");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");

                entity.Property(e => e.TotalNteAmount)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("TOTAL_NTE_AMOUNT");

                entity.Property(e => e.Year)
                    .HasPrecision(4)
                    .HasColumnName("YEAR");

                entity.Property(e => e.YtdAmountBilled)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("YTD_AMOUNT_BILLED");

                entity.Property(e => e.YtdBill1Hours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("YTD_BILL1_HOURS");

                entity.Property(e => e.YtdBill2Hours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("YTD_BILL2_HOURS");

                entity.Property(e => e.YtdExpensesBilled)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("YTD_EXPENSES_BILLED");

                entity.Property(e => e.YtdOvertime2Hours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("YTD_OVERTIME2_HOURS");

                entity.Property(e => e.YtdOvertimeHours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("YTD_OVERTIME_HOURS");

                entity.Property(e => e.YtdPremiumHours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("YTD_PREMIUM_HOURS");

                entity.Property(e => e.YtdRegularHours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("YTD_REGULAR_HOURS");

                entity.Property(e => e.YtdTravelHours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("YTD_TRAVEL_HOURS");
            });

            modelBuilder.Entity<Edi>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EDI");

                entity.Property(e => e.CheckDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CHECK_DATE");

                entity.Property(e => e.EdiId)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("EDI_ID");

                entity.Property(e => e.GrossAmount)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("GROSS_AMOUNT");

                entity.Property(e => e.ImportDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IMPORT_DATE");

                entity.Property(e => e.InvoiceNumber)
                    .HasPrecision(18)
                    .HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.PayItem)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PAY_ITEM");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");
            });

            modelBuilder.Entity<EducationMaster>(entity =>
            {
                entity.HasKey(e => e.EducationCode)
                    .HasName("EDUCATION_MASTER_PK");

                entity.ToTable("EDUCATION_MASTER");

                entity.Property(e => e.EducationCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EDUCATION_CODE");

                entity.Property(e => e.ActiveFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_FLAG");

                entity.Property(e => e.EducationName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EDUCATION_NAME");
            });

            modelBuilder.Entity<ErrorLogDetail>(entity =>
            {
                entity.HasKey(e => e.ErrorLogId)
                    .HasName("SYS_C0012002");

                entity.ToTable("ERROR_LOG_DETAILS");

                entity.Property(e => e.ErrorLogId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("ERROR_LOG_ID");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.ErrorDesc)
                    .HasColumnType("LONG")
                    .HasColumnName("ERROR_DESC");
            });

            modelBuilder.Entity<ExitCancel>(entity =>
            {
                entity.ToTable("EXIT_CANCEL");

                entity.HasIndex(e => e.CustomerContactId, "IDX_EXIT_CANCEL_REF_PEOPLE");

                entity.Property(e => e.ExitCancelId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("EXIT_CANCEL_ID");

                entity.Property(e => e.CancelBeforeStartFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CANCEL_BEFORE_START_FLAG");

                entity.Property(e => e.CandidateName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_NAME");

                entity.Property(e => e.ClosingPositionFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CLOSING_POSITION_FLAG");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CustomerContactId)
                    .HasPrecision(10)
                    .HasColumnName("CUSTOMER_CONTACT_ID");

                entity.Property(e => e.CustomerSupplierContactFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_SUPPLIER_CONTACT_FLAG");

                entity.Property(e => e.ExitReason)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("EXIT_REASON");

                entity.Property(e => e.InterviewRequiredFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INTERVIEW_REQUIRED_FLAG");

                entity.Property(e => e.LastDayWorked)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_DAY_WORKED");

                entity.Property(e => e.NoStartFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NO_START_FLAG");

                entity.Property(e => e.SpecifiedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPECIFIED_FLAG");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.HasOne(d => d.CustomerContact)
                    .WithMany(p => p.ExitCancels)
                    .HasForeignKey(d => d.CustomerContactId)
                    .HasConstraintName("FK_EXIT_CAN_REF_PEOPL_PEOPLE");

                entity.HasOne(d => d.ExitReasonNavigation)
                    .WithMany(p => p.ExitCancels)
                    .HasForeignKey(d => d.ExitReason)
                    .HasConstraintName("FK_EXIT_CAN_REF_TERMI_TERMINAT");
            });

            modelBuilder.Entity<ExitCancelTmp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EXIT_CANCEL_TMP");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.ExitReason)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("EXIT_REASON");

                entity.Property(e => e.LastDayWorked)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_DAY_WORKED");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.OldValue)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OLD_VALUE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.ProcessedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PROCESSED_FLAG");

                entity.Property(e => e.TerminationReasonCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TERMINATION_REASON_CODE");
            });

            modelBuilder.Entity<ExpenseType>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("EXPENSE_TYPE");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<ExpenseTypeTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EXPENSE_TYPE_TEMP");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<Fee>(entity =>
            {
                entity.HasKey(e => e.SupplierId);

                entity.ToTable("FEES");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.CustomerFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("CUSTOMER_FEE");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EFFECTIVE_DATE");

                entity.Property(e => e.SupplierFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_FEE");
            });

            modelBuilder.Entity<FeedGroup>(entity =>
            {
                entity.HasKey(e => e.GroupId);

                entity.ToTable("FEED_GROUPS");

                entity.Property(e => e.GroupId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("GROUP_ID");

                entity.Property(e => e.Active)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE");

                entity.Property(e => e.Description)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GROUP_NAME");
            });

            modelBuilder.Entity<FeedGroupSequence>(entity =>
            {
                entity.HasKey(e => new { e.GroupId, e.CycleNumber, e.SequenceCategory, e.SequenceName });

                entity.ToTable("FEED_GROUP_SEQUENCES");

                entity.Property(e => e.GroupId)
                    .HasPrecision(10)
                    .HasColumnName("GROUP_ID");

                entity.Property(e => e.CycleNumber)
                    .HasPrecision(10)
                    .HasColumnName("CYCLE_NUMBER");

                entity.Property(e => e.SequenceCategory)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("SEQUENCE_CATEGORY");

                entity.Property(e => e.SequenceName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SEQUENCE_NAME");

                entity.Property(e => e.EndingValue)
                    .HasPrecision(10)
                    .HasColumnName("ENDING_VALUE");

                entity.Property(e => e.StartingValue)
                    .HasPrecision(10)
                    .HasColumnName("STARTING_VALUE");
            });

            modelBuilder.Entity<FeedGroupSetting>(entity =>
            {
                entity.HasKey(e => new { e.GroupId, e.SettingCategory, e.SettingName });

                entity.ToTable("FEED_GROUP_SETTINGS");

                entity.Property(e => e.GroupId)
                    .HasPrecision(10)
                    .HasColumnName("GROUP_ID");

                entity.Property(e => e.SettingCategory)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("SETTING_CATEGORY");

                entity.Property(e => e.SettingName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SETTING_NAME");

                entity.Property(e => e.SettingValue)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SETTING_VALUE");
            });

            modelBuilder.Entity<FeedJob>(entity =>
            {
                entity.HasKey(e => new { e.CycleNumber, e.GroupId, e.JobName });

                entity.ToTable("FEED_JOBS");

                entity.Property(e => e.CycleNumber)
                    .HasPrecision(10)
                    .HasColumnName("CYCLE_NUMBER");

                entity.Property(e => e.GroupId)
                    .HasPrecision(10)
                    .HasColumnName("GROUP_ID");

                entity.Property(e => e.JobName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JOB_NAME");

                entity.Property(e => e.JobComments)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("JOB_COMMENTS");

                entity.Property(e => e.JobStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("JOB_STATUS");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");
            });

            modelBuilder.Entity<FeedSequence>(entity =>
            {
                entity.HasKey(e => new { e.SequenceCategory, e.SequenceName });

                entity.ToTable("FEED_SEQUENCES");

                entity.Property(e => e.SequenceCategory)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("SEQUENCE_CATEGORY");

                entity.Property(e => e.SequenceName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SEQUENCE_NAME");

                entity.Property(e => e.IncrementBy)
                    .HasPrecision(10)
                    .HasColumnName("INCREMENT_BY");

                entity.Property(e => e.LastValue)
                    .HasPrecision(15)
                    .HasColumnName("LAST_VALUE");

                entity.Property(e => e.MaxValue)
                    .HasPrecision(15)
                    .HasColumnName("MAX_VALUE");

                entity.Property(e => e.MinValue)
                    .HasPrecision(10)
                    .HasColumnName("MIN_VALUE");

                entity.Property(e => e.Wrap)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("WRAP");
            });

            modelBuilder.Entity<GradeLevel>(entity =>
            {
                entity.HasKey(e => e.GradeLevel1);

                entity.ToTable("GRADE_LEVEL");

                entity.Property(e => e.GradeLevel1)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");
            });

            modelBuilder.Entity<HelpLink>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("HELP_LINKS");

                entity.Property(e => e.ActiveFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_FLAG");

                entity.Property(e => e.AttachedFileName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ATTACHED_FILE_NAME");

                entity.Property(e => e.AttachedFileType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ATTACHED_FILE_TYPE");

                entity.Property(e => e.Description).HasColumnName("DESCRIPTION");

                entity.Property(e => e.HelpLinkId)
                    .HasPrecision(10)
                    .HasColumnName("HELP_LINK_ID");

                entity.Property(e => e.HelpSubMenuId)
                    .HasPrecision(10)
                    .HasColumnName("HELP_SUB_MENU_ID");

                entity.Property(e => e.HtmlTextDescription)
                    .HasColumnType("LONG")
                    .HasColumnName("HTML_TEXT_DESCRIPTION");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.HasOne(d => d.HelpSubMenu)
                    .WithMany()
                    .HasForeignKey(d => d.HelpSubMenuId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HELP_SUBMENU_ID");
            });

            modelBuilder.Entity<HelpMenu>(entity =>
            {
                entity.ToTable("HELP_MENU");

                entity.Property(e => e.HelpMenuId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("HELP_MENU_ID");

                entity.Property(e => e.ActiveFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_FLAG");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");
            });

            modelBuilder.Entity<HelpSubMenu>(entity =>
            {
                entity.ToTable("HELP_SUB_MENU");

                entity.Property(e => e.HelpSubMenuId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("HELP_SUB_MENU_ID");

                entity.Property(e => e.ActiveFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_FLAG");

                entity.Property(e => e.AttachedFileName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ATTACHED_FILE_NAME");

                entity.Property(e => e.AttachedFileType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ATTACHED_FILE_TYPE");

                entity.Property(e => e.Description).HasColumnName("DESCRIPTION");

                entity.Property(e => e.HelpMenuId)
                    .HasPrecision(10)
                    .HasColumnName("HELP_MENU_ID");

                entity.Property(e => e.HtmlTextDescription)
                    .HasColumnType("LONG")
                    .HasColumnName("HTML_TEXT_DESCRIPTION");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.HasOne(d => d.HelpMenu)
                    .WithMany(p => p.HelpSubMenus)
                    .HasForeignKey(d => d.HelpMenuId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HELP_MENU_ID");
            });

            modelBuilder.Entity<Hier>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("HIER");

                entity.Property(e => e.Employee)
                    .HasPrecision(10)
                    .HasColumnName("EMPLOYEE");

                entity.Property(e => e.Manager)
                    .HasPrecision(10)
                    .HasColumnName("MANAGER");
            });

            modelBuilder.Entity<HitRateReportTable>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("HIT_RATE_REPORT_TABLE");

                entity.HasIndex(e => e.ReportNo, "IDX_HITRATERPTTBL_REPORTNO");

                entity.HasIndex(e => e.UserId, "IDX_HITRATERPTTBL_USERID");

                entity.HasIndex(e => new { e.Year, e.Month }, "IDX_HITRATERPTTBL_YEARMONTH");

                entity.Property(e => e.Char1)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR1");

                entity.Property(e => e.Char10)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR10");

                entity.Property(e => e.Char11)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR11");

                entity.Property(e => e.Char12)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR12");

                entity.Property(e => e.Char13)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR13");

                entity.Property(e => e.Char14)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR14");

                entity.Property(e => e.Char15)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR15");

                entity.Property(e => e.Char16)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR16");

                entity.Property(e => e.Char17)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR17");

                entity.Property(e => e.Char18)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR18");

                entity.Property(e => e.Char19)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR19");

                entity.Property(e => e.Char2)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR2");

                entity.Property(e => e.Char20)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR20");

                entity.Property(e => e.Char21)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR21");

                entity.Property(e => e.Char22)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR22");

                entity.Property(e => e.Char23)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR23");

                entity.Property(e => e.Char24)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR24");

                entity.Property(e => e.Char25)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR25");

                entity.Property(e => e.Char3)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR3");

                entity.Property(e => e.Char4)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR4");

                entity.Property(e => e.Char5)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR5");

                entity.Property(e => e.Char6)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR6");

                entity.Property(e => e.Char7)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR7");

                entity.Property(e => e.Char8)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR8");

                entity.Property(e => e.Char9)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR9");

                entity.Property(e => e.Date1)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE1");

                entity.Property(e => e.Date10)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE10");

                entity.Property(e => e.Date2)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE2");

                entity.Property(e => e.Date3)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE3");

                entity.Property(e => e.Date4)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE4");

                entity.Property(e => e.Date5)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE5");

                entity.Property(e => e.Date6)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE6");

                entity.Property(e => e.Date7)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE7");

                entity.Property(e => e.Date8)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE8");

                entity.Property(e => e.Date9)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE9");

                entity.Property(e => e.Month)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MONTH");

                entity.Property(e => e.Number1)
                    .HasColumnType("NUMBER(15,6)")
                    .HasColumnName("NUMBER1");

                entity.Property(e => e.Number10)
                    .HasColumnType("NUMBER(15,6)")
                    .HasColumnName("NUMBER10");

                entity.Property(e => e.Number11)
                    .HasColumnType("NUMBER(15,6)")
                    .HasColumnName("NUMBER11");

                entity.Property(e => e.Number12)
                    .HasColumnType("NUMBER(15,6)")
                    .HasColumnName("NUMBER12");

                entity.Property(e => e.Number13)
                    .HasColumnType("NUMBER(15,6)")
                    .HasColumnName("NUMBER13");

                entity.Property(e => e.Number14)
                    .HasColumnType("NUMBER(15,6)")
                    .HasColumnName("NUMBER14");

                entity.Property(e => e.Number15)
                    .HasColumnType("NUMBER(15,6)")
                    .HasColumnName("NUMBER15");

                entity.Property(e => e.Number2)
                    .HasColumnType("NUMBER(15,6)")
                    .HasColumnName("NUMBER2");

                entity.Property(e => e.Number3)
                    .HasColumnType("NUMBER(15,6)")
                    .HasColumnName("NUMBER3");

                entity.Property(e => e.Number4)
                    .HasColumnType("NUMBER(15,6)")
                    .HasColumnName("NUMBER4");

                entity.Property(e => e.Number5)
                    .HasColumnType("NUMBER(15,6)")
                    .HasColumnName("NUMBER5");

                entity.Property(e => e.Number6)
                    .HasColumnType("NUMBER(15,6)")
                    .HasColumnName("NUMBER6");

                entity.Property(e => e.Number7)
                    .HasColumnType("NUMBER(15,6)")
                    .HasColumnName("NUMBER7");

                entity.Property(e => e.Number8)
                    .HasColumnType("NUMBER(15,6)")
                    .HasColumnName("NUMBER8");

                entity.Property(e => e.Number9)
                    .HasColumnType("NUMBER(15,6)")
                    .HasColumnName("NUMBER9");

                entity.Property(e => e.ReportDate)
                    .HasColumnType("DATE")
                    .HasColumnName("REPORT_DATE");

                entity.Property(e => e.ReportName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("REPORT_NAME");

                entity.Property(e => e.ReportNo)
                    .HasColumnType("NUMBER")
                    .HasColumnName("REPORT_NO");

                entity.Property(e => e.UserId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USER_ID");

                entity.Property(e => e.Year)
                    .HasPrecision(4)
                    .HasColumnName("YEAR");
            });

            modelBuilder.Entity<HitTemp1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("HIT_TEMP1");

                entity.HasIndex(e => new { e.OrderNumber, e.Issuance }, "IDX_HIT_TEMP1");

                entity.HasIndex(e => e.ReportNo, "IDX_HIT_TEMP1_REPORTNO");

                entity.HasIndex(e => e.UserId, "IDX_HIT_TEMP1_USERID");

                entity.HasIndex(e => new { e.Year, e.Month }, "IDX_HIT_TEMP1_YEARMONTH");

                entity.Property(e => e.BillingGroupCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_GROUP_CODE");

                entity.Property(e => e.BillingGroupDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_GROUP_DESC");

                entity.Property(e => e.BroadcastType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BROADCAST_TYPE");

                entity.Property(e => e.CommodityBegin)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("COMMODITY_BEGIN")
                    .IsFixedLength(true);

                entity.Property(e => e.CommodityEnd)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("COMMODITY_END")
                    .IsFixedLength(true);

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CustomerRetiree)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_RETIREE");

                entity.Property(e => e.DivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_CODE");

                entity.Property(e => e.DivisionName)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_NAME");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.Month)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MONTH");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.PlacementType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PLACEMENT_TYPE");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoisedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("POISED_DATE");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RegionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("REGION_CODE");

                entity.Property(e => e.ReportNo)
                    .HasColumnType("NUMBER")
                    .HasColumnName("REPORT_NO");

                entity.Property(e => e.RptBegin)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("RPT_BEGIN")
                    .IsFixedLength(true);

                entity.Property(e => e.RptEnd)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("RPT_END")
                    .IsFixedLength(true);

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("SUB_ISSUANCE");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SUBMIT_DATE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierReplaced)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_REPLACED");

                entity.Property(e => e.TargetRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TARGET_RATE");

                entity.Property(e => e.UserId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USER_ID");

                entity.Property(e => e.Year)
                    .HasPrecision(4)
                    .HasColumnName("YEAR");
            });

            modelBuilder.Entity<HitTemp2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("HIT_TEMP2");

                entity.HasIndex(e => e.ReportNo, "IDX_HIT_TEMP2_REPORTNO");

                entity.HasIndex(e => e.UserId, "IDX_HIT_TEMP2_USERID");

                entity.HasIndex(e => new { e.Year, e.Month }, "IDX_HIT_TEMP2_YEARMONTH");

                entity.Property(e => e.BillingGroupCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_GROUP_CODE");

                entity.Property(e => e.BillingGroupDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_GROUP_DESC");

                entity.Property(e => e.BroadcastType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BROADCAST_TYPE");

                entity.Property(e => e.CandidateId)
                    .HasPrecision(10)
                    .HasColumnName("CANDIDATE_ID");

                entity.Property(e => e.CommodityBegin)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("COMMODITY_BEGIN")
                    .IsFixedLength(true);

                entity.Property(e => e.CommodityEnd)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("COMMODITY_END")
                    .IsFixedLength(true);

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CustomerRetiree)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_RETIREE");

                entity.Property(e => e.DivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_CODE");

                entity.Property(e => e.DivisionName)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_NAME");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("FIRST_NAME");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.LastName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LAST_NAME");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.Month)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MONTH");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.PassFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PASS_FLAG");

                entity.Property(e => e.PlacedBidRate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PLACED_BID_RATE");

                entity.Property(e => e.PlacedPo)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PLACED_PO");

                entity.Property(e => e.PlacementType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PLACEMENT_TYPE");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RegionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("REGION_CODE");

                entity.Property(e => e.ReportDate)
                    .HasColumnType("DATE")
                    .HasColumnName("REPORT_DATE");

                entity.Property(e => e.ReportNo)
                    .HasColumnType("NUMBER")
                    .HasColumnName("REPORT_NO");

                entity.Property(e => e.RptBegin)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("RPT_BEGIN")
                    .IsFixedLength(true);

                entity.Property(e => e.RptEnd)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("RPT_END")
                    .IsFixedLength(true);

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SUBMIT_DATE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");

                entity.Property(e => e.SupplierReplaced)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_REPLACED");

                entity.Property(e => e.TargetRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TARGET_RATE");

                entity.Property(e => e.UserId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USER_ID");

                entity.Property(e => e.Year)
                    .HasPrecision(4)
                    .HasColumnName("YEAR");
            });

            modelBuilder.Entity<HitTemp3>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("HIT_TEMP3");

                entity.HasIndex(e => e.ReportNo, "IDX_HIT_TEMP3_REPORTNO");

                entity.HasIndex(e => e.UserId, "IDX_HIT_TEMP3_USERID");

                entity.HasIndex(e => new { e.Year, e.Month }, "IDX_HIT_TEMP3_YEARMONTH");

                entity.Property(e => e.CommodityBegin)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("COMMODITY_BEGIN")
                    .IsFixedLength(true);

                entity.Property(e => e.CommodityEnd)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("COMMODITY_END")
                    .IsFixedLength(true);

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.Month)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MONTH");

                entity.Property(e => e.NumPositionsFilled)
                    .HasColumnType("NUMBER")
                    .HasColumnName("NUM_POSITIONS_FILLED");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.ReportNo)
                    .HasColumnType("NUMBER")
                    .HasColumnName("REPORT_NO");

                entity.Property(e => e.RptBegin)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("RPT_BEGIN")
                    .IsFixedLength(true);

                entity.Property(e => e.RptEnd)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("RPT_END")
                    .IsFixedLength(true);

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SUBMIT_DATE");

                entity.Property(e => e.UserId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USER_ID");

                entity.Property(e => e.Year)
                    .HasPrecision(4)
                    .HasColumnName("YEAR");
            });

            modelBuilder.Entity<HitTemp4>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("HIT_TEMP4");

                entity.HasIndex(e => e.ReportNo, "IDX_HIT_TEMP4_REPORTNO");

                entity.HasIndex(e => e.UserId, "IDX_HIT_TEMP4_USERID");

                entity.HasIndex(e => new { e.Year, e.Month }, "IDX_HIT_TEMP4_YEARMONTH");

                entity.Property(e => e.CommodityBegin)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("COMMODITY_BEGIN")
                    .IsFixedLength(true);

                entity.Property(e => e.CommodityEnd)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("COMMODITY_END")
                    .IsFixedLength(true);

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.Month)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MONTH");

                entity.Property(e => e.NumSubmitted)
                    .HasColumnType("NUMBER")
                    .HasColumnName("NUM_SUBMITTED");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.ReportNo)
                    .HasColumnType("NUMBER")
                    .HasColumnName("REPORT_NO");

                entity.Property(e => e.RptBegin)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("RPT_BEGIN")
                    .IsFixedLength(true);

                entity.Property(e => e.RptEnd)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("RPT_END")
                    .IsFixedLength(true);

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SUBMIT_DATE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");

                entity.Property(e => e.UserId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USER_ID");

                entity.Property(e => e.Year)
                    .HasPrecision(4)
                    .HasColumnName("YEAR");
            });

            modelBuilder.Entity<HitTempTable>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("HIT_TEMP_TABLE");

                entity.Property(e => e.AlgorithmName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ALGORITHM_NAME");

                entity.Property(e => e.BillingGroup)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_GROUP");

                entity.Property(e => e.CommodityBegin)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("COMMODITY_BEGIN");

                entity.Property(e => e.CommodityEnd)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("COMMODITY_END");

                entity.Property(e => e.FileId)
                    .HasPrecision(8)
                    .HasColumnName("FILE_ID");

                entity.Property(e => e.FilledDate)
                    .HasColumnType("DATE")
                    .HasColumnName("FILLED_DATE");

                entity.Property(e => e.Issuance)
                    .HasPrecision(8)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.OrderNum)
                    .HasPrecision(8)
                    .HasColumnName("ORDER_NUM");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE")
                    .IsFixedLength(true);

                entity.Property(e => e.PoNum)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUM");

                entity.Property(e => e.PositionNum)
                    .HasPrecision(8)
                    .HasColumnName("POSITION_NUM");

                entity.Property(e => e.ReportNo)
                    .HasPrecision(8)
                    .HasColumnName("REPORT_NO");

                entity.Property(e => e.RptBegin)
                    .HasColumnType("DATE")
                    .HasColumnName("RPT_BEGIN");

                entity.Property(e => e.RptEnd)
                    .HasColumnType("DATE")
                    .HasColumnName("RPT_END");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(8)
                    .HasColumnName("SUB_ISSUANCE");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SUBMIT_DATE");

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierReplaced)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_REPLACED");

                entity.Property(e => e.UserId)
                    .HasColumnType("NUMBER(22)")
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<Hol>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("HOL");

                entity.Property(e => e.Col)
                    .HasPrecision(2)
                    .HasColumnName("COL");

                entity.Property(e => e.HolidayDate)
                    .HasColumnType("DATE")
                    .HasColumnName("HOLIDAY_DATE");

                entity.Property(e => e.HolidayName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("HOLIDAY_NAME");
            });

            modelBuilder.Entity<HoldCode>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("HOLD_CODE");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<Holiday>(entity =>
            {
                entity.HasKey(e => e.HolidayDate);

                entity.ToTable("HOLIDAYS");

                entity.Property(e => e.HolidayDate)
                    .HasColumnType("DATE")
                    .HasColumnName("HOLIDAY_DATE");

                entity.Property(e => e.EarningsCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EARNINGS_CODE");

                entity.Property(e => e.HolidayName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HOLIDAY_NAME");
            });

            modelBuilder.Entity<InactivePoReport>(entity =>
            {
                entity.HasKey(e => e.InactivePoId);

                entity.ToTable("INACTIVE_PO_REPORT");

                entity.Property(e => e.InactivePoId)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("INACTIVE_PO_ID");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.ReportStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("REPORT_STATUS");
            });

            modelBuilder.Entity<IneligibleCandidatesPnet>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("INELIGIBLE_CANDIDATES_PNET");

                entity.Property(e => e.CandidateId)
                    .HasPrecision(10)
                    .HasColumnName("CANDIDATE_ID");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");
            });

            modelBuilder.Entity<IneligibleReassignment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("INELIGIBLE_REASSIGNMENT");

                entity.Property(e => e.AmendmentNumber)
                    .HasPrecision(10)
                    .HasColumnName("AMENDMENT_NUMBER");

                entity.Property(e => e.BackfillFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BACKFILL_FLAG");

                entity.Property(e => e.ContStartFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CONT_START_FLAG");

                entity.Property(e => e.ContactCdsid)
                    .HasPrecision(10)
                    .HasColumnName("CONTACT_CDSID");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.InterviewFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INTERVIEW_FLAG");

                entity.Property(e => e.LastDayWorked)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_DAY_WORKED");

                entity.Property(e => e.PosReqFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("POS_REQ_FLAG");

                entity.Property(e => e.TerminationCode)
                    .HasPrecision(10)
                    .HasColumnName("TERMINATION_CODE");
            });

            modelBuilder.Entity<InterviewApproval>(entity =>
            {
                entity.ToTable("INTERVIEW_APPROVALS");

                entity.HasIndex(e => e.InterviewDetailsId, "INTERVIEW_APPROVALS_U01")
                    .IsUnique();

                entity.Property(e => e.InterviewApprovalId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("INTERVIEW_APPROVAL_ID");

                entity.Property(e => e.CustomerComments)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_COMMENTS");

                entity.Property(e => e.CustomerConfirmationDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CUSTOMER_CONFIRMATION_DATE");

                entity.Property(e => e.CustomerConfirmationFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_CONFIRMATION_FLAG");

                entity.Property(e => e.CustomerUserId)
                    .HasPrecision(10)
                    .HasColumnName("CUSTOMER_USER_ID");

                entity.Property(e => e.InternalUserComments)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("INTERNAL_USER_COMMENTS");

                entity.Property(e => e.InterviewDetailsId)
                    .HasPrecision(10)
                    .HasColumnName("INTERVIEW_DETAILS_ID");

                entity.Property(e => e.SuggestedInterveiwerId)
                    .HasPrecision(10)
                    .HasColumnName("SUGGESTED_INTERVEIWER_ID");

                entity.Property(e => e.SupplierComments)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_COMMENTS");

                entity.Property(e => e.SupplierConfirmationDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SUPPLIER_CONFIRMATION_DATE");

                entity.Property(e => e.SupplierConfirmationFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_CONFIRMATION_FLAG");

                entity.Property(e => e.SupplierUserId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_USER_ID");

                entity.Property(e => e.TaskId)
                    .HasPrecision(10)
                    .HasColumnName("TASK_ID");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.Udf5)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UDF5");

                entity.HasOne(d => d.InterviewDetails)
                    .WithOne(p => p.InterviewApproval)
                    .HasForeignKey<InterviewApproval>(d => d.InterviewDetailsId)
                    .HasConstraintName("INTERVIEW_APPROVALS_R01");
            });

            modelBuilder.Entity<InterviewDetail>(entity =>
            {
                entity.HasKey(e => e.InterviewDetailsId)
                    .HasName("INTERVIEW_DETAILS_PK");

                entity.ToTable("INTERVIEW_DETAILS");

                entity.Property(e => e.InterviewDetailsId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("INTERVIEW_DETAILS_ID");

                entity.Property(e => e.ActualInterviewDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ACTUAL_INTERVIEW_DATE");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.Comments)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.InterveiwStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INTERVEIW_STATUS");

                entity.Property(e => e.InterviewInitiatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("INTERVIEW_INITIATED_DATE");

                entity.Property(e => e.InterviewMode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INTERVIEW_MODE");

                entity.Property(e => e.InterviewPlace)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("INTERVIEW_PLACE");

                entity.Property(e => e.InterviewProposedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("INTERVIEW_PROPOSED_DATE");

                entity.Property(e => e.InterviewRequestedBy)
                    .HasPrecision(10)
                    .HasColumnName("INTERVIEW_REQUESTED_BY");

                entity.Property(e => e.InterviewRound)
                    .HasPrecision(10)
                    .HasColumnName("INTERVIEW_ROUND");

                entity.Property(e => e.InterviewTakenBy)
                    .HasPrecision(10)
                    .HasColumnName("INTERVIEW_TAKEN_BY");

                entity.Property(e => e.Issuance)
                    .HasPrecision(10)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.RequisitionerId)
                    .HasPrecision(10)
                    .HasColumnName("REQUISITIONER_ID");

                entity.Property(e => e.StaffingSpecialistId)
                    .HasPrecision(10)
                    .HasColumnName("STAFFING_SPECIALIST_ID");

                entity.Property(e => e.SupervisorId)
                    .HasPrecision(10)
                    .HasColumnName("SUPERVISOR_ID");

                entity.Property(e => e.TaskId)
                    .HasPrecision(10)
                    .HasColumnName("TASK_ID");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.Udf5)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UDF5");
            });

            modelBuilder.Entity<InterviewDetailsHistory>(entity =>
            {
                entity.ToTable("INTERVIEW_DETAILS_HISTORY");

                entity.Property(e => e.InterviewDetailsHistoryId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("INTERVIEW_DETAILS_HISTORY_ID");

                entity.Property(e => e.ActualInterviewDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ACTUAL_INTERVIEW_DATE");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.InterveiwStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INTERVEIW_STATUS");

                entity.Property(e => e.InterviewDetailsId)
                    .HasPrecision(10)
                    .HasColumnName("INTERVIEW_DETAILS_ID");

                entity.Property(e => e.InterviewInitiatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("INTERVIEW_INITIATED_DATE");

                entity.Property(e => e.InterviewMode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INTERVIEW_MODE");

                entity.Property(e => e.InterviewPlace)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("INTERVIEW_PLACE");

                entity.Property(e => e.InterviewProposedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("INTERVIEW_PROPOSED_DATE");

                entity.Property(e => e.InterviewRequestedBy)
                    .HasPrecision(10)
                    .HasColumnName("INTERVIEW_REQUESTED_BY");

                entity.Property(e => e.InterviewRound)
                    .HasPrecision(10)
                    .HasColumnName("INTERVIEW_ROUND");

                entity.Property(e => e.InterviewTakenBy)
                    .HasPrecision(10)
                    .HasColumnName("INTERVIEW_TAKEN_BY");

                entity.Property(e => e.Issuance)
                    .HasPrecision(10)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.RequisitionerId)
                    .HasPrecision(10)
                    .HasColumnName("REQUISITIONER_ID");

                entity.Property(e => e.StaffingSpecialistId)
                    .HasPrecision(10)
                    .HasColumnName("STAFFING_SPECIALIST_ID");

                entity.Property(e => e.SupervisorId)
                    .HasPrecision(10)
                    .HasColumnName("SUPERVISOR_ID");

                entity.Property(e => e.TaskId)
                    .HasPrecision(10)
                    .HasColumnName("TASK_ID");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.Udf5)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UDF5");
            });

            modelBuilder.Entity<InterviewFeedback>(entity =>
            {
                entity.HasKey(e => e.InterviewDetailsId)
                    .HasName("INTERVIEW_FEEDBACK_PK");

                entity.ToTable("INTERVIEW_FEEDBACK");

                entity.Property(e => e.InterviewDetailsId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("INTERVIEW_DETAILS_ID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.InterviewRound)
                    .HasPrecision(10)
                    .HasColumnName("INTERVIEW_ROUND");

                entity.Property(e => e.InterviewerId)
                    .HasPrecision(10)
                    .HasColumnName("INTERVIEWER_ID");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.TaskId)
                    .HasPrecision(10)
                    .HasColumnName("TASK_ID");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.Udf5)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UDF5");

                entity.HasOne(d => d.InterviewDetails)
                    .WithOne(p => p.InterviewFeedback)
                    .HasForeignKey<InterviewFeedback>(d => d.InterviewDetailsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INTERVIEW_FEEDBACK_R01");
            });

            modelBuilder.Entity<Job>(entity =>
            {
                entity.HasKey(e => new { e.CycleNumber, e.JobName });

                entity.ToTable("JOBS");

                entity.Property(e => e.CycleNumber)
                    .HasPrecision(10)
                    .HasColumnName("CYCLE_NUMBER");

                entity.Property(e => e.JobName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JOB_NAME");

                entity.Property(e => e.JobComments)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("JOB_COMMENTS");

                entity.Property(e => e.JobStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("JOB_STATUS");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");
            });

            modelBuilder.Entity<Language>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("LANGUAGES");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<LanguageMaster>(entity =>
            {
                entity.HasKey(e => e.LanguageCode)
                    .HasName("LANGUAGE_MASTER_PK");

                entity.ToTable("LANGUAGE_MASTER");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LANGUAGE_CODE");

                entity.Property(e => e.ActiveFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_FLAG");

                entity.Property(e => e.LanguageName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LANGUAGE_NAME");
            });

            modelBuilder.Entity<LaunchStatus>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("LAUNCH_STATUS");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<LeaversReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LEAVERS_REPORT");

                entity.Property(e => e.AmendmentCreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("AMENDMENT_CREATED_DATE");

                entity.Property(e => e.ContracteeName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CONTRACTEE_NAME");

                entity.Property(e => e.ContractorCdsid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONTRACTOR_CDSID");

                entity.Property(e => e.ContractorId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTOR_ID");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.PoStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PO_STATUS");

                entity.Property(e => e.PositionTitle)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_TITLE");

                entity.Property(e => e.ProductCode)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SupervisorCdsid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_CDSID");

                entity.Property(e => e.SupervisorName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_NAME");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");

                entity.Property(e => e.TerminationDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TERMINATION_DESCRIPTION");

                entity.Property(e => e.TerminationReasonCode)
                    .HasPrecision(10)
                    .HasColumnName("TERMINATION_REASON_CODE");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");
            });

            modelBuilder.Entity<Location>(entity =>
            {
                entity.HasKey(e => e.LocationCode);

                entity.ToTable("LOCATIONS");

                entity.HasIndex(e => e.RegionCode, "REGION_CODE_INDX");

                entity.Property(e => e.LocationCode)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.Address1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS_1");

                entity.Property(e => e.Address2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS_2");

                entity.Property(e => e.Address3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS_3");

                entity.Property(e => e.City)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CITY");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.GroupCode)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("GROUP_CODE");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("REGION_CODE");

                entity.Property(e => e.State)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("STATE");

                entity.Property(e => e.ZipCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ZIP_CODE");

                entity.HasOne(d => d.RegionCodeNavigation)
                    .WithMany(p => p.Locations)
                    .HasForeignKey(d => d.RegionCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LOC_REF_LOC_REGION");
            });

            modelBuilder.Entity<LocationRegionCode>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("LOCATION_REGION_CODES");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<LocationsUkTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LOCATIONS_UK_TEMP");

                entity.Property(e => e.AddressLine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS_LINE_1");

                entity.Property(e => e.AddressLine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS_LINE_2");

                entity.Property(e => e.AddressLine3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS_LINE_3");

                entity.Property(e => e.City)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CITY");

                entity.Property(e => e.LocCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.LocName)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("LOC_NAME");

                entity.Property(e => e.State)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("STATE");

                entity.Property(e => e.Zip)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ZIP");
            });

            modelBuilder.Entity<Lookup>(entity =>
            {
                entity.HasKey(e => e.TableName)
                    .HasName("PK_LOOKUPS_TN");

                entity.ToTable("LOOKUPS");

                entity.Property(e => e.TableName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TABLE_NAME");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_MODIFIED_DATE");

                entity.Property(e => e.PreviousDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PREVIOUS_DATE");
            });

            modelBuilder.Entity<Margin>(entity =>
            {
                entity.HasKey(e => new { e.MarginType, e.BillingGroup, e.SupplierId, e.EffectiveDate });

                entity.ToTable("MARGINS");

                entity.Property(e => e.MarginType)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MARGIN_TYPE");

                entity.Property(e => e.BillingGroup)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_GROUP");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EFFECTIVE_DATE");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.MarginValue)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("MARGIN_VALUE");

                entity.HasOne(d => d.BillingGroupNavigation)
                    .WithMany(p => p.Margins)
                    .HasForeignKey(d => d.BillingGroup)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MARGIN2");

                entity.HasOne(d => d.MarginTypeNavigation)
                    .WithMany(p => p.Margins)
                    .HasForeignKey(d => d.MarginType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MARGIN1");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.Margins)
                    .HasForeignKey(d => d.SupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MARGIN3");
            });

            modelBuilder.Entity<MarginType>(entity =>
            {
                entity.HasKey(e => e.MarginTypeCode);

                entity.ToTable("MARGIN_TYPE");

                entity.Property(e => e.MarginTypeCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MARGIN_TYPE_CODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<Metric>(entity =>
            {
                entity.ToTable("METRICS");

                entity.Property(e => e.MetricId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("METRIC_ID");

                entity.Property(e => e.Available)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AVAILABLE");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.ExpireDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EXPIRE_DATE");

                entity.Property(e => e.FileLocation)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("FILE_LOCATION");

                entity.Property(e => e.ReportType)
                    .HasPrecision(1)
                    .HasColumnName("REPORT_TYPE");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUBJECT");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");
            });

            modelBuilder.Entity<Microsoftdtproperty>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Property })
                    .HasName("MICROSOFT_PK_DTPROPERTIES");

                entity.ToTable("MICROSOFTDTPROPERTIES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Property)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("PROPERTY");

                entity.Property(e => e.Lvalue)
                    .HasColumnType("LONG RAW")
                    .HasColumnName("LVALUE");

                entity.Property(e => e.Objectid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OBJECTID");

                entity.Property(e => e.Value)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VALUE");

                entity.Property(e => e.Version)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VERSION")
                    .HasDefaultValueSql("(0) ");
            });

            modelBuilder.Entity<MinorityGroup>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("MINORITY_GROUP");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<MismatchPoDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MISMATCH_PO_DATA");

                entity.Property(e => e.ApprovalStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("APPROVAL_STATUS");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CustomerFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("CUSTOMER_FEE");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.LocationCode)
                    .HasPrecision(10)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNte)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("PO_NTE");

                entity.Property(e => e.PoNumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.PoStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PO_STATUS");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RequisitionerId)
                    .HasPrecision(10)
                    .HasColumnName("REQUISITIONER_ID");

                entity.Property(e => e.RrFactor)
                    .HasColumnType("NUMBER(6,2)")
                    .HasColumnName("RR_FACTOR");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("SUB_ISSUANCE");

                entity.Property(e => e.SupplierFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_FEE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.TerminationReasonCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TERMINATION_REASON_CODE");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.Udf5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF5");

                entity.Property(e => e.Udf6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF6");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");
            });

            modelBuilder.Entity<MlogAmendment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MLOG$_AMENDMENTS");

                entity.Property(e => e.AmendmentNumber)
                    .HasPrecision(10)
                    .HasColumnName("AMENDMENT_NUMBER");

                entity.Property(e => e.ChangeVector)
                    .HasMaxLength(255)
                    .HasColumnName("CHANGE_VECTOR$$");

                entity.Property(e => e.Dmltype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMLTYPE$$");

                entity.Property(e => e.OldNew)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("OLD_NEW$$");

                entity.Property(e => e.Snaptime)
                    .HasColumnType("DATE")
                    .HasColumnName("SNAPTIME$$");
            });

            modelBuilder.Entity<MlogAporReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MLOG$_APOR_REPORT");

                entity.Property(e => e.ChangeVector)
                    .HasMaxLength(255)
                    .HasColumnName("CHANGE_VECTOR$$");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.Dmltype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMLTYPE$$");

                entity.Property(e => e.MRow)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("M_ROW$$");

                entity.Property(e => e.OldNew)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("OLD_NEW$$");

                entity.Property(e => e.Sequence)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SEQUENCE$$");

                entity.Property(e => e.Snaptime)
                    .HasColumnType("DATE")
                    .HasColumnName("SNAPTIME$$");

                entity.Property(e => e.UdfString2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING2");
            });

            modelBuilder.Entity<MlogBid>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MLOG$_BIDS");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.ChangeVector)
                    .HasMaxLength(255)
                    .HasColumnName("CHANGE_VECTOR$$");

                entity.Property(e => e.Dmltype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMLTYPE$$");

                entity.Property(e => e.OldNew)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("OLD_NEW$$");

                entity.Property(e => e.Snaptime)
                    .HasColumnType("DATE")
                    .HasColumnName("SNAPTIME$$");
            });

            modelBuilder.Entity<MlogBroadcast>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MLOG$_BROADCASTS");

                entity.Property(e => e.BroadcastId)
                    .HasPrecision(10)
                    .HasColumnName("BROADCAST_ID");

                entity.Property(e => e.ChangeVector)
                    .HasMaxLength(255)
                    .HasColumnName("CHANGE_VECTOR$$");

                entity.Property(e => e.Dmltype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMLTYPE$$");

                entity.Property(e => e.OldNew)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("OLD_NEW$$");

                entity.Property(e => e.Snaptime)
                    .HasColumnType("DATE")
                    .HasColumnName("SNAPTIME$$");
            });

            modelBuilder.Entity<MlogDmcReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MLOG$_DMC_REPORT");

                entity.Property(e => e.ChangeVector)
                    .HasMaxLength(255)
                    .HasColumnName("CHANGE_VECTOR$$");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.Dmltype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMLTYPE$$");

                entity.Property(e => e.MRow)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("M_ROW$$");

                entity.Property(e => e.OldNew)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("OLD_NEW$$");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.Sequence)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SEQUENCE$$");

                entity.Property(e => e.Snaptime)
                    .HasColumnType("DATE")
                    .HasColumnName("SNAPTIME$$");
            });

            modelBuilder.Entity<MlogProductCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MLOG$_PRODUCT_CODES");

                entity.Property(e => e.ChangeVector)
                    .HasMaxLength(255)
                    .HasColumnName("CHANGE_VECTOR$$");

                entity.Property(e => e.Dmltype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMLTYPE$$");

                entity.Property(e => e.OldNew)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("OLD_NEW$$");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.Snaptime)
                    .HasColumnType("DATE")
                    .HasColumnName("SNAPTIME$$");
            });

            modelBuilder.Entity<MlogPurchaseOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MLOG$_PURCHASE_ORDERS");

                entity.Property(e => e.ChangeVector)
                    .HasMaxLength(255)
                    .HasColumnName("CHANGE_VECTOR$$");

                entity.Property(e => e.Dmltype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMLTYPE$$");

                entity.Property(e => e.OldNew)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("OLD_NEW$$");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.Snaptime)
                    .HasColumnType("DATE")
                    .HasColumnName("SNAPTIME$$");
            });

            modelBuilder.Entity<MlogReportUsercostcente>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MLOG$_REPORT_USERCOSTCENTE");

                entity.Property(e => e.ChangeVector)
                    .HasMaxLength(255)
                    .HasColumnName("CHANGE_VECTOR$$");

                entity.Property(e => e.CostCenterId)
                    .HasMaxLength(26)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER_ID");

                entity.Property(e => e.Dmltype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMLTYPE$$");

                entity.Property(e => e.OldNew)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("OLD_NEW$$");

                entity.Property(e => e.Snaptime)
                    .HasColumnType("DATE")
                    .HasColumnName("SNAPTIME$$");

                entity.Property(e => e.UserId)
                    .HasPrecision(10)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<MlogSupplier>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MLOG$_SUPPLIERS");

                entity.Property(e => e.ChangeVector)
                    .HasMaxLength(255)
                    .HasColumnName("CHANGE_VECTOR$$");

                entity.Property(e => e.Dmltype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMLTYPE$$");

                entity.Property(e => e.OldNew)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("OLD_NEW$$");

                entity.Property(e => e.Snaptime)
                    .HasColumnType("DATE")
                    .HasColumnName("SNAPTIME$$");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");
            });

            modelBuilder.Entity<MlogTimesheetHeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MLOG$_TIMESHEET_HEADERS");

                entity.Property(e => e.ChangeVector)
                    .HasMaxLength(255)
                    .HasColumnName("CHANGE_VECTOR$$");

                entity.Property(e => e.Dmltype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMLTYPE$$");

                entity.Property(e => e.OldNew)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("OLD_NEW$$");

                entity.Property(e => e.Snaptime)
                    .HasColumnType("DATE")
                    .HasColumnName("SNAPTIME$$");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");
            });

            modelBuilder.Entity<Multiplier>(entity =>
            {
                entity.HasKey(e => new { e.MultiplierId, e.EffectiveDate, e.OrderType })
                    .HasName("PK_MULTIPLERS");

                entity.ToTable("MULTIPLIERS");

                entity.Property(e => e.MultiplierId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MULTIPLIER_ID");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EFFECTIVE_DATE");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.DisplayOrder)
                    .HasPrecision(3)
                    .HasColumnName("DISPLAY_ORDER");

                entity.Property(e => e.IsSelectableFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");

                entity.Property(e => e.MultiplierAllowedFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MULTIPLIER_ALLOWED_FLAG");

                entity.Property(e => e.MultiplierType)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("MULTIPLIER_TYPE");

                entity.Property(e => e.MultiplierValue)
                    .HasColumnType("NUMBER(7,3)")
                    .HasColumnName("MULTIPLIER_VALUE");
            });

            modelBuilder.Entity<MvAmendmentDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MV_AMENDMENT_DASHBOARD");

                entity.HasIndex(e => e.CostCenter, "INDX_CC_AMENDMENT");

                entity.HasIndex(e => e.Compentency, "INDX_COMPENTENCY_AMENDMENT");

                entity.HasIndex(e => e.SupplierId, "INDX_SUPPLIER_ID_AMENDMENT");

                entity.Property(e => e.AmendmentType)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("AMENDMENT_TYPE");

                entity.Property(e => e.Compentency)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("COMPENTENCY");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.Month)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MONTH");

                entity.Property(e => e.MonthNumber)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MONTH_NUMBER");

                entity.Property(e => e.PositionTitle)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_TITLE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.TotalAmendments)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTAL_AMENDMENTS");

                entity.Property(e => e.Year)
                    .HasColumnType("NUMBER")
                    .HasColumnName("YEAR");
            });

            modelBuilder.Entity<MvAporDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MV_APOR_DASHBOARD");

                entity.HasIndex(e => e.Compentency, "INDX_COMPENTENCY");

                entity.HasIndex(e => e.CostCenter, "INDX_COSTCENTER");

                entity.HasIndex(e => e.SupplierId, "INDX_SUPPLIER_ID");

                entity.HasIndex(e => e.JobTitle, "INDX_TITLE");

                entity.Property(e => e.Compentency)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("COMPENTENCY");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(401)
                    .IsUnicode(false)
                    .HasColumnName("JOB_TITLE");

                entity.Property(e => e.Month)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MONTH");

                entity.Property(e => e.MonthNumber)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MONTH_NUMBER");

                entity.Property(e => e.SalaryGrade)
                    .HasPrecision(2)
                    .HasColumnName("SALARY_GRADE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.TotalPo)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTAL_PO");

                entity.Property(e => e.Year)
                    .HasColumnType("NUMBER")
                    .HasColumnName("YEAR");
            });

            modelBuilder.Entity<MvBidpositionDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MV_BIDPOSITION_DASHBOARD");

                entity.HasIndex(e => e.CostCenter, "INDX_COCST_CENTER_BIDPOS");

                entity.HasIndex(e => e.SupplierId, "INDX_SUPPLIER_BIDPOS");

                entity.HasIndex(e => e.Title, "INDX_TITLE_BIDPOS");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.Month)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MONTH");

                entity.Property(e => e.MonthNumber)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MONTH_NUMBER");

                entity.Property(e => e.OpnStatus)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("OPN_STATUS");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");

                entity.Property(e => e.Title)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TITLE");

                entity.Property(e => e.Year)
                    .HasColumnType("NUMBER")
                    .HasColumnName("YEAR");
            });

            modelBuilder.Entity<MvClass>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MV_CLASSES");

                entity.Property(e => e.ClassId)
                    .HasPrecision(10)
                    .HasColumnName("CLASS_ID");

                entity.Property(e => e.ClassName)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("CLASS_NAME");

                entity.Property(e => e.ReferenceId)
                    .HasPrecision(10)
                    .HasColumnName("REFERENCE_ID");
            });

            modelBuilder.Entity<MvDcrDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MV_DCR_DASHBOARD");

                entity.Property(e => e.AmountBilled)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AMOUNT_BILLED");

                entity.Property(e => e.CandidateName)
                    .HasMaxLength(51)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_NAME");

                entity.Property(e => e.Compentency)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("COMPENTENCY");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JOB_TITLE");

                entity.Property(e => e.Month)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MONTH");

                entity.Property(e => e.MonthNumber)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MONTH_NUMBER");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.UserId)
                    .HasPrecision(10)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.Year)
                    .HasPrecision(4)
                    .HasColumnName("YEAR");
            });

            modelBuilder.Entity<MvTimesheetDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MV_TIMESHEET_DASHBOARD");

                entity.HasIndex(e => e.AgencyWorkerName, "INDX_CANDIDATE_TSDASHBOARD");

                entity.HasIndex(e => e.Compentency, "INDX_COMPENTENCY_TSDASHBOARD");

                entity.HasIndex(e => e.CostCenter, "INDX_COSTCENTER_TSDASHBOARD");

                entity.HasIndex(e => e.SupplierId, "INDX_SUPPLIERID_TSDASHBOARD");

                entity.HasIndex(e => e.Title, "INDX_TITLE_TSDASHBOARD");

                entity.Property(e => e.AgencyWorkerName)
                    .HasMaxLength(51)
                    .IsUnicode(false)
                    .HasColumnName("AGENCY_WORKER_NAME");

                entity.Property(e => e.AmountBilled)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AMOUNT_BILLED");

                entity.Property(e => e.AmountPaid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AMOUNT_PAID");

                entity.Property(e => e.Compentency)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("COMPENTENCY");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.EarningsCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("EARNINGS_CODE");

                entity.Property(e => e.Hours)
                    .HasColumnType("NUMBER")
                    .HasColumnName("HOURS");

                entity.Property(e => e.Month)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MONTH");

                entity.Property(e => e.MonthNumber)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MONTH_NUMBER");

                entity.Property(e => e.SupervisorId)
                    .HasPrecision(10)
                    .HasColumnName("SUPERVISOR_ID");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");

                entity.Property(e => e.TimesheetStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TIMESHEET_STATUS");

                entity.Property(e => e.Title)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TITLE");

                entity.Property(e => e.Year)
                    .HasColumnType("NUMBER")
                    .HasColumnName("YEAR");
            });

            modelBuilder.Entity<NavPageAccess>(entity =>
            {
                entity.HasKey(e => new { e.PagePath, e.AuthLevel });

                entity.ToTable("NAV_PAGE_ACCESS");

                entity.Property(e => e.PagePath)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PAGE_PATH");

                entity.Property(e => e.AuthLevel)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("AUTH_LEVEL");
            });

            modelBuilder.Entity<NewLogin>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NEW_LOGINS");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.LoginId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LOGIN_ID");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PHONE");

                entity.Property(e => e.Title)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TITLE");
            });

            modelBuilder.Entity<OldPosPnet>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OLD_POS_PNET");

                entity.Property(e => e.CandidateId)
                    .HasPrecision(10)
                    .HasColumnName("CANDIDATE_ID");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.ProcessedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PROCESSED_FLAG");
            });

            modelBuilder.Entity<OpenOrdersReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OPEN_ORDERS_REPORT");

                entity.Property(e => e.AccountProfessName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_PROFESS_NAME");

                entity.Property(e => e.BroadcastDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BROADCAST_DATE");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.DaysRange)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DAYS_RANGE");

                entity.Property(e => e.Daysinstatus)
                    .HasPrecision(10)
                    .HasColumnName("DAYSINSTATUS");

                entity.Property(e => e.DaysinstatusOld)
                    .HasPrecision(10)
                    .HasColumnName("DAYSINSTATUS_OLD");

                entity.Property(e => e.DivisionCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_CODE");

                entity.Property(e => e.DivisionDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_DESCRIPTION");

                entity.Property(e => e.HoldCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("HOLD_CODE");

                entity.Property(e => e.HoldDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("HOLD_DESCRIPTION");

                entity.Property(e => e.Issuance)
                    .HasPrecision(10)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.Location)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION");

                entity.Property(e => e.LoginId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LOGIN_ID");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_STATUS");

                entity.Property(e => e.OrderStatusDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_STATUS_DESCRIPTION");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.PositionOpenedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("POSITION_OPENED_DATE");

                entity.Property(e => e.PositionStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_STATUS");

                entity.Property(e => e.PrimaryDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PRIMARY_DESC");

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RecdDt)
                    .HasColumnType("DATE")
                    .HasColumnName("RECD_DT");

                entity.Property(e => e.RegionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("REGION_CODE");

                entity.Property(e => e.ReportsToEmail)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REPORTS_TO_EMAIL");

                entity.Property(e => e.ReportsToName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REPORTS_TO_NAME");

                entity.Property(e => e.RequisitionerEmailAddress)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REQUISITIONER_EMAIL_ADDRESS");

                entity.Property(e => e.RequisitionerLoginId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REQUISITIONER_LOGIN_ID");

                entity.Property(e => e.RequisitionerName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REQUISITIONER_NAME");

                entity.Property(e => e.RequisitionerPhoneNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REQUISITIONER_PHONE_NUMBER");

                entity.Property(e => e.SecondaryDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SECONDARY_DESC");

                entity.Property(e => e.StaffingSpecialistName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STAFFING_SPECIALIST_NAME");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(10)
                    .HasColumnName("SUB_ISSUANCE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");
            });

            modelBuilder.Entity<OpenOrdersRrsReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OPEN_ORDERS_RRS_REPORT");

                entity.Property(e => e.AccountProfessName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_PROFESS_NAME");

                entity.Property(e => e.BroadcastDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BROADCAST_DATE");

                entity.Property(e => e.BroadcastDateDay999)
                    .HasColumnType("DATE")
                    .HasColumnName("BROADCAST_DATE_DAY999");

                entity.Property(e => e.BroadcastType)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("BROADCAST_TYPE");

                entity.Property(e => e.CandidateName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_NAME");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.DaysRange)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DAYS_RANGE");

                entity.Property(e => e.Daysinstatus)
                    .HasPrecision(10)
                    .HasColumnName("DAYSINSTATUS");

                entity.Property(e => e.DaysinstatusOld)
                    .HasPrecision(10)
                    .HasColumnName("DAYSINSTATUS_OLD");

                entity.Property(e => e.DivisionCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_CODE");

                entity.Property(e => e.DivisionDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_DESCRIPTION");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.HoldCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("HOLD_CODE");

                entity.Property(e => e.HoldDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("HOLD_DESCRIPTION");

                entity.Property(e => e.Issuance)
                    .HasPrecision(10)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.Location)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION");

                entity.Property(e => e.LoginId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LOGIN_ID");

                entity.Property(e => e.OrderCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_CREATED_BY");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_STATUS");

                entity.Property(e => e.OrderStatusDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_STATUS_DESCRIPTION");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.PositionOpenedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("POSITION_OPENED_DATE");

                entity.Property(e => e.PositionStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_STATUS");

                entity.Property(e => e.PrimaryDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PRIMARY_DESC");

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RecdDt)
                    .HasColumnType("DATE")
                    .HasColumnName("RECD_DT");

                entity.Property(e => e.RegionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("REGION_CODE");

                entity.Property(e => e.ReportsToCdsid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REPORTS_TO_CDSID");

                entity.Property(e => e.ReportsToEmail)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REPORTS_TO_EMAIL");

                entity.Property(e => e.ReportsToName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REPORTS_TO_NAME");

                entity.Property(e => e.RequisitionerEmailAddress)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REQUISITIONER_EMAIL_ADDRESS");

                entity.Property(e => e.RequisitionerLoginId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REQUISITIONER_LOGIN_ID");

                entity.Property(e => e.RequisitionerName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REQUISITIONER_NAME");

                entity.Property(e => e.RequisitionerPhoneNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REQUISITIONER_PHONE_NUMBER");

                entity.Property(e => e.SecondaryDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SECONDARY_DESC");

                entity.Property(e => e.StaffingSpecialistName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STAFFING_SPECIALIST_NAME");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(10)
                    .HasColumnName("SUB_ISSUANCE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");

                entity.Property(e => e.UdfDate1)
                    .HasColumnType("DATE")
                    .HasColumnName("UDF_DATE1");

                entity.Property(e => e.UdfDate2)
                    .HasColumnType("DATE")
                    .HasColumnName("UDF_DATE2");

                entity.Property(e => e.UdfNumber1)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("UDF_NUMBER1");

                entity.Property(e => e.UdfNumber2)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("UDF_NUMBER2");

                entity.Property(e => e.UdfString1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING1");

                entity.Property(e => e.UdfString2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING2");
            });

            modelBuilder.Entity<Opn>(entity =>
            {
                entity.HasKey(e => e.BroadcastId);

                entity.ToTable("OPN");

                entity.HasIndex(e => new { e.BroadcastId, e.OpnType, e.OrderNumber, e.PositionNumber, e.CreatedDate }, "OPN_IDX_003")
                    .IsUnique();

                entity.HasIndex(e => e.OrderNumber, "OPN_ORDER_NUMBER_INDX");

                entity.Property(e => e.BroadcastId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("BROADCAST_ID");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.OpnNotes)
                    .HasColumnType("LONG")
                    .HasColumnName("OPN_NOTES");

                entity.Property(e => e.OpnType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("OPN_TYPE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.HasOne(d => d.OpnTypeNavigation)
                    .WithMany(p => p.Opns)
                    .HasForeignKey(d => d.OpnType)
                    .HasConstraintName("FK_OPN_REF_OPNTY_OPN_TYPE");
            });

            modelBuilder.Entity<OpnSupplier>(entity =>
            {
                entity.HasKey(e => new { e.BroadcastId, e.SupplierId });

                entity.ToTable("OPN_SUPPLIER");

                entity.HasIndex(e => new { e.PassFlag, e.BroadcastId, e.SupplierId }, "OPN_SUPPLIER_IDX_002");

                entity.HasIndex(e => e.SupplierId, "OPN_SUPPLIER_ID_INDX");

                entity.Property(e => e.BroadcastId)
                    .HasPrecision(10)
                    .HasColumnName("BROADCAST_ID");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.PassFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PASS_FLAG");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.OpnSuppliers)
                    .HasForeignKey(d => d.SupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OPN_SUPP_REF_OPNSU_SUPPLIER");
            });

            modelBuilder.Entity<OpnType>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("OPN_TYPE");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.HasKey(e => e.OrderNumber);

                entity.ToTable("ORDERS");

                entity.HasIndex(e => e.AccountManagerId, "ACCOUNT_MANAGER_ID_INDX");

                entity.HasIndex(e => e.GradeLevel, "GRADE_LEVEL_INDX");

                entity.HasIndex(e => e.Issuance, "ISSUANCE_INDX");

                entity.HasIndex(e => e.LastUpdatedBy, "LAST_UPDATED_BY_INDX");

                entity.HasIndex(e => e.LocationCode, "LOCATION_CODE_INDX");

                entity.HasIndex(e => e.OrderType, "ORDER_TYPE_INDX");

                entity.HasIndex(e => e.RequisitionerId, "REQUISITIONER_ID_INDX");

                entity.HasIndex(e => e.ReqDeveloperId, "REQ_DEVELOPER_ID_INDX");

                entity.HasIndex(e => e.StaffingSpecialistId, "STAFFING_SPECIALIST_ID_INDX");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.AccountManagerId)
                    .HasPrecision(10)
                    .HasColumnName("ACCOUNT_MANAGER_ID");

                entity.Property(e => e.AdditionalInfo)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONAL_INFO");

                entity.Property(e => e.AdditionalSafetyInfo)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONAL_SAFETY_INFO");

                entity.Property(e => e.BidLimit)
                    .HasPrecision(5)
                    .HasColumnName("BID_LIMIT");

                entity.Property(e => e.CitizenshipCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CITIZENSHIP_CODE");

                entity.Property(e => e.CompetencyCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("COMPETENCY_CODE");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.DefaultSubmitByDate)
                    .HasColumnType("DATE")
                    .HasColumnName("DEFAULT_SUBMIT_BY_DATE");

                entity.Property(e => e.Description)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_CODE");

                entity.Property(e => e.Duration)
                    .HasPrecision(4)
                    .HasColumnName("DURATION");

                entity.Property(e => e.DurationUnits)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DURATION_UNITS");

                entity.Property(e => e.EduPreferred)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EDU_PREFERRED");

                entity.Property(e => e.EduRequired)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EDU_REQUIRED");

                entity.Property(e => e.EducationCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EDUCATION_CODE");

                entity.Property(e => e.ExpPreferred)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("EXP_PREFERRED");

                entity.Property(e => e.ExpRequired)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("EXP_REQUIRED");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.GraspTrainingFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("GRASP_TRAINING_FLAG")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.HazcomTrainingFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAZCOM_TRAINING_FLAG")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.HoldCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("HOLD_CODE");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.LocationCode)
                    .HasPrecision(10)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.OrderStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_STATUS");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.OvertimePremiumFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("OVERTIME_PREMIUM_FLAG")
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.PartTime)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PART_TIME");

                entity.Property(e => e.PersonalQualities)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("PERSONAL_QUALITIES");

                entity.Property(e => e.PositionTitle)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_TITLE");

                entity.Property(e => e.PrescreenFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PRESCREEN_FLAG");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.PurchasedServiceToPo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PURCHASED_SERVICE_TO_PO");

                entity.Property(e => e.ReqDeveloperId)
                    .HasPrecision(10)
                    .HasColumnName("REQ_DEVELOPER_ID");

                entity.Property(e => e.RequestedStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("REQUESTED_START_DATE");

                entity.Property(e => e.RequisitionerId)
                    .HasPrecision(10)
                    .HasColumnName("REQUISITIONER_ID");

                entity.Property(e => e.SafetyMaterialReqFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SAFETY_MATERIAL_REQ_FLAG")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.SecurityCheckRequiredFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SECURITY_CHECK_REQUIRED_FLAG");

                entity.Property(e => e.SkillsPreferred)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SKILLS_PREFERRED");

                entity.Property(e => e.SkillsRequired)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SKILLS_REQUIRED");

                entity.Property(e => e.SpecifiedSupplier)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPECIFIED_SUPPLIER");

                entity.Property(e => e.StaffVacancyFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("STAFF_VACANCY_FLAG")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.StaffingSpecialistId)
                    .HasPrecision(10)
                    .HasColumnName("STAFFING_SPECIALIST_ID");

                entity.Property(e => e.TotalEccAmount)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("TOTAL_ECC_AMOUNT");

                entity.Property(e => e.TravelPercent)
                    .HasPrecision(7)
                    .HasColumnName("TRAVEL_PERCENT");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.WeeklyOtHours)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("WEEKLY_OT_HOURS");

                entity.Property(e => e.WeeklyStHours)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("WEEKLY_ST_HOURS");

                entity.Property(e => e.WorkBuilding)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WORK_BUILDING");

                entity.Property(e => e.WorkHours)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WORK_HOURS");

                entity.Property(e => e.WorkRoom)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("WORK_ROOM");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");

                entity.HasOne(d => d.ProductCodeNavigation)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.ProductCode)
                    .HasConstraintName("FK_ORDERS_PRODUCT_CODES");

                entity.HasOne(d => d.StaffingSpecialist)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.StaffingSpecialistId)
                    .HasConstraintName("FK_ORDERS_PEOPLE");
            });

            modelBuilder.Entity<OrderApprovalHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId);

                entity.ToTable("ORDER_APPROVAL_HISTORY");

                entity.HasIndex(e => e.ApprovalId, "IDX_ORD_APPR_HIST_REF_APPROVAL");

                entity.Property(e => e.HistoryId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("HISTORY_ID");

                entity.Property(e => e.ApprovalId)
                    .HasPrecision(10)
                    .HasColumnName("APPROVAL_ID");

                entity.Property(e => e.ApprovalStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("APPROVAL_STATUS");

                entity.Property(e => e.Comments)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.Notes)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.RequestorId)
                    .HasPrecision(10)
                    .HasColumnName("REQUESTOR_ID");

                entity.Property(e => e.Role)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ROLE");

                entity.Property(e => e.TargetApprover)
                    .HasPrecision(10)
                    .HasColumnName("TARGET_APPROVER");

                entity.HasOne(d => d.Approval)
                    .WithMany(p => p.OrderApprovalHistories)
                    .HasForeignKey(d => d.ApprovalId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ORDER_APPRO_APPROVALS");
            });

            modelBuilder.Entity<OrderHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId)
                    .HasName("PK1_ORDER_HISTORY");

                entity.ToTable("ORDER_HISTORY");

                entity.HasIndex(e => new { e.CreatedDate, e.OrderStatus }, "ORDER_HISTORY_INDX1");

                entity.HasIndex(e => new { e.OrderNumber, e.OrderStatus }, "ORDER_HISTORY_INDX2");

                entity.HasIndex(e => e.OrderNumber, "ORDER_HISTORY_INDX3");

                entity.HasIndex(e => e.Issuance, "ORDER_HISTORY_INDX4");

                entity.Property(e => e.HistoryId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("HISTORY_ID");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.DivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_CODE");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.HoldCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("HOLD_CODE");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_STATUS");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.OvertimePremiumFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("OVERTIME_PREMIUM_FLAG")
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RequisitionerId)
                    .HasPrecision(10)
                    .HasColumnName("REQUISITIONER_ID");

                entity.Property(e => e.StatusChangedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_CHANGED_FLAG")
                    .HasDefaultValueSql("'N'");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");
            });

            modelBuilder.Entity<OrderHistoryForddev>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ORDER_HISTORY_FORDDEV");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.DivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_CODE");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.HistoryId)
                    .HasPrecision(10)
                    .HasColumnName("HISTORY_ID");

                entity.Property(e => e.HoldCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("HOLD_CODE");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_STATUS");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.OvertimePremiumFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("OVERTIME_PREMIUM_FLAG");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RequisitionerId)
                    .HasPrecision(10)
                    .HasColumnName("REQUISITIONER_ID");

                entity.Property(e => e.StatusChangedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_CHANGED_FLAG");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");
            });

            modelBuilder.Entity<OrderLanguage>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ORDER_LANGUAGES");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LANGUAGE_CODE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");
            });

            modelBuilder.Entity<OrderMultiplier>(entity =>
            {
                entity.HasKey(e => new { e.OrderNumber, e.Multiplier });

                entity.ToTable("ORDER_MULTIPLIERS");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.Multiplier)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("MULTIPLIER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.HasOne(d => d.OrderNumberNavigation)
                    .WithMany(p => p.OrderMultipliers)
                    .HasForeignKey(d => d.OrderNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ORDERS");
            });

            modelBuilder.Entity<OrderNote>(entity =>
            {
                entity.HasKey(e => e.OrderNotesId);

                entity.ToTable("ORDER_NOTES");

                entity.HasIndex(e => e.OrderNumber, "ORDER_NOTES_IDX_001");

                entity.Property(e => e.OrderNotesId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("ORDER_NOTES_ID");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.Notes)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.ResponsibleId)
                    .HasPrecision(10)
                    .HasColumnName("RESPONSIBLE_ID");
            });

            modelBuilder.Entity<OrderNotesForddev>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ORDER_NOTES_FORDDEV");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.Notes)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.OrderNotesId)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NOTES_ID");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.ResponsibleId)
                    .HasPrecision(10)
                    .HasColumnName("RESPONSIBLE_ID");
            });

            modelBuilder.Entity<OrderResponsibilitiesForddev>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ORDER_RESPONSIBILITIES_FORDDEV");

                entity.Property(e => e.ApproverRole)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("APPROVER_ROLE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderResponsibilityId)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_RESPONSIBILITY_ID");

                entity.Property(e => e.UserId)
                    .HasPrecision(10)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<OrderResponsibility>(entity =>
            {
                entity.ToTable("ORDER_RESPONSIBILITIES");

                entity.HasIndex(e => new { e.ApproverRole, e.OrderNumber, e.UserId }, "ORDER_USER_ROLE_INDEX");

                entity.Property(e => e.OrderResponsibilityId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("ORDER_RESPONSIBILITY_ID");

                entity.Property(e => e.ApproverRole)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("APPROVER_ROLE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.UserId)
                    .HasPrecision(10)
                    .HasColumnName("USER_ID");

                entity.HasOne(d => d.ApproverRoleNavigation)
                    .WithMany(p => p.OrderResponsibilities)
                    .HasForeignKey(d => d.ApproverRole)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ORDER_RE_REFERENCE_APPROVER");
            });

            modelBuilder.Entity<OrderSpecification>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ORDER_SPECIFICATIONS");

                entity.Property(e => e.CandidateFirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_FIRST_NAME");

                entity.Property(e => e.CandidateLastName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_LAST_NAME");

                entity.Property(e => e.CandidateLoginId)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_LOGIN_ID");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_ID");
            });

            modelBuilder.Entity<OrderStatus>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("ORDER_STATUS");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<OrderTask>(entity =>
            {
                entity.ToTable("ORDER_TASKS");

                entity.HasIndex(e => e.OrderNumber, "IDX_ORDER_TASKS_REF_ORDERS");

                entity.HasIndex(e => e.TaskId, "IDX_ORDER_TASKS_REF_TASKS");

                entity.Property(e => e.OrderTaskId)
                    .HasColumnType("NUMBER(22)")
                    .HasColumnName("ORDER_TASK_ID");

                entity.Property(e => e.BidNumber)
                    .HasColumnType("NUMBER(22)")
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.CompletedBy)
                    .HasPrecision(10)
                    .HasColumnName("COMPLETED_BY");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("COMPLETED_DATE");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.Request)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("REQUEST");

                entity.Property(e => e.RespondDate)
                    .HasColumnType("DATE")
                    .HasColumnName("RESPOND_DATE");

                entity.Property(e => e.ResponsibleId)
                    .HasPrecision(10)
                    .HasColumnName("RESPONSIBLE_ID");

                entity.Property(e => e.TaskId)
                    .HasPrecision(10)
                    .HasColumnName("TASK_ID");

                entity.Property(e => e.TaskTypeId)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TASK_TYPE_ID");

                entity.HasOne(d => d.OrderNumberNavigation)
                    .WithMany(p => p.OrderTasks)
                    .HasForeignKey(d => d.OrderNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ORDER_NUMBER");

                entity.HasOne(d => d.Task)
                    .WithMany(p => p.OrderTasks)
                    .HasForeignKey(d => d.TaskId)
                    .HasConstraintName("FK_TASK_ID");

                entity.HasOne(d => d.TaskType)
                    .WithMany(p => p.OrderTasks)
                    .HasForeignKey(d => d.TaskTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TASK_TYPE_ID");
            });

            modelBuilder.Entity<OrderTasksForddev>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ORDER_TASKS_FORDDEV");

                entity.Property(e => e.BidNumber)
                    .HasColumnType("NUMBER(22)")
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.CompletedBy)
                    .HasPrecision(10)
                    .HasColumnName("COMPLETED_BY");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("COMPLETED_DATE");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderTaskId)
                    .HasColumnType("NUMBER(22)")
                    .HasColumnName("ORDER_TASK_ID");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.Request)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("REQUEST");

                entity.Property(e => e.RespondDate)
                    .HasColumnType("DATE")
                    .HasColumnName("RESPOND_DATE");

                entity.Property(e => e.ResponsibleId)
                    .HasPrecision(10)
                    .HasColumnName("RESPONSIBLE_ID");

                entity.Property(e => e.TaskId)
                    .HasPrecision(10)
                    .HasColumnName("TASK_ID");

                entity.Property(e => e.TaskTypeId)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TASK_TYPE_ID");
            });

            modelBuilder.Entity<OrderType>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("ORDER_TYPE");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<OrdersForddev>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ORDERS_FORDDEV");

                entity.Property(e => e.AccountManagerId)
                    .HasPrecision(10)
                    .HasColumnName("ACCOUNT_MANAGER_ID");

                entity.Property(e => e.AdditionalInfo)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONAL_INFO");

                entity.Property(e => e.AdditionalSafetyInfo)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONAL_SAFETY_INFO");

                entity.Property(e => e.BidLimit)
                    .HasPrecision(5)
                    .HasColumnName("BID_LIMIT");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.DefaultSubmitByDate)
                    .HasColumnType("DATE")
                    .HasColumnName("DEFAULT_SUBMIT_BY_DATE");

                entity.Property(e => e.Description)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_CODE");

                entity.Property(e => e.Duration)
                    .HasPrecision(4)
                    .HasColumnName("DURATION");

                entity.Property(e => e.DurationUnits)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DURATION_UNITS");

                entity.Property(e => e.EduPreferred)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EDU_PREFERRED");

                entity.Property(e => e.EduRequired)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EDU_REQUIRED");

                entity.Property(e => e.ExpPreferred)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("EXP_PREFERRED");

                entity.Property(e => e.ExpRequired)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("EXP_REQUIRED");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.GraspTrainingFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("GRASP_TRAINING_FLAG");

                entity.Property(e => e.HazcomTrainingFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HAZCOM_TRAINING_FLAG");

                entity.Property(e => e.HoldCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("HOLD_CODE");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.LocationCode)
                    .HasPrecision(10)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_STATUS");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.OvertimePremiumFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("OVERTIME_PREMIUM_FLAG");

                entity.Property(e => e.PersonalQualities)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("PERSONAL_QUALITIES");

                entity.Property(e => e.PositionTitle)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_TITLE");

                entity.Property(e => e.PrescreenFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PRESCREEN_FLAG");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.ReqDeveloperId)
                    .HasPrecision(10)
                    .HasColumnName("REQ_DEVELOPER_ID");

                entity.Property(e => e.RequestedStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("REQUESTED_START_DATE");

                entity.Property(e => e.RequisitionerId)
                    .HasPrecision(10)
                    .HasColumnName("REQUISITIONER_ID");

                entity.Property(e => e.SafetyMaterialReqFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SAFETY_MATERIAL_REQ_FLAG");

                entity.Property(e => e.SecurityCheckRequiredFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SECURITY_CHECK_REQUIRED_FLAG");

                entity.Property(e => e.SkillsPreferred)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SKILLS_PREFERRED");

                entity.Property(e => e.SkillsRequired)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SKILLS_REQUIRED");

                entity.Property(e => e.StaffVacancyFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("STAFF_VACANCY_FLAG");

                entity.Property(e => e.StaffingSpecialistId)
                    .HasPrecision(10)
                    .HasColumnName("STAFFING_SPECIALIST_ID");

                entity.Property(e => e.TotalEccAmount)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("TOTAL_ECC_AMOUNT");

                entity.Property(e => e.TravelPercent)
                    .HasPrecision(7)
                    .HasColumnName("TRAVEL_PERCENT");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.WeeklyOtHours)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("WEEKLY_OT_HOURS");

                entity.Property(e => e.WeeklyStHours)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("WEEKLY_ST_HOURS");

                entity.Property(e => e.WorkBuilding)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WORK_BUILDING");

                entity.Property(e => e.WorkHours)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WORK_HOURS");

                entity.Property(e => e.WorkRoom)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WORK_ROOM");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");
            });

            modelBuilder.Entity<OrdersTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ORDERS_TEMP");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");
            });

            modelBuilder.Entity<OrganizationType>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("ORGANIZATION_TYPE");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<OutgoingMail>(entity =>
            {
                entity.HasKey(e => e.MessageId);

                entity.ToTable("OUTGOING_MAIL");

                entity.Property(e => e.MessageId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("MESSAGE_ID");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.FromAddress)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FROM_ADDRESS");

                entity.Property(e => e.Message)
                    .IsRequired()
                    .HasColumnType("LONG")
                    .HasColumnName("MESSAGE");

                entity.Property(e => e.SendDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SEND_DATE");

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SUBJECT");

                entity.Property(e => e.ToAddress)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("TO_ADDRESS");

                entity.Property(e => e.ToName)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("TO_NAME");
            });

            modelBuilder.Entity<OutgoingMailHistory>(entity =>
            {
                entity.HasKey(e => e.MessageId)
                    .HasName("PK_OM_HIS");

                entity.ToTable("OUTGOING_MAIL_HISTORY");

                entity.Property(e => e.MessageId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("MESSAGE_ID");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.FromAddress)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("FROM_ADDRESS");

                entity.Property(e => e.Message)
                    .IsRequired()
                    .HasColumnType("LONG")
                    .HasColumnName("MESSAGE");

                entity.Property(e => e.SendDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SEND_DATE");

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SUBJECT");

                entity.Property(e => e.ToAddress)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("TO_ADDRESS");

                entity.Property(e => e.ToName)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("TO_NAME");
            });

            modelBuilder.Entity<Page>(entity =>
            {
                entity.HasKey(e => e.PagePath);

                entity.ToTable("PAGES");

                entity.Property(e => e.PagePath)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PAGE_PATH");
            });

            modelBuilder.Entity<PartialSafe>(entity =>
            {
                entity.HasKey(e => e.DataTemplateId);

                entity.ToTable("PARTIAL_SAVES");

                entity.Property(e => e.DataTemplateId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("DATA_TEMPLATE_ID");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.DataTemplatePath)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DATA_TEMPLATE_PATH");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastModifiedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_MODIFIED_BY");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_MODIFIED_DATE");

                entity.Property(e => e.ObjectType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OBJECT_TYPE");
            });

            modelBuilder.Entity<PendingCostCenter>(entity =>
            {
                entity.HasKey(e => e.CostCenter)
                    .HasName("SYS_C0011719");

                entity.ToTable("PENDING_COST_CENTERS");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");
            });

            modelBuilder.Entity<PendingWorkOrder>(entity =>
            {
                entity.HasKey(e => e.WorkOrderNumber)
                    .HasName("SYS_C0011720");

                entity.ToTable("PENDING_WORK_ORDERS");

                entity.Property(e => e.WorkOrderNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORK_ORDER_NUMBER");

                entity.Property(e => e.CostCenter)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");
            });

            modelBuilder.Entity<PerformanceReview>(entity =>
            {
                entity.HasKey(e => new { e.PoNumber, e.ContracteeId, e.CategoryCode, e.ExitCancelId });

                entity.ToTable("PERFORMANCE_REVIEWS");

                entity.HasIndex(e => e.ContracteeId, "IDX_PERF_REVIEWS_REF_CANDIDATE");

                entity.HasIndex(e => e.ExitCancelId, "IDX_PERF_REVIEWS_REF_EXIT_CANC");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CategoryCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CATEGORY_CODE");

                entity.Property(e => e.ExitCancelId)
                    .HasPrecision(10)
                    .HasColumnName("EXIT_CANCEL_ID");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.RatingCode)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("RATING_CODE");

                entity.Property(e => e.ReviewDate)
                    .HasColumnType("DATE")
                    .HasColumnName("REVIEW_DATE");

                entity.HasOne(d => d.CategoryCodeNavigation)
                    .WithMany(p => p.PerformanceReviews)
                    .HasForeignKey(d => d.CategoryCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PERFORMA_REF_2640_CATEGORY");

                entity.HasOne(d => d.Contractee)
                    .WithMany(p => p.PerformanceReviews)
                    .HasForeignKey(d => d.ContracteeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PERFORMA_REF_CANDI_CANDIDAT");

                entity.HasOne(d => d.ExitCancel)
                    .WithMany(p => p.PerformanceReviews)
                    .HasForeignKey(d => d.ExitCancelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PERFORMANCE_EXIT_CANCEL");

                entity.HasOne(d => d.RatingCodeNavigation)
                    .WithMany(p => p.PerformanceReviews)
                    .HasForeignKey(d => d.RatingCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PERFORMA_REF_2644_RATING_C");
            });

            modelBuilder.Entity<Person>(entity =>
            {
                entity.HasKey(e => e.UserId);

                entity.ToTable("PEOPLE");

                entity.HasIndex(e => e.LoginId, "IDX_LOGIN_ID")
                    .IsUnique();

                entity.Property(e => e.UserId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("USER_ID");

                entity.Property(e => e.ActiveFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_FLAG");

                entity.Property(e => e.AuthLevel)
                    .HasPrecision(15)
                    .HasColumnName("AUTH_LEVEL");

                entity.Property(e => e.Building)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BUILDING");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.DivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_CODE");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ADDRESS");

                entity.Property(e => e.EmailNotifyFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_NOTIFY_FLAG")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.FaxNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("FAX_NUMBER");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FIRST_NAME");

                entity.Property(e => e.LanguageId)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("LANGUAGE_ID");

                entity.Property(e => e.LastMessageReadDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_MESSAGE_READ_DATE");

                entity.Property(e => e.LastName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LAST_NAME");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.LocationCode)
                    .HasPrecision(10)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LoginId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LOGIN_ID");

                entity.Property(e => e.MiddleInitial)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MIDDLE_INITIAL");

                entity.Property(e => e.Password)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PASSWORD");

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PHONE_NUMBER");

                entity.Property(e => e.PwdFailedAttempts)
                    .HasPrecision(2)
                    .HasColumnName("PWD_FAILED_ATTEMPTS");

                entity.Property(e => e.PwdLastChangedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PWD_LAST_CHANGED_DATE");

                entity.Property(e => e.PwdLastSuccessLoginDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PWD_LAST_SUCCESS_LOGIN_DATE");

                entity.Property(e => e.PwdLockedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PWD_LOCKED_FLAG");

                entity.Property(e => e.PwdSystemAssignedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PWD_SYSTEM_ASSIGNED_DATE");

                entity.Property(e => e.PwdSystemAssignedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PWD_SYSTEM_ASSIGNED_FLAG");

                entity.Property(e => e.Room)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ROOM");

                entity.Property(e => e.UnclassifiedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("UNCLASSIFIED_FLAG");

                entity.Property(e => e.UserTypeCode)
                    .HasPrecision(10)
                    .HasColumnName("USER_TYPE_CODE");

                entity.HasOne(d => d.DivisionCodeNavigation)
                    .WithMany(p => p.People)
                    .HasForeignKey(d => d.DivisionCode)
                    .HasConstraintName("FK_PEOPLE_DIVISION1");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.People)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_LANGUAGE_ID");

                entity.HasOne(d => d.UserTypeCodeNavigation)
                    .WithMany(p => p.People)
                    .HasForeignKey(d => d.UserTypeCode)
                    .HasConstraintName("FK_USER_TYPE_PEOPLE");
            });

            modelBuilder.Entity<PlacementTimingBackfill>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PLACEMENT_TIMING_BACKFILL");

                entity.Property(e => e.AdditionalInfo)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONAL_INFO");

                entity.Property(e => e.BidDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BID_DATE");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.BidRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("BID_RATE");

                entity.Property(e => e.BillingGroupCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_GROUP_CODE");

                entity.Property(e => e.BroadcastDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BROADCAST_DATE");

                entity.Property(e => e.BroadcastType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BROADCAST_TYPE");

                entity.Property(e => e.CandFirstName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CAND_FIRST_NAME");

                entity.Property(e => e.CandLastName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CAND_LAST_NAME");

                entity.Property(e => e.CandidateId)
                    .HasPrecision(10)
                    .HasColumnName("CANDIDATE_ID");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CpDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CP_DATE");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.DivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_CODE");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.HoldDt)
                    .HasColumnType("DATE")
                    .HasColumnName("HOLD_DT");

                entity.Property(e => e.InterviewRequiredFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INTERVIEW_REQUIRED_FLAG");

                entity.Property(e => e.IvCustDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IV_CUST_DATE");

                entity.Property(e => e.IvDelphiDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IV_DELPHI_DATE");

                entity.Property(e => e.IvRebidDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IV_REBID_DATE");

                entity.Property(e => e.IvRequestedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IV_REQUESTED_DATE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.LoginId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LOGIN_ID");

                entity.Property(e => e.NoOfBids)
                    .HasPrecision(10)
                    .HasColumnName("NO_OF_BIDS");

                entity.Property(e => e.NoOfPositions)
                    .HasPrecision(10)
                    .HasColumnName("NO_OF_POSITIONS");

                entity.Property(e => e.OrderApprovedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ORDER_APPROVED_DATE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.PosHistoryCreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("POS_HISTORY_CREATED_DATE");

                entity.Property(e => e.PositionCreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("POSITION_CREATED_DATE");

                entity.Property(e => e.PositionIssuance)
                    .HasPrecision(4)
                    .HasColumnName("POSITION_ISSUANCE");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.PositionStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_STATUS");

                entity.Property(e => e.PositionSubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("POSITION_SUB_ISSUANCE");

                entity.Property(e => e.PreapprovedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PREAPPROVED_FLAG");

                entity.Property(e => e.PrescrDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PRESCR_DATE");

                entity.Property(e => e.PrimaryDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PRIMARY_DESC");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RateDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RATE_DEVIATIONS");

                entity.Property(e => e.RecdDt)
                    .HasColumnType("DATE")
                    .HasColumnName("RECD_DT");

                entity.Property(e => e.RegionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("REGION_CODE");

                entity.Property(e => e.RequestedStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("REQUESTED_START_DATE");

                entity.Property(e => e.RequestedSupplierContact)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("REQUESTED_SUPPLIER_CONTACT");

                entity.Property(e => e.RequisitionerFirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REQUISITIONER_FIRST_NAME");

                entity.Property(e => e.RequisitionerId)
                    .HasPrecision(10)
                    .HasColumnName("REQUISITIONER_ID");

                entity.Property(e => e.RequisitionerLastName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REQUISITIONER_LAST_NAME");

                entity.Property(e => e.RtcCount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RTC_COUNT");

                entity.Property(e => e.RtcDate)
                    .HasColumnType("DATE")
                    .HasColumnName("RTC_DATE");

                entity.Property(e => e.ScDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SC_DATE");

                entity.Property(e => e.SecondaryDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SECONDARY_DESC");

                entity.Property(e => e.SecurityCheckIniDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SECURITY_CHECK_INI_DATE");

                entity.Property(e => e.SecurityCheckRecdDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SECURITY_CHECK_RECD_DATE");

                entity.Property(e => e.SupervisorFirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_FIRST_NAME");

                entity.Property(e => e.SupervisorId)
                    .HasPrecision(10)
                    .HasColumnName("SUPERVISOR_ID");

                entity.Property(e => e.SupervisorLastName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_LAST_NAME");

                entity.Property(e => e.SupplierDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_DEVIATIONS");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");

                entity.Property(e => e.TargetRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TARGET_RATE");
            });

            modelBuilder.Entity<PlacementTimingBfOld>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PLACEMENT_TIMING_BF_OLD");

                entity.Property(e => e.AdditionalInfo)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONAL_INFO");

                entity.Property(e => e.BidDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BID_DATE");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.BidRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("BID_RATE");

                entity.Property(e => e.BillingGroupCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_GROUP_CODE");

                entity.Property(e => e.BroadcastDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BROADCAST_DATE");

                entity.Property(e => e.BroadcastType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BROADCAST_TYPE");

                entity.Property(e => e.CandFirstName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CAND_FIRST_NAME");

                entity.Property(e => e.CandLastName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CAND_LAST_NAME");

                entity.Property(e => e.CandidateId)
                    .HasPrecision(10)
                    .HasColumnName("CANDIDATE_ID");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CpDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CP_DATE");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.DivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_CODE");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.HoldDt)
                    .HasColumnType("DATE")
                    .HasColumnName("HOLD_DT");

                entity.Property(e => e.InterviewRequiredFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INTERVIEW_REQUIRED_FLAG");

                entity.Property(e => e.IvCustDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IV_CUST_DATE");

                entity.Property(e => e.IvDelphiDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IV_DELPHI_DATE");

                entity.Property(e => e.IvRebidDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IV_REBID_DATE");

                entity.Property(e => e.IvRequestedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IV_REQUESTED_DATE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.LoginId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LOGIN_ID");

                entity.Property(e => e.NoOfBids)
                    .HasPrecision(10)
                    .HasColumnName("NO_OF_BIDS");

                entity.Property(e => e.NoOfPositions)
                    .HasPrecision(10)
                    .HasColumnName("NO_OF_POSITIONS");

                entity.Property(e => e.OrderApprovedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ORDER_APPROVED_DATE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.PosHistoryCreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("POS_HISTORY_CREATED_DATE");

                entity.Property(e => e.PositionCreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("POSITION_CREATED_DATE");

                entity.Property(e => e.PositionIssuance)
                    .HasPrecision(4)
                    .HasColumnName("POSITION_ISSUANCE");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.PositionStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_STATUS");

                entity.Property(e => e.PositionSubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("POSITION_SUB_ISSUANCE");

                entity.Property(e => e.PreapprovedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PREAPPROVED_FLAG");

                entity.Property(e => e.PrescrDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PRESCR_DATE");

                entity.Property(e => e.PrimaryDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PRIMARY_DESC");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RateDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RATE_DEVIATIONS");

                entity.Property(e => e.RecdDt)
                    .HasColumnType("DATE")
                    .HasColumnName("RECD_DT");

                entity.Property(e => e.RegionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("REGION_CODE");

                entity.Property(e => e.RequestedStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("REQUESTED_START_DATE");

                entity.Property(e => e.RequestedSupplierContact)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("REQUESTED_SUPPLIER_CONTACT");

                entity.Property(e => e.RequisitionerFirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REQUISITIONER_FIRST_NAME");

                entity.Property(e => e.RequisitionerId)
                    .HasPrecision(10)
                    .HasColumnName("REQUISITIONER_ID");

                entity.Property(e => e.RequisitionerLastName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REQUISITIONER_LAST_NAME");

                entity.Property(e => e.RtcCount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RTC_COUNT");

                entity.Property(e => e.RtcDate)
                    .HasColumnType("DATE")
                    .HasColumnName("RTC_DATE");

                entity.Property(e => e.ScDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SC_DATE");

                entity.Property(e => e.SecondaryDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SECONDARY_DESC");

                entity.Property(e => e.SecurityCheckIniDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SECURITY_CHECK_INI_DATE");

                entity.Property(e => e.SecurityCheckRecdDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SECURITY_CHECK_RECD_DATE");

                entity.Property(e => e.SupervisorFirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_FIRST_NAME");

                entity.Property(e => e.SupervisorId)
                    .HasPrecision(10)
                    .HasColumnName("SUPERVISOR_ID");

                entity.Property(e => e.SupervisorLastName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_LAST_NAME");

                entity.Property(e => e.SupplierDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_DEVIATIONS");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");

                entity.Property(e => e.TargetRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TARGET_RATE");
            });

            modelBuilder.Entity<PlacementTimingNewposition>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PLACEMENT_TIMING_NEWPOSITION");

                entity.Property(e => e.AdditionalInfo)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONAL_INFO");

                entity.Property(e => e.BidDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BID_DATE");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.BidRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("BID_RATE");

                entity.Property(e => e.BillingGroupCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_GROUP_CODE");

                entity.Property(e => e.BroadcastDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BROADCAST_DATE");

                entity.Property(e => e.BroadcastType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BROADCAST_TYPE");

                entity.Property(e => e.CandFirstName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CAND_FIRST_NAME");

                entity.Property(e => e.CandLastName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CAND_LAST_NAME");

                entity.Property(e => e.CandidateId)
                    .HasPrecision(10)
                    .HasColumnName("CANDIDATE_ID");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CpDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CP_DATE");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.DivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_CODE");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.HoldDt)
                    .HasColumnType("DATE")
                    .HasColumnName("HOLD_DT");

                entity.Property(e => e.InterviewRequiredFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INTERVIEW_REQUIRED_FLAG");

                entity.Property(e => e.IvCustDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IV_CUST_DATE");

                entity.Property(e => e.IvDelphiDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IV_DELPHI_DATE");

                entity.Property(e => e.IvRebidDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IV_REBID_DATE");

                entity.Property(e => e.IvRequestedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IV_REQUESTED_DATE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.LoginId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LOGIN_ID");

                entity.Property(e => e.MinStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("MIN_START_DATE");

                entity.Property(e => e.NoOfBids)
                    .HasPrecision(10)
                    .HasColumnName("NO_OF_BIDS");

                entity.Property(e => e.NoOfPositions)
                    .HasPrecision(10)
                    .HasColumnName("NO_OF_POSITIONS");

                entity.Property(e => e.OrderApprovedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ORDER_APPROVED_DATE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.PoEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PO_END_DATE");

                entity.Property(e => e.PoStRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("PO_ST_RATE");

                entity.Property(e => e.PoStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PO_START_DATE");

                entity.Property(e => e.PosHistoryCreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("POS_HISTORY_CREATED_DATE");

                entity.Property(e => e.PositionCreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("POSITION_CREATED_DATE");

                entity.Property(e => e.PositionEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("POSITION_END_DATE");

                entity.Property(e => e.PositionIssuance)
                    .HasPrecision(4)
                    .HasColumnName("POSITION_ISSUANCE");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.PositionOpenedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("POSITION_OPENED_DATE");

                entity.Property(e => e.PositionStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("POSITION_START_DATE");

                entity.Property(e => e.PositionStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_STATUS");

                entity.Property(e => e.PositionSubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("POSITION_SUB_ISSUANCE");

                entity.Property(e => e.PreapprovedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PREAPPROVED_FLAG");

                entity.Property(e => e.PrescrDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PRESCR_DATE");

                entity.Property(e => e.PrimaryDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PRIMARY_DESC");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RateDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RATE_DEVIATIONS");

                entity.Property(e => e.RecdDt)
                    .HasColumnType("DATE")
                    .HasColumnName("RECD_DT");

                entity.Property(e => e.RegionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("REGION_CODE");

                entity.Property(e => e.RequestedStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("REQUESTED_START_DATE");

                entity.Property(e => e.RequestedSupplierContact)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("REQUESTED_SUPPLIER_CONTACT");

                entity.Property(e => e.RequisitionerFirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REQUISITIONER_FIRST_NAME");

                entity.Property(e => e.RequisitionerId)
                    .HasPrecision(10)
                    .HasColumnName("REQUISITIONER_ID");

                entity.Property(e => e.RequisitionerLastName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REQUISITIONER_LAST_NAME");

                entity.Property(e => e.RtbDt)
                    .HasColumnType("DATE")
                    .HasColumnName("RTB_DT");

                entity.Property(e => e.RtcCount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RTC_COUNT");

                entity.Property(e => e.RtcDate)
                    .HasColumnType("DATE")
                    .HasColumnName("RTC_DATE");

                entity.Property(e => e.ScDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SC_DATE");

                entity.Property(e => e.SecondaryDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SECONDARY_DESC");

                entity.Property(e => e.SecurityCheckIniDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SECURITY_CHECK_INI_DATE");

                entity.Property(e => e.SecurityCheckRecdDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SECURITY_CHECK_RECD_DATE");

                entity.Property(e => e.SupervisorId)
                    .HasPrecision(10)
                    .HasColumnName("SUPERVISOR_ID");

                entity.Property(e => e.SupplierDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_DEVIATIONS");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");

                entity.Property(e => e.TargetRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TARGET_RATE");
            });

            modelBuilder.Entity<PlacementTimingNpOld>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PLACEMENT_TIMING_NP_OLD");

                entity.Property(e => e.AdditionalInfo)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONAL_INFO");

                entity.Property(e => e.BidDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BID_DATE");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.BidRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("BID_RATE");

                entity.Property(e => e.BillingGroupCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_GROUP_CODE");

                entity.Property(e => e.BroadcastDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BROADCAST_DATE");

                entity.Property(e => e.BroadcastType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BROADCAST_TYPE");

                entity.Property(e => e.CandFirstName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CAND_FIRST_NAME");

                entity.Property(e => e.CandLastName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CAND_LAST_NAME");

                entity.Property(e => e.CandidateId)
                    .HasPrecision(10)
                    .HasColumnName("CANDIDATE_ID");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CpDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CP_DATE");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.DivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_CODE");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.HoldDt)
                    .HasColumnType("DATE")
                    .HasColumnName("HOLD_DT");

                entity.Property(e => e.InterviewRequiredFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INTERVIEW_REQUIRED_FLAG");

                entity.Property(e => e.IvCustDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IV_CUST_DATE");

                entity.Property(e => e.IvDelphiDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IV_DELPHI_DATE");

                entity.Property(e => e.IvRebidDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IV_REBID_DATE");

                entity.Property(e => e.IvRequestedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IV_REQUESTED_DATE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.LoginId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LOGIN_ID");

                entity.Property(e => e.MinStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("MIN_START_DATE");

                entity.Property(e => e.NoOfBids)
                    .HasPrecision(10)
                    .HasColumnName("NO_OF_BIDS");

                entity.Property(e => e.NoOfPositions)
                    .HasPrecision(10)
                    .HasColumnName("NO_OF_POSITIONS");

                entity.Property(e => e.OrderApprovedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ORDER_APPROVED_DATE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.PoEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PO_END_DATE");

                entity.Property(e => e.PoStRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("PO_ST_RATE");

                entity.Property(e => e.PoStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PO_START_DATE");

                entity.Property(e => e.PosHistoryCreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("POS_HISTORY_CREATED_DATE");

                entity.Property(e => e.PositionCreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("POSITION_CREATED_DATE");

                entity.Property(e => e.PositionEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("POSITION_END_DATE");

                entity.Property(e => e.PositionIssuance)
                    .HasPrecision(4)
                    .HasColumnName("POSITION_ISSUANCE");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.PositionOpenedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("POSITION_OPENED_DATE");

                entity.Property(e => e.PositionStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("POSITION_START_DATE");

                entity.Property(e => e.PositionStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_STATUS");

                entity.Property(e => e.PositionSubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("POSITION_SUB_ISSUANCE");

                entity.Property(e => e.PreapprovedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PREAPPROVED_FLAG");

                entity.Property(e => e.PrescrDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PRESCR_DATE");

                entity.Property(e => e.PrimaryDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PRIMARY_DESC");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RateDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RATE_DEVIATIONS");

                entity.Property(e => e.RecdDt)
                    .HasColumnType("DATE")
                    .HasColumnName("RECD_DT");

                entity.Property(e => e.RegionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("REGION_CODE");

                entity.Property(e => e.RequestedStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("REQUESTED_START_DATE");

                entity.Property(e => e.RequestedSupplierContact)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("REQUESTED_SUPPLIER_CONTACT");

                entity.Property(e => e.RequisitionerFirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REQUISITIONER_FIRST_NAME");

                entity.Property(e => e.RequisitionerId)
                    .HasPrecision(10)
                    .HasColumnName("REQUISITIONER_ID");

                entity.Property(e => e.RequisitionerLastName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REQUISITIONER_LAST_NAME");

                entity.Property(e => e.RtbDt)
                    .HasColumnType("DATE")
                    .HasColumnName("RTB_DT");

                entity.Property(e => e.RtcCount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RTC_COUNT");

                entity.Property(e => e.RtcDate)
                    .HasColumnType("DATE")
                    .HasColumnName("RTC_DATE");

                entity.Property(e => e.ScDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SC_DATE");

                entity.Property(e => e.SecondaryDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SECONDARY_DESC");

                entity.Property(e => e.SecurityCheckIniDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SECURITY_CHECK_INI_DATE");

                entity.Property(e => e.SecurityCheckRecdDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SECURITY_CHECK_RECD_DATE");

                entity.Property(e => e.SupervisorId)
                    .HasPrecision(10)
                    .HasColumnName("SUPERVISOR_ID");

                entity.Property(e => e.SupplierDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_DEVIATIONS");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");

                entity.Property(e => e.TargetRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TARGET_RATE");
            });

            modelBuilder.Entity<PlacementTimingNpTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PLACEMENT_TIMING_NP_TEMP");

                entity.HasIndex(e => e.OrderNumber, "PNP_ORDER_NUMBER_INDX");

                entity.Property(e => e.AdditionalInfo)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONAL_INFO");

                entity.Property(e => e.BidCount)
                    .HasPrecision(10)
                    .HasColumnName("BID_COUNT");

                entity.Property(e => e.BidDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BID_DATE");

                entity.Property(e => e.BidRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("BID_RATE");

                entity.Property(e => e.BillingGroupCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_GROUP_CODE");

                entity.Property(e => e.CandFirstName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CAND_FIRST_NAME");

                entity.Property(e => e.CandLastName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CAND_LAST_NAME");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CpDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CP_DATE");

                entity.Property(e => e.CustomerSupplierContactFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_SUPPLIER_CONTACT_FLAG");

                entity.Property(e => e.DivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_CODE");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.InterviewRequiredFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INTERVIEW_REQUIRED_FLAG");

                entity.Property(e => e.IvCustDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IV_CUST_DATE");

                entity.Property(e => e.IvRebidDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IV_REBID_DATE");

                entity.Property(e => e.IvRequestedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IV_REQUESTED_DATE");

                entity.Property(e => e.Location)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION");

                entity.Property(e => e.LoginId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LOGIN_ID");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.PoEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PO_END_DATE");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.PoStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PO_START_DATE");

                entity.Property(e => e.PosCount)
                    .HasPrecision(10)
                    .HasColumnName("POS_COUNT");

                entity.Property(e => e.PoshCreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("POSH_CREATED_DATE");

                entity.Property(e => e.PositionCreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("POSITION_CREATED_DATE");

                entity.Property(e => e.PositionEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("POSITION_END_DATE");

                entity.Property(e => e.PositionIssuance)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_ISSUANCE");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.PositionOpenedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("POSITION_OPENED_DATE");

                entity.Property(e => e.PositionStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("POSITION_START_DATE");

                entity.Property(e => e.PositionStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_STATUS");

                entity.Property(e => e.PreapprovedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PREAPPROVED_FLAG");

                entity.Property(e => e.PrescrDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PRESCR_DATE");

                entity.Property(e => e.PrimaryDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PRIMARY_DESC");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RateDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RATE_DEVIATIONS");

                entity.Property(e => e.Region)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("REGION");

                entity.Property(e => e.RequestedStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("REQUESTED_START_DATE");

                entity.Property(e => e.RequisitionerFirstName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REQUISITIONER_FIRST_NAME");

                entity.Property(e => e.RequisitionerId)
                    .HasPrecision(10)
                    .HasColumnName("REQUISITIONER_ID");

                entity.Property(e => e.RequisitionerLastName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REQUISITIONER_LAST_NAME");

                entity.Property(e => e.RtcCount)
                    .HasPrecision(10)
                    .HasColumnName("RTC_COUNT");

                entity.Property(e => e.RtcDate)
                    .HasColumnType("DATE")
                    .HasColumnName("RTC_DATE");

                entity.Property(e => e.ScDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SC_DATE");

                entity.Property(e => e.SecondaryDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SECONDARY_DESC");

                entity.Property(e => e.SecurityCheckIniDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SECURITY_CHECK_INI_DATE");

                entity.Property(e => e.SecurityCheckRecdDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SECURITY_CHECK_RECD_DATE");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.SupervisorId)
                    .HasPrecision(10)
                    .HasColumnName("SUPERVISOR_ID");

                entity.Property(e => e.SupplierDeviation)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_DEVIATION");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");

                entity.Property(e => e.TargetRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TARGET_RATE");
            });

            modelBuilder.Entity<PlacementTimingReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PLACEMENT_TIMING_REPORT");

                entity.Property(e => e.AboveTarget)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ABOVE_TARGET");

                entity.Property(e => e.AdditionalInfo)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONAL_INFO");

                entity.Property(e => e.ApprovalTiming)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("APPROVAL_TIMING");

                entity.Property(e => e.ApprovedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("APPROVED_DATE");

                entity.Property(e => e.BidCirDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BID_CIR_DATE");

                entity.Property(e => e.BidCpDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BID_CP_DATE");

                entity.Property(e => e.BidIvcustDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BID_IVCUST_DATE");

                entity.Property(e => e.BidIvpnetDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BID_IVPNET_DATE");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.BidOriginalRate)
                    .HasColumnType("NUMBER(6,2)")
                    .HasColumnName("BID_ORIGINAL_RATE");

                entity.Property(e => e.BidPlacedTiming)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("BID_PLACED_TIMING");

                entity.Property(e => e.BidPrescrnDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BID_PRESCRN_DATE");

                entity.Property(e => e.BidRate)
                    .HasColumnType("NUMBER(6,2)")
                    .HasColumnName("BID_RATE");

                entity.Property(e => e.BidRebidDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BID_REBID_DATE");

                entity.Property(e => e.BidRecdDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BID_RECD_DATE");

                entity.Property(e => e.BidRecdTiming)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("BID_RECD_TIMING");

                entity.Property(e => e.BidRtcCount)
                    .HasPrecision(10)
                    .HasColumnName("BID_RTC_COUNT");

                entity.Property(e => e.BidRtcDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BID_RTC_DATE");

                entity.Property(e => e.BidScDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BID_SC_DATE");

                entity.Property(e => e.BidTotalCount)
                    .HasPrecision(10)
                    .HasColumnName("BID_TOTAL_COUNT");

                entity.Property(e => e.BillingGroupCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_GROUP_CODE");

                entity.Property(e => e.BrdcastTiming)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("BRDCAST_TIMING");

                entity.Property(e => e.BroadcastDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BROADCAST_DATE");

                entity.Property(e => e.BroadcastType)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("BROADCAST_TYPE");

                entity.Property(e => e.CandName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CAND_NAME");

                entity.Property(e => e.CandidateId)
                    .HasPrecision(10)
                    .HasColumnName("CANDIDATE_ID");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CustReviewTiming)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("CUST_REVIEW_TIMING");

                entity.Property(e => e.CustStandardTiming)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("CUST_STANDARD_TIMING");

                entity.Property(e => e.CustSuppContact)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CUST_SUPP_CONTACT");

                entity.Property(e => e.ExcessCustTiming)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("EXCESS_CUST_TIMING");

                entity.Property(e => e.ExcludeFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("EXCLUDE_FLAG");

                entity.Property(e => e.FirstBrdcastTiming)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("FIRST_BRDCAST_TIMING");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.HoldDate)
                    .HasColumnType("DATE")
                    .HasColumnName("HOLD_DATE");

                entity.Property(e => e.InterviewTiming)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("INTERVIEW_TIMING");

                entity.Property(e => e.Issuance)
                    .HasPrecision(10)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.ObDate)
                    .HasColumnType("DATE")
                    .HasColumnName("OB_DATE");

                entity.Property(e => e.OpenDate)
                    .HasColumnType("DATE")
                    .HasColumnName("OPEN_DATE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.OverallTiming)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("OVERALL_TIMING");

                entity.Property(e => e.PlacementType)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PLACEMENT_TYPE");

                entity.Property(e => e.PnetReviewTiming)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("PNET_REVIEW_TIMING");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PosEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("POS_END_DATE");

                entity.Property(e => e.PosStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("POS_START_DATE");

                entity.Property(e => e.PositionAdded)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_ADDED");

                entity.Property(e => e.PositionCount)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_COUNT");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.PositionStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_STATUS");

                entity.Property(e => e.PreApproved)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PRE_APPROVED");

                entity.Property(e => e.PrimaryDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PRIMARY_DESC");

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RateDeviation)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RATE_DEVIATION");

                entity.Property(e => e.RateDiff)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("RATE_DIFF");

                entity.Property(e => e.RateDiffPercent)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("RATE_DIFF_PERCENT");

                entity.Property(e => e.RateRange)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("RATE_RANGE");

                entity.Property(e => e.RecdDate)
                    .HasColumnType("DATE")
                    .HasColumnName("RECD_DATE");

                entity.Property(e => e.RegionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("REGION_CODE");

                entity.Property(e => e.ReqStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("REQ_START_DATE");

                entity.Property(e => e.RequisitionerId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REQUISITIONER_ID");

                entity.Property(e => e.RequisitionerName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REQUISITIONER_NAME");

                entity.Property(e => e.RtbDate)
                    .HasColumnType("DATE")
                    .HasColumnName("RTB_DATE");

                entity.Property(e => e.SecCheckIniDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SEC_CHECK_INI_DATE");

                entity.Property(e => e.SecCheckRecdDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SEC_CHECK_RECD_DATE");

                entity.Property(e => e.SecondaryDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SECONDARY_DESC");

                entity.Property(e => e.StaffSpecId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STAFF_SPEC_ID");

                entity.Property(e => e.StaffSpecName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STAFF_SPEC_NAME");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(10)
                    .HasColumnName("SUB_ISSUANCE");

                entity.Property(e => e.SupervisorId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_ID");

                entity.Property(e => e.SupervisorName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_NAME");

                entity.Property(e => e.SupplierDeviation)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_DEVIATION");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");

                entity.Property(e => e.TargetRate)
                    .HasColumnType("NUMBER(6,2)")
                    .HasColumnName("TARGET_RATE");

                entity.Property(e => e.TimingDiff)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("TIMING_DIFF");

                entity.Property(e => e.TimingDiffPercent)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("TIMING_DIFF_PERCENT");

                entity.Property(e => e.YearMonth)
                    .HasPrecision(6)
                    .HasColumnName("YEAR_MONTH");
            });

            modelBuilder.Entity<PlanTable>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PLAN_TABLE");

                entity.Property(e => e.Bytes)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BYTES");

                entity.Property(e => e.Cardinality)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CARDINALITY");

                entity.Property(e => e.Cost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COST");

                entity.Property(e => e.Distribution)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("DISTRIBUTION");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.ObjectInstance)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OBJECT_INSTANCE");

                entity.Property(e => e.ObjectName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("OBJECT_NAME");

                entity.Property(e => e.ObjectNode)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("OBJECT_NODE");

                entity.Property(e => e.ObjectOwner)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("OBJECT_OWNER");

                entity.Property(e => e.ObjectType)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("OBJECT_TYPE");

                entity.Property(e => e.Operation)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("OPERATION");

                entity.Property(e => e.Optimizer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OPTIMIZER");

                entity.Property(e => e.Options)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("OPTIONS");

                entity.Property(e => e.Other)
                    .HasColumnType("LONG")
                    .HasColumnName("OTHER");

                entity.Property(e => e.OtherTag)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OTHER_TAG");

                entity.Property(e => e.ParentId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PARENT_ID");

                entity.Property(e => e.PartitionId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PARTITION_ID");

                entity.Property(e => e.PartitionStart)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PARTITION_START");

                entity.Property(e => e.PartitionStop)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PARTITION_STOP");

                entity.Property(e => e.Position)
                    .HasColumnType("NUMBER")
                    .HasColumnName("POSITION");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.SearchColumns)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SEARCH_COLUMNS");

                entity.Property(e => e.StatementId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("STATEMENT_ID");

                entity.Property(e => e.Timestamp)
                    .HasColumnType("DATE")
                    .HasColumnName("TIMESTAMP");
            });

            modelBuilder.Entity<Po10Feb2021>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PO_10_FEB_2021");

                entity.Property(e => e.ApprovalStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("APPROVAL_STATUS");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CustomerFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("CUSTOMER_FEE");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.LocationCode)
                    .HasPrecision(10)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNte)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("PO_NTE");

                entity.Property(e => e.PoNumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.PoStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PO_STATUS");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RequisitionerId)
                    .HasPrecision(10)
                    .HasColumnName("REQUISITIONER_ID");

                entity.Property(e => e.RrFactor)
                    .HasColumnType("NUMBER(6,2)")
                    .HasColumnName("RR_FACTOR");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("SUB_ISSUANCE");

                entity.Property(e => e.SupplierFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_FEE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.TerminationReasonCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TERMINATION_REASON_CODE");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.Udf5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF5");

                entity.Property(e => e.Udf6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF6");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");
            });

            modelBuilder.Entity<Po10jun2021>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PO_10JUN2021");

                entity.Property(e => e.ApprovalStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("APPROVAL_STATUS");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CustomerFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("CUSTOMER_FEE");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.LocationCode)
                    .HasPrecision(10)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNte)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("PO_NTE");

                entity.Property(e => e.PoNumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.PoStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PO_STATUS");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RequisitionerId)
                    .HasPrecision(10)
                    .HasColumnName("REQUISITIONER_ID");

                entity.Property(e => e.RrFactor)
                    .HasColumnType("NUMBER(6,2)")
                    .HasColumnName("RR_FACTOR");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("SUB_ISSUANCE");

                entity.Property(e => e.SupplierFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_FEE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.TerminationReasonCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TERMINATION_REASON_CODE");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.Udf5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF5");

                entity.Property(e => e.Udf6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF6");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");
            });

            modelBuilder.Entity<PoBackup10jun2021>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PO_BACKUP10JUN2021");

                entity.Property(e => e.ApprovalStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("APPROVAL_STATUS");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CustomerFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("CUSTOMER_FEE");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.LocationCode)
                    .HasPrecision(10)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNte)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("PO_NTE");

                entity.Property(e => e.PoNumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.PoStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PO_STATUS");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RequisitionerId)
                    .HasPrecision(10)
                    .HasColumnName("REQUISITIONER_ID");

                entity.Property(e => e.RrFactor)
                    .HasColumnType("NUMBER(6,2)")
                    .HasColumnName("RR_FACTOR");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("SUB_ISSUANCE");

                entity.Property(e => e.SupplierFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_FEE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.TerminationReasonCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TERMINATION_REASON_CODE");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.Udf5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF5");

                entity.Property(e => e.Udf6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF6");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");
            });

            modelBuilder.Entity<PoHist10Feb2021>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PO_HIST_10_FEB_2021");

                entity.Property(e => e.ApprovalStatus)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("APPROVAL_STATUS");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CostCenter)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CustomerFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("CUSTOMER_FEE");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.HistoryId)
                    .HasPrecision(10)
                    .HasColumnName("HISTORY_ID");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.LocationCode)
                    .HasPrecision(10)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNte)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("PO_NTE");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.PoStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PO_STATUS");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RequisitionerId)
                    .HasPrecision(10)
                    .HasColumnName("REQUISITIONER_ID");

                entity.Property(e => e.RrFactor)
                    .HasColumnType("NUMBER(6,2)")
                    .HasColumnName("RR_FACTOR");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("SUB_ISSUANCE");

                entity.Property(e => e.SupplierFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_FEE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.TerminationReasonCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TERMINATION_REASON_CODE");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.Udf5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF5");

                entity.Property(e => e.Udf6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF6");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");
            });

            modelBuilder.Entity<PoQuarterTable>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PO_QUARTER_TABLE");

                entity.Property(e => e.QtrEnd)
                    .HasColumnType("DATE")
                    .HasColumnName("QTR_END");

                entity.Property(e => e.QtrStart)
                    .HasColumnType("DATE")
                    .HasColumnName("QTR_START");

                entity.Property(e => e.Quarter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("QUARTER");
            });

            modelBuilder.Entity<PoStatus>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("PO_STATUS");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<PosMultOpt10Feb2021>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("POS_MULT_OPT_10_FEB_2021");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.MultiplierAllowedFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MULTIPLIER_ALLOWED_FLAG");

                entity.Property(e => e.MultiplierId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MULTIPLIER_ID");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");
            });

            modelBuilder.Entity<PosMultOptHistory1jun2021>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("POS_MULT_OPT_HISTORY_1JUN2021");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.HistoryId)
                    .HasPrecision(10)
                    .HasColumnName("HISTORY_ID");

                entity.Property(e => e.MultiplierAllowedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MULTIPLIER_ALLOWED_FLAG");

                entity.Property(e => e.MultiplierId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MULTIPLIER_ID");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");
            });

            modelBuilder.Entity<PosMultiplierOptHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId)
                    .HasName("PK_POSITION_MULTIPLIER_OPTION2");

                entity.ToTable("POS_MULTIPLIER_OPT_HISTORY");

                entity.HasIndex(e => new { e.MultiplierId, e.PoLineNumber, e.PoNumber, e.PoRevision, e.PositionNumber }, "IDX_POS_MULT_OPT_HIST_REF_POS");

                entity.Property(e => e.HistoryId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("HISTORY_ID");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.MultiplierAllowed)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MULTIPLIER_ALLOWED");

                entity.Property(e => e.MultiplierId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MULTIPLIER_ID");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.HasOne(d => d.PositionMultiplierOption)
                    .WithMany(p => p.PosMultiplierOptHistories)
                    .HasForeignKey(d => new { d.PositionNumber, d.PoNumber, d.PoRevision, d.PoLineNumber, d.MultiplierId })
                    .HasConstraintName("FK_POS_MULT_REF_313_POSITION");
            });

            modelBuilder.Entity<PosMultiplierOptionsHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId)
                    .HasName("PK_POSITION_MULT_OPT_HIST");

                entity.ToTable("POS_MULTIPLIER_OPTIONS_HISTORY");

                entity.Property(e => e.HistoryId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("HISTORY_ID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.MultiplierAllowedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MULTIPLIER_ALLOWED_FLAG");

                entity.Property(e => e.MultiplierId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MULTIPLIER_ID");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");
            });

            modelBuilder.Entity<Position>(entity =>
            {
                entity.HasKey(e => e.PositionNumber);

                entity.ToTable("POSITIONS");

                entity.HasIndex(e => e.BidNumber, "BID_NUMBER_INDX");

                entity.HasIndex(e => e.CustomerContactId, "IDX_POSITION_REF_PEOPLE");

                entity.HasIndex(e => e.SupervisorId, "IDX_POSITION_REF_PEOPLE_2");

                entity.HasIndex(e => e.OrderNumber, "ORDER_NUMBER_INDX");

                entity.HasIndex(e => new { e.Issuance, e.SubIssuance }, "POSITION_ISSUANCE_INDX");

                entity.HasIndex(e => new { e.PositionStatus, e.OrderNumber, e.PositionNumber }, "POSITION_STATUS_IDX");

                entity.HasIndex(e => e.SupplierId, "SUPPLIER_ID_INDX");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.BackfillBidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BACKFILL_BID_NUMBER");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CustomerContactId)
                    .HasPrecision(10)
                    .HasColumnName("CUSTOMER_CONTACT_ID");

                entity.Property(e => e.CustomerSupplierContactFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_SUPPLIER_CONTACT_FLAG")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.EccAmount)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("ECC_AMOUNT");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.HiringManagerId)
                    .HasPrecision(10)
                    .HasColumnName("HIRING_MANAGER_ID");

                entity.Property(e => e.HoldCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("HOLD_CODE");

                entity.Property(e => e.InterviewRequiredFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INTERVIEW_REQUIRED_FLAG")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.LastDayWorked)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_DAY_WORKED");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.NegativeExitReasonFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NEGATIVE_EXIT_REASON_FLAG");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OriginalStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ORIGINAL_START_DATE");

                entity.Property(e => e.PositionStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_STATUS");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("SUB_ISSUANCE")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.SupervisorId)
                    .HasPrecision(10)
                    .HasColumnName("SUPERVISOR_ID");

                entity.Property(e => e.SupplierBuyoutFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_BUYOUT_FLAG")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierReplacedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_REPLACED_FLAG")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.SupplyBaseReductionFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLY_BASE_REDUCTION_FLAG")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.HasOne(d => d.CustomerContact)
                    .WithMany(p => p.PositionCustomerContacts)
                    .HasForeignKey(d => d.CustomerContactId)
                    .HasConstraintName("FK_POSITION_REF_PEOPL_PEOPLE2");

                entity.HasOne(d => d.GradeLevelNavigation)
                    .WithMany(p => p.Positions)
                    .HasForeignKey(d => d.GradeLevel)
                    .HasConstraintName("FK_POSITION_REF_GRADE_GRADE_LE");

                entity.HasOne(d => d.HoldCodeNavigation)
                    .WithMany(p => p.Positions)
                    .HasForeignKey(d => d.HoldCode)
                    .HasConstraintName("FK_POSITION_REF_HOLDC_HOLD_COD");

                entity.HasOne(d => d.PositionStatusNavigation)
                    .WithMany(p => p.Positions)
                    .HasForeignKey(d => d.PositionStatus)
                    .HasConstraintName("FK_POSITION_REF_POSIT_POSITION");

                entity.HasOne(d => d.Supervisor)
                    .WithMany(p => p.PositionSupervisors)
                    .HasForeignKey(d => d.SupervisorId)
                    .HasConstraintName("FK_POSITION_REF_PEOPL_PEOPLE");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.Positions)
                    .HasForeignKey(d => d.SupplierId)
                    .HasConstraintName("FK_POSITION_REF_SUPPL_SUPPLIER");
            });

            modelBuilder.Entity<PositionHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId)
                    .HasName("PK1_POSITION_HISTORY");

                entity.ToTable("POSITION_HISTORY");

                entity.HasIndex(e => new { e.PositionStatus, e.CreatedDate }, "POSITION_HISTORY_INDX1");

                entity.HasIndex(e => new { e.PositionNumber, e.PositionStatus }, "POSITION_HISTORY_INDX2");

                entity.HasIndex(e => e.BidNumber, "POSITION_HISTORY_INDX3");

                entity.HasIndex(e => new { e.Issuance, e.SubIssuance }, "POSITION_HISTORY_INDX4");

                entity.HasIndex(e => e.PositionNumber, "POSITION_HISTORY_INDX5");

                entity.Property(e => e.HistoryId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("HISTORY_ID");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.HoldCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("HOLD_CODE");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.PositionStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_STATUS");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.StatusChangedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_CHANGED_FLAG")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("SUB_ISSUANCE")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.SupervisorId)
                    .HasPrecision(10)
                    .HasColumnName("SUPERVISOR_ID");

                entity.Property(e => e.SupplierBuyoutFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_BUYOUT_FLAG")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierReplacedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_REPLACED_FLAG")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.SupplyBaseReductionFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLY_BASE_REDUCTION_FLAG")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.HasOne(d => d.PositionNumberNavigation)
                    .WithMany(p => p.PositionHistories)
                    .HasForeignKey(d => d.PositionNumber)
                    .HasConstraintName("FK_POSITION_NUMBER_POSITIONS");
            });

            modelBuilder.Entity<PositionHistoryFordedev>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("POSITION_HISTORY_FORDEDEV");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.HistoryId)
                    .HasPrecision(10)
                    .HasColumnName("HISTORY_ID");

                entity.Property(e => e.HoldCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("HOLD_CODE");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.PositionStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_STATUS");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.StatusChangedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_CHANGED_FLAG");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("SUB_ISSUANCE");

                entity.Property(e => e.SupervisorId)
                    .HasPrecision(10)
                    .HasColumnName("SUPERVISOR_ID");

                entity.Property(e => e.SupplierBuyoutFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_BUYOUT_FLAG");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierReplacedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_REPLACED_FLAG");

                entity.Property(e => e.SupplyBaseReductionFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLY_BASE_REDUCTION_FLAG");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");
            });

            modelBuilder.Entity<PositionMultOptions1jun2021>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("POSITION_MULT_OPTIONS_1JUN2021");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.MultiplierAllowedFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MULTIPLIER_ALLOWED_FLAG");

                entity.Property(e => e.MultiplierId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MULTIPLIER_ID");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");
            });

            modelBuilder.Entity<PositionMultiplierOption>(entity =>
            {
                entity.HasKey(e => new { e.PositionNumber, e.PoNumber, e.PoRevision, e.PoLineNumber, e.MultiplierId });

                entity.ToTable("POSITION_MULTIPLIER_OPTIONS");

                entity.HasIndex(e => e.MultiplierAllowedFlag, "IDX_MUL_FLG");

                entity.HasIndex(e => new { e.PoNumber, e.PoLineNumber, e.MultiplierId, e.MultiplierAllowedFlag }, "IDX_POS_MULT_OPT");

                entity.HasIndex(e => e.MultiplierId, "IDX_POS_MULT_OPT1");

                entity.HasIndex(e => new { e.PoLineNumber, e.PoNumber, e.PoRevision }, "IDX_POS_MULT_OPT_REF_PRCH_ORD");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.MultiplierId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MULTIPLIER_ID");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.MultiplierAllowedFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MULTIPLIER_ALLOWED_FLAG");

                entity.HasOne(d => d.PositionNumberNavigation)
                    .WithMany(p => p.PositionMultiplierOptions)
                    .HasForeignKey(d => d.PositionNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POSITION_REF_4173_POSITION");

                entity.HasOne(d => d.Po)
                    .WithMany(p => p.PositionMultiplierOptions)
                    .HasForeignKey(d => new { d.PoNumber, d.PoRevision, d.PoLineNumber })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POSITION_REF_PO");
            });

            modelBuilder.Entity<PositionSnapshotInfo>(entity =>
            {
                entity.HasKey(e => new { e.OrderNumber, e.PositionNumber, e.Issuance, e.SubIssuance })
                    .HasName("PK1_POSITION_SNAPSHOT_INFO");

                entity.ToTable("POSITION_SNAPSHOT_INFO");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("SUB_ISSUANCE");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CostCenter)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CustomerFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("CUSTOMER_FEE");

                entity.Property(e => e.CustomerId)
                    .HasPrecision(10)
                    .HasColumnName("CUSTOMER_ID");

                entity.Property(e => e.CustomerOtRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("CUSTOMER_OT_RATE");

                entity.Property(e => e.CustomerStRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("CUSTOMER_ST_RATE");

                entity.Property(e => e.EccAmount)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("ECC_AMOUNT");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.LocationCode)
                    .HasPrecision(10)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.OrderType)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RequisitionerId)
                    .HasPrecision(10)
                    .HasColumnName("REQUISITIONER_ID");

                entity.Property(e => e.StaffingSpecialistId)
                    .HasPrecision(10)
                    .HasColumnName("STAFFING_SPECIALIST_ID");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SupervisorId)
                    .HasPrecision(10)
                    .HasColumnName("SUPERVISOR_ID");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierOtRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_OT_RATE");

                entity.Property(e => e.SupplierStRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_ST_RATE");

                entity.Property(e => e.WorkBuilding)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WORK_BUILDING");

                entity.Property(e => e.WorkOrderNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WORK_ORDER_NUMBER");

                entity.Property(e => e.WorkRoom)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("WORK_ROOM");
            });

            modelBuilder.Entity<PositionStatus>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("POSITION_STATUS");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<Positions376807>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("POSITIONS_376807");

                entity.Property(e => e.BackfillBidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BACKFILL_BID_NUMBER");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CustomerContactId)
                    .HasPrecision(10)
                    .HasColumnName("CUSTOMER_CONTACT_ID");

                entity.Property(e => e.CustomerSupplierContactFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_SUPPLIER_CONTACT_FLAG");

                entity.Property(e => e.EccAmount)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("ECC_AMOUNT");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.HoldCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("HOLD_CODE");

                entity.Property(e => e.InterviewRequiredFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INTERVIEW_REQUIRED_FLAG");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.LastDayWorked)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_DAY_WORKED");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.NegativeExitReasonFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NEGATIVE_EXIT_REASON_FLAG");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OriginalStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ORIGINAL_START_DATE");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.PositionStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_STATUS");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("SUB_ISSUANCE");

                entity.Property(e => e.SupervisorId)
                    .HasPrecision(10)
                    .HasColumnName("SUPERVISOR_ID");

                entity.Property(e => e.SupplierBuyoutFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_BUYOUT_FLAG");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierReplacedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_REPLACED_FLAG");

                entity.Property(e => e.SupplyBaseReductionFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLY_BASE_REDUCTION_FLAG");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");
            });

            modelBuilder.Entity<PositionsForddev>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("POSITIONS_FORDDEV");

                entity.Property(e => e.BackfillBidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BACKFILL_BID_NUMBER");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CustomerContactId)
                    .HasPrecision(10)
                    .HasColumnName("CUSTOMER_CONTACT_ID");

                entity.Property(e => e.CustomerSupplierContactFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_SUPPLIER_CONTACT_FLAG");

                entity.Property(e => e.EccAmount)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("ECC_AMOUNT");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.HoldCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("HOLD_CODE");

                entity.Property(e => e.InterviewRequiredFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INTERVIEW_REQUIRED_FLAG");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.LastDayWorked)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_DAY_WORKED");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.NegativeExitReasonFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NEGATIVE_EXIT_REASON_FLAG");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OriginalStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ORIGINAL_START_DATE");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.PositionStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_STATUS");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("SUB_ISSUANCE");

                entity.Property(e => e.SupervisorId)
                    .HasPrecision(10)
                    .HasColumnName("SUPERVISOR_ID");

                entity.Property(e => e.SupplierBuyoutFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_BUYOUT_FLAG");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierReplacedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_REPLACED_FLAG");

                entity.Property(e => e.SupplyBaseReductionFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLY_BASE_REDUCTION_FLAG");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");
            });

            modelBuilder.Entity<ProcessErrorLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PROCESS_ERROR_LOG");

                entity.Property(e => e.DateRaised)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE_RAISED");

                entity.Property(e => e.ErrorCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ERROR_CODE");

                entity.Property(e => e.ErrorComments)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ERROR_COMMENTS");

                entity.Property(e => e.ErrorDescription)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ERROR_DESCRIPTION");

                entity.Property(e => e.ErrorLogId)
                    .HasPrecision(10)
                    .HasColumnName("ERROR_LOG_ID");

                entity.Property(e => e.ProcedureName)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("PROCEDURE_NAME");
            });

            modelBuilder.Entity<ProcessLog>(entity =>
            {
                entity.HasKey(e => e.ProcessId);

                entity.ToTable("PROCESS_LOG");

                entity.HasIndex(e => new { e.ProcessType, e.ProcessName }, "IDX1_PROCESS_LOG");

                entity.HasIndex(e => e.ProcessStartDate, "IDX2_PROCESS_LOG");

                entity.Property(e => e.ProcessId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("PROCESS_ID");

                entity.Property(e => e.Comments)
                    .HasColumnType("LONG")
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.ProcessEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PROCESS_END_DATE");

                entity.Property(e => e.ProcessName)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("PROCESS_NAME");

                entity.Property(e => e.ProcessStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PROCESS_START_DATE");

                entity.Property(e => e.ProcessTime)
                    .HasColumnType("NUMBER(10,5)")
                    .HasColumnName("PROCESS_TIME");

                entity.Property(e => e.ProcessType)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PROCESS_TYPE");

                entity.Property(e => e.Status)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("STATUS");
            });

            modelBuilder.Entity<ProductCode>(entity =>
            {
                entity.HasKey(e => e.ProductCode1);

                entity.ToTable("PRODUCT_CODES");

                entity.HasIndex(e => e.ProductMainCode, "IDX_PRODUCT_REF_MAIN_CODE");

                entity.HasIndex(e => e.ProductSubCode, "IDX_PRODUCT_REF_SUB_CODE");

                entity.HasIndex(e => new { e.ProductCode1, e.BillingGroupCode }, "PRODUCT_CODES_IDX_004")
                    .IsUnique();

                entity.Property(e => e.ProductCode1)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.BackgroundVerificationFlag)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("BACKGROUND_VERIFICATION_FLAG");

                entity.Property(e => e.BillingGroupCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_GROUP_CODE");

                entity.Property(e => e.EduPreferred)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EDU_PREFERRED");

                entity.Property(e => e.EduRequired)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EDU_REQUIRED");

                entity.Property(e => e.ExpPreferred)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EXP_PREFERRED");

                entity.Property(e => e.ExpRequired)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EXP_REQUIRED");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");

                entity.Property(e => e.PositionDescription)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_DESCRIPTION");

                entity.Property(e => e.ProductMainCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_MAIN_CODE");

                entity.Property(e => e.ProductSubCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_SUB_CODE");

                entity.Property(e => e.RateCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("RATE_CODE");

                entity.Property(e => e.RrFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RR_FLAG")
                    .HasDefaultValueSql("'N'");

                entity.Property(e => e.SkillsPreferred)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SKILLS_PREFERRED");

                entity.Property(e => e.SkillsRequired)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SKILLS_REQUIRED");

                entity.HasOne(d => d.BillingGroupCodeNavigation)
                    .WithMany(p => p.ProductCodes)
                    .HasForeignKey(d => d.BillingGroupCode)
                    .HasConstraintName("FK_PRODUCT__REF_BILLI_BILLING_");

                entity.HasOne(d => d.GradeLevelNavigation)
                    .WithMany(p => p.ProductCodes)
                    .HasForeignKey(d => d.GradeLevel)
                    .HasConstraintName("FK_PRODUCT__REF_GRADE_GRADE_LE");

                entity.HasOne(d => d.ProductMainCodeNavigation)
                    .WithMany(p => p.ProductCodes)
                    .HasForeignKey(d => d.ProductMainCode)
                    .HasConstraintName("FK_PRODUCT__REF_2893_PRODUCT_");

                entity.HasOne(d => d.ProductSubCodeNavigation)
                    .WithMany(p => p.ProductCodes)
                    .HasForeignKey(d => d.ProductSubCode)
                    .HasConstraintName("FK_PRODUCT__REF_2896_PRODUCT_");
            });

            modelBuilder.Entity<ProductCodeMap1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PRODUCT_CODE_MAP1");

                entity.Property(e => e.NewCode)
                    .HasPrecision(10)
                    .HasColumnName("NEW_CODE");

                entity.Property(e => e.NewGradeLevel)
                    .HasPrecision(10)
                    .HasColumnName("NEW_GRADE_LEVEL");

                entity.Property(e => e.NewRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("NEW_RATE");

                entity.Property(e => e.OldBilingClass)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("OLD_BILING_CLASS");

                entity.Property(e => e.OldBillingGroup)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("OLD_BILLING_GROUP");

                entity.Property(e => e.OldGrade)
                    .HasPrecision(10)
                    .HasColumnName("OLD_GRADE");

                entity.Property(e => e.OldProductCode)
                    .HasPrecision(10)
                    .HasColumnName("OLD_PRODUCT_CODE");

                entity.Property(e => e.OldRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("OLD_RATE");
            });

            modelBuilder.Entity<ProductCodesMap>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PRODUCT_CODES_MAP");

                entity.Property(e => e.NewCode)
                    .HasPrecision(10)
                    .HasColumnName("NEW_CODE");

                entity.Property(e => e.NewGradeLevel)
                    .HasPrecision(10)
                    .HasColumnName("NEW_GRADE_LEVEL");

                entity.Property(e => e.NewRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("NEW_RATE");

                entity.Property(e => e.OldBilingClass)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("OLD_BILING_CLASS");

                entity.Property(e => e.OldBillingGroup)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("OLD_BILLING_GROUP");

                entity.Property(e => e.OldGrade)
                    .HasPrecision(10)
                    .HasColumnName("OLD_GRADE");

                entity.Property(e => e.OldProductCode)
                    .HasPrecision(10)
                    .HasColumnName("OLD_PRODUCT_CODE");

                entity.Property(e => e.OldRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("OLD_RATE");
            });

            modelBuilder.Entity<ProductCodesMap2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PRODUCT_CODES_MAP2");

                entity.Property(e => e.Grade)
                    .HasPrecision(10)
                    .HasColumnName("GRADE");

                entity.Property(e => e.NewCode)
                    .HasPrecision(10)
                    .HasColumnName("NEW_CODE");

                entity.Property(e => e.OldBandingYN)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("OLD_BANDING_Y_N");

                entity.Property(e => e.OldBillingClass)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("OLD_BILLING_CLASS");

                entity.Property(e => e.OldBillingGroup)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("OLD_BILLING_GROUP");

                entity.Property(e => e.OldGrade)
                    .HasPrecision(10)
                    .HasColumnName("OLD_GRADE");

                entity.Property(e => e.OldJobCategory)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("OLD_JOB_CATEGORY");

                entity.Property(e => e.OldMaxRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("OLD_MAX_RATE");

                entity.Property(e => e.OldPrimarySec)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("OLD_PRIMARY_SEC");

                entity.Property(e => e.OldProductCode)
                    .HasPrecision(10)
                    .HasColumnName("OLD_PRODUCT_CODE");

                entity.Property(e => e.OldTitle)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OLD_TITLE");

                entity.Property(e => e.PrimaryDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRIMARY_DESC");

                entity.Property(e => e.Rate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("RATE");

                entity.Property(e => e.SecondaryDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SECONDARY_DESC");
            });

            modelBuilder.Entity<ProductCodesMapBand>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PRODUCT_CODES_MAP_BAND");

                entity.Property(e => e.Grade)
                    .HasPrecision(10)
                    .HasColumnName("GRADE");

                entity.Property(e => e.NewCode)
                    .HasPrecision(10)
                    .HasColumnName("NEW_CODE");

                entity.Property(e => e.OldBand)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("OLD_BAND");

                entity.Property(e => e.OldBandingYN)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("OLD_BANDING_Y_N");

                entity.Property(e => e.OldBillingGroup)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("OLD_BILLING_GROUP");

                entity.Property(e => e.OldGrade)
                    .HasPrecision(10)
                    .HasColumnName("OLD_GRADE");

                entity.Property(e => e.OldJobCategory)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("OLD_JOB_CATEGORY");

                entity.Property(e => e.OldMaxRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("OLD_MAX_RATE");

                entity.Property(e => e.OldPrimarySec)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("OLD_PRIMARY_SEC");

                entity.Property(e => e.OldProductCode)
                    .HasPrecision(10)
                    .HasColumnName("OLD_PRODUCT_CODE");

                entity.Property(e => e.OldTitle)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OLD_TITLE");

                entity.Property(e => e.PrimaryDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRIMARY_DESC");

                entity.Property(e => e.Rate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("RATE");

                entity.Property(e => e.SecondaryDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SECONDARY_DESC");
            });

            modelBuilder.Entity<ProductMain>(entity =>
            {
                entity.HasKey(e => e.ProductMainCode);

                entity.ToTable("PRODUCT_MAIN");

                entity.Property(e => e.ProductMainCode)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("PRODUCT_MAIN_CODE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<ProductRateCode>(entity =>
            {
                entity.HasKey(e => e.RateCode)
                    .HasName("PK_RATE_CODE");

                entity.ToTable("PRODUCT_RATE_CODE");

                entity.Property(e => e.RateCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("RATE_CODE");

                entity.Property(e => e.EduPreferred)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EDU_PREFERRED");

                entity.Property(e => e.EduRequired)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EDU_REQUIRED");

                entity.Property(e => e.ExpPreferred)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EXP_PREFERRED");

                entity.Property(e => e.ExpRequired)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EXP_REQUIRED");

                entity.Property(e => e.PositionDescription)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_DESCRIPTION");

                entity.Property(e => e.SkillsPreferred)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SKILLS_PREFERRED");

                entity.Property(e => e.SkillsRequired)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SKILLS_REQUIRED");
            });

            modelBuilder.Entity<ProductSub>(entity =>
            {
                entity.HasKey(e => e.ProductSubCode);

                entity.ToTable("PRODUCT_SUB");

                entity.Property(e => e.ProductSubCode)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("PRODUCT_SUB_CODE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<ProductcodesTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PRODUCTCODES_TEMP");

                entity.Property(e => e.BillingGroupCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_GROUP_CODE");

                entity.Property(e => e.EduPreferred)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EDU_PREFERRED");

                entity.Property(e => e.EduRequired)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EDU_REQUIRED");

                entity.Property(e => e.ExpPreferred)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EXP_PREFERRED");

                entity.Property(e => e.ExpRequired)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EXP_REQUIRED");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.PositionDescription)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_DESCRIPTION");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.ProductMainCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_MAIN_CODE");

                entity.Property(e => e.ProductSubCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_SUB_CODE");

                entity.Property(e => e.RateCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("RATE_CODE");

                entity.Property(e => e.SkillsPreferred)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SKILLS_PREFERRED");

                entity.Property(e => e.SkillsRequired)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SKILLS_REQUIRED");
            });

            modelBuilder.Entity<PsFeedDataArchieve>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PS_FEED_DATA_ARCHIEVE");

                entity.Property(e => e.B2bPositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("B2B_POSITION_NUMBER");

                entity.Property(e => e.CandidateFirstName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_FIRST_NAME");

                entity.Property(e => e.CandidateLastName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_LAST_NAME");

                entity.Property(e => e.ContracteeCdsid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONTRACTEE_CDSID");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CostCenter)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.DivisionCode)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_CODE");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.FeedComments)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FEED_COMMENTS");

                entity.Property(e => e.FeedId)
                    .HasPrecision(10)
                    .HasColumnName("FEED_ID");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.Id)
                    .HasPrecision(10)
                    .HasColumnName("ID");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.LocationCode)
                    .HasPrecision(10)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PositionTitle)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_TITLE");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.SendFlag)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SEND_FLAG");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SupervisorCdsid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_CDSID");

                entity.Property(e => e.SupervisorId)
                    .HasPrecision(10)
                    .HasColumnName("SUPERVISOR_ID");

                entity.Property(e => e.TerminationDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TERMINATION_DATE");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.Udf5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF5");
            });

            modelBuilder.Entity<PsFeedDataArchieveTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PS_FEED_DATA_ARCHIEVE_TEMP");

                entity.Property(e => e.B2bPositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("B2B_POSITION_NUMBER");

                entity.Property(e => e.CandidateFirstName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_FIRST_NAME");

                entity.Property(e => e.CandidateLastName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_LAST_NAME");

                entity.Property(e => e.ContracteeCdsid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONTRACTEE_CDSID");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CostCenter)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.DivisionCode)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_CODE");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.FeedComments)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FEED_COMMENTS");

                entity.Property(e => e.FeedId)
                    .HasPrecision(10)
                    .HasColumnName("FEED_ID");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.Id)
                    .HasPrecision(10)
                    .HasColumnName("ID");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.LocationCode)
                    .HasPrecision(10)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PositionTitle)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_TITLE");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.SendFlag)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SEND_FLAG");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SupervisorCdsid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_CDSID");

                entity.Property(e => e.SupervisorId)
                    .HasPrecision(10)
                    .HasColumnName("SUPERVISOR_ID");

                entity.Property(e => e.TerminationDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TERMINATION_DATE");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.Udf5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF5");
            });

            modelBuilder.Entity<PsFeedDataTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PS_FEED_DATA_TEMP");

                entity.Property(e => e.B2bPositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("B2B_POSITION_NUMBER");

                entity.Property(e => e.CandidateFirstName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_FIRST_NAME");

                entity.Property(e => e.CandidateLastName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_LAST_NAME");

                entity.Property(e => e.ContracteeCdsid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONTRACTEE_CDSID");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CostCenter)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.DivisionCode)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_CODE");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.FeedComments)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FEED_COMMENTS");

                entity.Property(e => e.FeedId)
                    .HasPrecision(10)
                    .HasColumnName("FEED_ID");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.Id)
                    .HasPrecision(10)
                    .HasColumnName("ID");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.LocationCode)
                    .HasPrecision(10)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PositionTitle)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_TITLE");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.SendFlag)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SEND_FLAG");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SupervisorCdsid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_CDSID");

                entity.Property(e => e.SupervisorId)
                    .HasPrecision(10)
                    .HasColumnName("SUPERVISOR_ID");

                entity.Property(e => e.TerminationDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TERMINATION_DATE");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.Udf5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF5");

                entity.HasOne(d => d.Feed)
                    .WithMany()
                    .HasForeignKey(d => d.FeedId)
                    .HasConstraintName("SYS_C0012253");
            });

            modelBuilder.Entity<PsFeedDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PS_FEED_DATA");

                entity.Property(e => e.B2bPositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("B2B_POSITION_NUMBER");

                entity.Property(e => e.CandidateFirstName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_FIRST_NAME");

                entity.Property(e => e.CandidateLastName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_LAST_NAME");

                entity.Property(e => e.ContracteeCdsid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONTRACTEE_CDSID");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CostCenter)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.DivisionCode)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_CODE");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.FeedComments)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FEED_COMMENTS");

                entity.Property(e => e.FeedId)
                    .HasPrecision(10)
                    .HasColumnName("FEED_ID");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.Id)
                    .HasPrecision(10)
                    .HasColumnName("ID");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.LocationCode)
                    .HasPrecision(10)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PositionTitle)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_TITLE");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.SendFlag)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SEND_FLAG");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SupervisorCdsid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_CDSID");

                entity.Property(e => e.SupervisorId)
                    .HasPrecision(10)
                    .HasColumnName("SUPERVISOR_ID");

                entity.Property(e => e.TerminationDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TERMINATION_DATE");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.Udf5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF5");

                entity.HasOne(d => d.Feed)
                    .WithMany()
                    .HasForeignKey(d => d.FeedId)
                    .HasConstraintName("SYS_C0012252");
            });

            modelBuilder.Entity<PsFeedMaster>(entity =>
            {
                entity.HasKey(e => e.FeedId)
                    .HasName("SYS_C0012009");

                entity.ToTable("PS_FEED_MASTER");

                entity.Property(e => e.FeedId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("FEED_ID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.FeedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("FEED_DATE");

                entity.Property(e => e.FeedName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FEED_NAME");

                entity.Property(e => e.FeedStatus)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FEED_STATUS");
            });

            modelBuilder.Entity<PsFeedMasterTemp>(entity =>
            {
                entity.HasKey(e => e.FeedId)
                    .HasName("SYS_C0012014");

                entity.ToTable("PS_FEED_MASTER_TEMP");

                entity.Property(e => e.FeedId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("FEED_ID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.FeedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("FEED_DATE");

                entity.Property(e => e.FeedName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FEED_NAME");

                entity.Property(e => e.FeedStatus)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FEED_STATUS");
            });

            modelBuilder.Entity<PsFeedRequest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PS_FEED_REQUEST");

                entity.Property(e => e.CandidateFirstName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_FIRST_NAME");

                entity.Property(e => e.CandidateLastName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_LAST_NAME");

                entity.Property(e => e.ContracteeCdsid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONTRACTEE_CDSID");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.FeedId)
                    .HasPrecision(10)
                    .HasColumnName("FEED_ID");

                entity.Property(e => e.Id)
                    .HasPrecision(10)
                    .HasColumnName("ID");

                entity.Property(e => e.InitiatedBy)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("INITIATED_BY");

                entity.Property(e => e.LocationCode)
                    .HasPrecision(10)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PsComment)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PS_COMMENT");

                entity.Property(e => e.PsRequestNumber)
                    .HasPrecision(10)
                    .HasColumnName("PS_REQUEST_NUMBER");

                entity.Property(e => e.RequestedBy)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REQUESTED_BY");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SupervisorCdsid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_CDSID");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");
            });

            modelBuilder.Entity<PsPositionDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PS_POSITION_DATA");

                entity.HasIndex(e => new { e.PositionNumber, e.Issuance, e.SubIssuance }, "SYS_C0011487")
                    .IsUnique();

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.PsoftPositionNumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PSOFT_POSITION_NUMBER");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("SUB_ISSUANCE");

                entity.Property(e => e.UdfDate1)
                    .HasColumnType("DATE")
                    .HasColumnName("UDF_DATE1");

                entity.Property(e => e.UdfDate2)
                    .HasColumnType("DATE")
                    .HasColumnName("UDF_DATE2");

                entity.Property(e => e.UdfDate3)
                    .HasColumnType("DATE")
                    .HasColumnName("UDF_DATE3");

                entity.Property(e => e.UdfNumber1)
                    .HasPrecision(10)
                    .HasColumnName("UDF_NUMBER1");

                entity.Property(e => e.UdfNumber2)
                    .HasPrecision(10)
                    .HasColumnName("UDF_NUMBER2");

                entity.Property(e => e.UdfNumber3)
                    .HasPrecision(10)
                    .HasColumnName("UDF_NUMBER3");

                entity.Property(e => e.UdfString1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING1");

                entity.Property(e => e.UdfString2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING2");

                entity.Property(e => e.UdfString3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING3");

                entity.HasOne(d => d.PositionNumberNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.PositionNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PS_POSITION_DATA_R01");
            });

            modelBuilder.Entity<PsPositionMapping>(entity =>
            {
                entity.ToTable("PS_POSITION_MAPPING");

                entity.Property(e => e.Id)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ActiveFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_FLAG");

                entity.Property(e => e.CandidateCdsid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_CDSID");

                entity.Property(e => e.CandidatePsPosNumber)
                    .HasPrecision(10)
                    .HasColumnName("CANDIDATE_PS_POS_NUMBER");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.FeedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("FEED_DATE");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.PsFeedSeq)
                    .HasPrecision(10)
                    .HasColumnName("PS_FEED_SEQ");

                entity.Property(e => e.PsLastFeedSeq)
                    .HasPrecision(10)
                    .HasColumnName("PS_LAST_FEED_SEQ");

                entity.Property(e => e.SupervisorCdsid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_CDSID");

                entity.Property(e => e.SupervisorPsPosNumber)
                    .HasPrecision(10)
                    .HasColumnName("SUPERVISOR_PS_POS_NUMBER");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.Udf5)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF5");
            });

            modelBuilder.Entity<PurchaseOrder>(entity =>
            {
                entity.HasKey(e => new { e.PoNumber, e.PoRevision, e.PoLineNumber });

                entity.ToTable("PURCHASE_ORDERS");

                entity.HasIndex(e => new { e.CostCenter, e.WorkTask }, "IDX_PO_CCTR_WTASK");

                entity.HasIndex(e => new { e.ContracteeId, e.PoNumber }, "IDX_PO_CONID_PONUM");

                entity.HasIndex(e => e.EndDate, "IDX_PO_EDATE");

                entity.HasIndex(e => e.LocationCode, "IDX_PO_LCODE");

                entity.HasIndex(e => e.OrderNumber, "IDX_PO_ORDNUM");

                entity.HasIndex(e => e.ProductCode, "IDX_PO_PCODE");

                entity.HasIndex(e => e.PositionNumber, "IDX_PO_POSNUM");

                entity.HasIndex(e => e.PoStatus, "IDX_PO_POSTATUS");

                entity.HasIndex(e => e.StartDate, "IDX_PO_STDATE");

                entity.HasIndex(e => e.SupplierId, "IDX_PO_SUPPID");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.ApprovalStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("APPROVAL_STATUS");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CustomerFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("CUSTOMER_FEE");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.LocationCode)
                    .HasPrecision(10)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.PoNte)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("PO_NTE");

                entity.Property(e => e.PoStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PO_STATUS");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RequisitionerId)
                    .HasPrecision(10)
                    .HasColumnName("REQUISITIONER_ID");

                entity.Property(e => e.RrFactor)
                    .HasColumnType("NUMBER(6,2)")
                    .HasColumnName("RR_FACTOR");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("SUB_ISSUANCE")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.SupplierFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_FEE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.TerminationReasonCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TERMINATION_REASON_CODE");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.Udf5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF5");

                entity.Property(e => e.Udf6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF6");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");

                entity.HasOne(d => d.ApprovalStatusNavigation)
                    .WithMany(p => p.PurchaseOrders)
                    .HasForeignKey(d => d.ApprovalStatus)
                    .HasConstraintName("FK_PURCHASE_REF_1245_APPROVAL");

                entity.HasOne(d => d.Contractee)
                    .WithMany(p => p.PurchaseOrders)
                    .HasForeignKey(d => d.ContracteeId)
                    .HasConstraintName("FK_PURCHASE_REF_16212_CANDIDAT");

                entity.HasOne(d => d.LocationCodeNavigation)
                    .WithMany(p => p.PurchaseOrders)
                    .HasForeignKey(d => d.LocationCode)
                    .HasConstraintName("FK_PURCHASE_REF_6823_LOCATION");

                entity.HasOne(d => d.OrderTypeNavigation)
                    .WithMany(p => p.PurchaseOrders)
                    .HasForeignKey(d => d.OrderType)
                    .HasConstraintName("FK_PURCHASE_REF_ORDER_ORDER_TY");

                entity.HasOne(d => d.PoStatusNavigation)
                    .WithMany(p => p.PurchaseOrders)
                    .HasForeignKey(d => d.PoStatus)
                    .HasConstraintName("FK_PURCHASE_REF_1242_PO_STATU");

                entity.HasOne(d => d.PositionNumberNavigation)
                    .WithMany(p => p.PurchaseOrders)
                    .HasForeignKey(d => d.PositionNumber)
                    .HasConstraintName("FK_PURCHASE_REF_6811_POSITION");

                entity.HasOne(d => d.ProductCodeNavigation)
                    .WithMany(p => p.PurchaseOrders)
                    .HasForeignKey(d => d.ProductCode)
                    .HasConstraintName("FK_PURCHASE_REF_6817_PRODUCT_");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.PurchaseOrders)
                    .HasForeignKey(d => d.SupplierId)
                    .HasConstraintName("FK_PURCHASE_REF_6795_SUPPLIER");

                entity.HasOne(d => d.TerminationReasonCodeNavigation)
                    .WithMany(p => p.PurchaseOrders)
                    .HasForeignKey(d => d.TerminationReasonCode)
                    .HasConstraintName("FK_PURCHASE_REF_1183_TERMINAT");
            });

            modelBuilder.Entity<PurchaseOrdersHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId);

                entity.ToTable("PURCHASE_ORDERS_HISTORY");

                entity.Property(e => e.HistoryId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("HISTORY_ID");

                entity.Property(e => e.ApprovalStatus)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("APPROVAL_STATUS");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CostCenter)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CustomerFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("CUSTOMER_FEE");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.LocationCode)
                    .HasPrecision(10)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNte)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("PO_NTE");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.PoStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PO_STATUS");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RequisitionerId)
                    .HasPrecision(10)
                    .HasColumnName("REQUISITIONER_ID");

                entity.Property(e => e.RrFactor)
                    .HasColumnType("NUMBER(6,2)")
                    .HasColumnName("RR_FACTOR");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("SUB_ISSUANCE")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.SupplierFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_FEE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.TerminationReasonCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TERMINATION_REASON_CODE");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.Udf5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF5");

                entity.Property(e => e.Udf6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF6");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");
            });

            modelBuilder.Entity<PurchaseOrdersTalenteibckyp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PURCHASE_ORDERS_TALENTEIBCKYP");

                entity.Property(e => e.ApprovalStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("APPROVAL_STATUS");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CustomerFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("CUSTOMER_FEE");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.LocationCode)
                    .HasPrecision(10)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNte)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("PO_NTE");

                entity.Property(e => e.PoNumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.PoStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PO_STATUS");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RequisitionerId)
                    .HasPrecision(10)
                    .HasColumnName("REQUISITIONER_ID");

                entity.Property(e => e.RrFactor)
                    .HasColumnType("NUMBER(6,2)")
                    .HasColumnName("RR_FACTOR");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("SUB_ISSUANCE");

                entity.Property(e => e.SupplierFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_FEE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.TerminationReasonCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TERMINATION_REASON_CODE");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.Udf5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF5");

                entity.Property(e => e.Udf6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF6");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");
            });

            modelBuilder.Entity<QaAccessType>(entity =>
            {
                entity.HasKey(e => e.AccessTypeCode);

                entity.ToTable("QA_ACCESS_TYPE");

                entity.Property(e => e.AccessTypeCode)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("ACCESS_TYPE_CODE");

                entity.Property(e => e.AccessTypeDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACCESS_TYPE_DESCRIPTION");
            });

            modelBuilder.Entity<QaMessage>(entity =>
            {
                entity.HasKey(e => e.MessageNumber);

                entity.ToTable("QA_MESSAGE");

                entity.Property(e => e.MessageNumber)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("MESSAGE_NUMBER");

                entity.Property(e => e.AuthorId)
                    .HasPrecision(10)
                    .HasColumnName("AUTHOR_ID");

                entity.Property(e => e.Expires)
                    .HasColumnType("DATE")
                    .HasColumnName("EXPIRES");

                entity.Property(e => e.MessageBody)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("MESSAGE_BODY");

                entity.Property(e => e.ModeratorId)
                    .HasPrecision(10)
                    .HasColumnName("MODERATOR_ID");

                entity.Property(e => e.Posted)
                    .HasColumnType("DATE")
                    .HasColumnName("POSTED");

                entity.Property(e => e.ReferenceNumber)
                    .HasPrecision(10)
                    .HasColumnName("REFERENCE_NUMBER");

                entity.Property(e => e.ReferenceType)
                    .HasPrecision(10)
                    .HasColumnName("REFERENCE_TYPE");

                entity.Property(e => e.RespondToAll)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RESPOND_TO_ALL");

                entity.Property(e => e.Response)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("RESPONSE");

                entity.Property(e => e.Validated)
                    .HasColumnType("DATE")
                    .HasColumnName("VALIDATED");

                entity.HasOne(d => d.ReferenceTypeNavigation)
                    .WithMany(p => p.QaMessages)
                    .HasForeignKey(d => d.ReferenceType)
                    .HasConstraintName("FK_MESSAGE_TYPE");
            });

            modelBuilder.Entity<QaMessageAccess>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.ReferenceTypeId });

                entity.ToTable("QA_MESSAGE_ACCESS");

                entity.Property(e => e.UserId)
                    .HasPrecision(10)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.ReferenceTypeId)
                    .HasPrecision(10)
                    .HasColumnName("REFERENCE_TYPE_ID");

                entity.Property(e => e.AccessTypeCode)
                    .HasPrecision(10)
                    .HasColumnName("ACCESS_TYPE_CODE");

                entity.HasOne(d => d.AccessTypeCodeNavigation)
                    .WithMany(p => p.QaMessageAccesses)
                    .HasForeignKey(d => d.AccessTypeCode)
                    .HasConstraintName("FK_ACCESS_TYPE");

                entity.HasOne(d => d.ReferenceType)
                    .WithMany(p => p.QaMessageAccesses)
                    .HasForeignKey(d => d.ReferenceTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_REFERENCE_TYPE_ID");
            });

            modelBuilder.Entity<QaReferenceType>(entity =>
            {
                entity.HasKey(e => e.ReferenceTypeId);

                entity.ToTable("QA_REFERENCE_TYPE");

                entity.Property(e => e.ReferenceTypeId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("REFERENCE_TYPE_ID");

                entity.Property(e => e.ReferenceTypeDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("REFERENCE_TYPE_DESCRIPTION");
            });

            modelBuilder.Entity<QualityCertificationType>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("QUALITY_CERTIFICATION_TYPE");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<QualityRating>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("QUALITY_RATING");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<RatecutChangePo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RATECUT_CHANGE_PO");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.ProcessedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PROCESSED_FLAG");

                entity.Property(e => e.Rate)
                    .HasColumnType("NUMBER(3,2)")
                    .HasColumnName("RATE");
            });

            modelBuilder.Entity<RatingCode>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("RATING_CODE");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<Rawpodatasupplierfee>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RAWPODATASUPPLIERFEE");

                entity.Property(e => e.B2bcontractorcdsid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("B2BCONTRACTORCDSID");

                entity.Property(e => e.Competency)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("COMPETENCY");

                entity.Property(e => e.Contractorid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CONTRACTORID");

                entity.Property(e => e.Contractorname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CONTRACTORNAME");

                entity.Property(e => e.Deptcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DEPTCODE");

                entity.Property(e => e.Enddate)
                    .HasColumnType("DATE")
                    .HasColumnName("ENDDATE");

                entity.Property(e => e.Location)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION");

                entity.Property(e => e.Ordernumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ORDERNUMBER");

                entity.Property(e => e.Otrate)
                    .HasColumnType("NUMBER(9,2)")
                    .HasColumnName("OTRATE");

                entity.Property(e => e.Ponumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PONUMBER");

                entity.Property(e => e.Postatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("POSTATUS");

                entity.Property(e => e.Primdesc)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("PRIMDESC");

                entity.Property(e => e.Productcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCTCODE")
                    .IsFixedLength(true);

                entity.Property(e => e.Prrate)
                    .HasColumnType("NUMBER(9,2)")
                    .HasColumnName("PRRATE");

                entity.Property(e => e.Reportsto)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REPORTSTO");

                entity.Property(e => e.Secdesc)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("SECDESC");

                entity.Property(e => e.Startdate)
                    .HasColumnType("DATE")
                    .HasColumnName("STARTDATE");

                entity.Property(e => e.Strate)
                    .HasColumnType("NUMBER(9,2)")
                    .HasColumnName("STRATE");

                entity.Property(e => e.Supplier)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER");
            });

            modelBuilder.Entity<RegionCode>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("REGION_CODE");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<Renewal>(entity =>
            {
                entity.ToTable("RENEWALS");

                entity.Property(e => e.RenewalId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("RENEWAL_ID");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.EmailNotifyDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EMAIL_NOTIFY_DATE");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.JobStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("JOB_STATUS");

                entity.Property(e => e.LastModifiedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_MODIFIED_BY");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_MODIFIED_DATE");

                entity.Property(e => e.NewEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("NEW_END_DATE");

                entity.Property(e => e.NewFunds)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("NEW_FUNDS");

                entity.Property(e => e.NteAmount)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("NTE_AMOUNT");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PoNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.RejectReason)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("REJECT_REASON");

                entity.Property(e => e.RenewalNotes)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("RENEWAL_NOTES");

                entity.Property(e => e.RenewalStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("RENEWAL_STATUS");

                entity.Property(e => e.RenewalType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("RENEWAL_TYPE");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SupervisorId)
                    .HasPrecision(10)
                    .HasColumnName("SUPERVISOR_ID");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.TsApprovedAmount)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("TS_APPROVED_AMOUNT");

                entity.Property(e => e.TsBilledAmount)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("TS_BILLED_AMOUNT");

                entity.Property(e => e.TsMissingAmount)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("TS_MISSING_AMOUNT");

                entity.Property(e => e.TsPendingAmount)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("TS_PENDING_AMOUNT");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");
            });

            modelBuilder.Entity<RenewalApprover>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.Role, e.CostCenter })
                    .HasName("PK_RENEW_APP");

                entity.ToTable("RENEWAL_APPROVERS");

                entity.Property(e => e.UserId)
                    .HasPrecision(10)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.Role)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ROLE");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.ApproverSequenceNumber)
                    .HasPrecision(3)
                    .HasColumnName("APPROVER_SEQUENCE_NUMBER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.DivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_CODE");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.Notes)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.PassiveApproverFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PASSIVE_APPROVER_FLAG")
                    .HasDefaultValueSql("'N'");

                entity.HasOne(d => d.RoleNavigation)
                    .WithMany(p => p.RenewalApprovers)
                    .HasForeignKey(d => d.Role)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RENEW_APP1");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RenewalApprovers)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RENEW_APP_PEOPLE");
            });

            modelBuilder.Entity<RenewalRejectionReason>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("RENEWAL_REJECTION_REASONS");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DisplayOrder)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DISPLAY_ORDER");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<ReportGroup>(entity =>
            {
                entity.ToTable("REPORT_GROUP");

                entity.Property(e => e.ReportGroupId)
                    .HasPrecision(6)
                    .ValueGeneratedNever()
                    .HasColumnName("REPORT_GROUP_ID");

                entity.Property(e => e.ReportGroupName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REPORT_GROUP_NAME");
            });

            modelBuilder.Entity<ReportJobParameter>(entity =>
            {
                entity.HasKey(e => new { e.ParameterId, e.ReportId });

                entity.ToTable("REPORT_JOB_PARAMETER");

                entity.HasIndex(e => e.ParameterTypeId, "RELATION_44_FK");

                entity.Property(e => e.ParameterId)
                    .HasPrecision(2)
                    .HasColumnName("PARAMETER_ID");

                entity.Property(e => e.ReportId)
                    .HasPrecision(4)
                    .HasColumnName("REPORT_ID");

                entity.Property(e => e.ParameterDesc)
                    .IsRequired()
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("PARAMETER_DESC");

                entity.Property(e => e.ParameterTypeId)
                    .HasPrecision(2)
                    .HasColumnName("PARAMETER_TYPE_ID");

                entity.Property(e => e.ParameterValue)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PARAMETER_VALUE");

                entity.HasOne(d => d.ParameterType)
                    .WithMany(p => p.ReportJobParameters)
                    .HasForeignKey(d => d.ParameterTypeId)
                    .HasConstraintName("FK_RELATION_44");

                entity.HasOne(d => d.Report)
                    .WithMany(p => p.ReportJobParameters)
                    .HasForeignKey(d => d.ReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RELATION_42");
            });

            modelBuilder.Entity<ReportName>(entity =>
            {
                entity.HasKey(e => e.ReportId)
                    .HasName("SYS_C0011809");

                entity.ToTable("REPORT_NAMES");

                entity.Property(e => e.ReportId)
                    .HasPrecision(6)
                    .ValueGeneratedNever()
                    .HasColumnName("REPORT_ID");

                entity.Property(e => e.ReportGroupId)
                    .HasPrecision(6)
                    .HasColumnName("REPORT_GROUP_ID");

                entity.Property(e => e.ReportName1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REPORT_NAME");

                entity.Property(e => e.ReportPath)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("REPORT_PATH");

                entity.HasOne(d => d.ReportGroup)
                    .WithMany(p => p.ReportNames)
                    .HasForeignKey(d => d.ReportGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SYS_C0012191");
            });

            modelBuilder.Entity<ReportNamesSave>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("REPORT_NAMES_SAVE");

                entity.Property(e => e.ReportGroupId)
                    .HasPrecision(6)
                    .HasColumnName("REPORT_GROUP_ID");

                entity.Property(e => e.ReportId)
                    .HasPrecision(6)
                    .HasColumnName("REPORT_ID");

                entity.Property(e => e.ReportName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REPORT_NAME");

                entity.Property(e => e.ReportPath)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("REPORT_PATH");
            });

            modelBuilder.Entity<ReportParameterType>(entity =>
            {
                entity.HasKey(e => e.ParameterTypeId);

                entity.ToTable("REPORT_PARAMETER_TYPE");

                entity.Property(e => e.ParameterTypeId)
                    .HasPrecision(2)
                    .HasColumnName("PARAMETER_TYPE_ID");

                entity.Property(e => e.ParamaterTypeCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("PARAMATER_TYPE_CODE");

                entity.Property(e => e.ParameterTypeDesc)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("PARAMETER_TYPE_DESC");
            });

            modelBuilder.Entity<ReportTable>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("REPORT_TABLE");

                entity.Property(e => e.Char1)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR1");

                entity.Property(e => e.Char10)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR10");

                entity.Property(e => e.Char11)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR11");

                entity.Property(e => e.Char12)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR12");

                entity.Property(e => e.Char13)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR13");

                entity.Property(e => e.Char14)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR14");

                entity.Property(e => e.Char2)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR2");

                entity.Property(e => e.Char3)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR3");

                entity.Property(e => e.Char4)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR4");

                entity.Property(e => e.Char5)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR5");

                entity.Property(e => e.Char6)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR6");

                entity.Property(e => e.Char7)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR7");

                entity.Property(e => e.Char8)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR8");

                entity.Property(e => e.Char9)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CHAR9");

                entity.Property(e => e.Date1)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE1");

                entity.Property(e => e.Date10)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE10");

                entity.Property(e => e.Date2)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE2");

                entity.Property(e => e.Date3)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE3");

                entity.Property(e => e.Date4)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE4");

                entity.Property(e => e.Date5)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE5");

                entity.Property(e => e.Date6)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE6");

                entity.Property(e => e.Date7)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE7");

                entity.Property(e => e.Date8)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE8");

                entity.Property(e => e.Date9)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE9");

                entity.Property(e => e.Number1)
                    .HasColumnType("NUMBER(15,6)")
                    .HasColumnName("NUMBER1");

                entity.Property(e => e.Number10)
                    .HasColumnType("NUMBER(15,6)")
                    .HasColumnName("NUMBER10");

                entity.Property(e => e.Number11)
                    .HasColumnType("NUMBER(15,6)")
                    .HasColumnName("NUMBER11");

                entity.Property(e => e.Number2)
                    .HasColumnType("NUMBER(15,6)")
                    .HasColumnName("NUMBER2");

                entity.Property(e => e.Number3)
                    .HasColumnType("NUMBER(15,6)")
                    .HasColumnName("NUMBER3");

                entity.Property(e => e.Number4)
                    .HasColumnType("NUMBER(15,6)")
                    .HasColumnName("NUMBER4");

                entity.Property(e => e.Number5)
                    .HasColumnType("NUMBER(15,6)")
                    .HasColumnName("NUMBER5");

                entity.Property(e => e.Number6)
                    .HasColumnType("NUMBER(15,6)")
                    .HasColumnName("NUMBER6");

                entity.Property(e => e.Number7)
                    .HasColumnType("NUMBER(15,6)")
                    .HasColumnName("NUMBER7");

                entity.Property(e => e.Number8)
                    .HasColumnType("NUMBER(15,6)")
                    .HasColumnName("NUMBER8");

                entity.Property(e => e.Number9)
                    .HasColumnType("NUMBER(15,6)")
                    .HasColumnName("NUMBER9");

                entity.Property(e => e.ReportMonth)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("REPORT_MONTH");

                entity.Property(e => e.ReportName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("REPORT_NAME");

                entity.Property(e => e.ReportNo)
                    .HasColumnType("NUMBER")
                    .HasColumnName("REPORT_NO");

                entity.Property(e => e.ReportYear)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("REPORT_YEAR");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SUBMIT_DATE");

                entity.Property(e => e.Text)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TEXT")
                    .IsFixedLength(true);

                entity.Property(e => e.UserId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<ReportUsercostcenterAccess>(entity =>
            {
                entity.HasKey(e => new { e.CostCenterId, e.UserId })
                    .HasName("PK_USERCC_ACCESS");

                entity.ToTable("REPORT_USERCOSTCENTER_ACCESS");

                entity.HasIndex(e => e.UserId, "REPORT_USERCOSTCENTE_IDX_001");

                entity.Property(e => e.CostCenterId)
                    .HasMaxLength(26)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER_ID");

                entity.Property(e => e.UserId)
                    .HasPrecision(10)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<ReportsJob>(entity =>
            {
                entity.HasKey(e => e.ReportId);

                entity.ToTable("REPORTS_JOB");

                entity.Property(e => e.ReportId)
                    .HasPrecision(4)
                    .HasColumnName("REPORT_ID");

                entity.Property(e => e.ReportCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("REPORT_CODE");

                entity.Property(e => e.ReportDesc)
                    .HasMaxLength(65)
                    .IsUnicode(false)
                    .HasColumnName("REPORT_DESC");

                entity.Property(e => e.ReportFrequency)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("REPORT_FREQUENCY");

                entity.Property(e => e.ReportReadyToRun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("REPORT_READY_TO_RUN")
                    .HasDefaultValueSql("'N'")
                    .IsFixedLength(true);

                entity.Property(e => e.ReportType)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("REPORT_TYPE");
            });

            modelBuilder.Entity<ResumepathOldNew>(entity =>
            {
                entity.HasKey(e => e.BidNumber)
                    .HasName("RESUMEPATH_OLD_NEW");

                entity.ToTable("RESUMEPATH_OLD_NEW");

                entity.HasIndex(e => e.FromPath, "IDX1_RESUMEPATH_OLD_NEW");

                entity.HasIndex(e => e.ToPath, "IDX2_RESUMEPATH_OLD_NEW");

                entity.HasIndex(e => e.Command, "IDX3_RESUMEPATH_OLD_NEW");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.Command)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("COMMAND");

                entity.Property(e => e.FromPath)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("FROM_PATH");

                entity.Property(e => e.ToPath)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("TO_PATH");
            });

            modelBuilder.Entity<ResumepathPnetB2b>(entity =>
            {
                entity.HasKey(e => e.BidNumber);

                entity.ToTable("RESUMEPATH_PNET_B2B");

                entity.HasIndex(e => e.FromPath, "IDX1_RESUMEPATH_PNET_B2B");

                entity.HasIndex(e => e.ToPath, "IDX2_RESUMEPATH_PNET_B2B");

                entity.HasIndex(e => e.MoveCommand, "IDX3_RESUMEPATH_PNET_B2B");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.FromPath)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("FROM_PATH");

                entity.Property(e => e.MoveCommand)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("MOVE_COMMAND");

                entity.Property(e => e.ToPath)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("TO_PATH");
            });

            modelBuilder.Entity<ResumepathPnetB2bTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RESUMEPATH_PNET_B2B_TEMP");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.FromPath)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("FROM_PATH");

                entity.Property(e => e.MoveCommand)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("MOVE_COMMAND");

                entity.Property(e => e.ToPath)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("TO_PATH");
            });

            modelBuilder.Entity<RrsCandidateCdsidFeedDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RRS_CANDIDATE_CDSID_FEED_DATA");

                entity.Property(e => e.CandidateFirstName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_FIRST_NAME");

                entity.Property(e => e.CandidateLastName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_LAST_NAME");

                entity.Property(e => e.ContracteeCdsid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONTRACTEE_CDSID");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.FeedComments)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FEED_COMMENTS");

                entity.Property(e => e.FeedId)
                    .HasPrecision(10)
                    .HasColumnName("FEED_ID");

                entity.Property(e => e.Id)
                    .HasPrecision(10)
                    .HasColumnName("ID");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.PoNumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.ProcessedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PROCESSED_FLAG");

                entity.Property(e => e.SupervisorCdsid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_CDSID");

                entity.Property(e => e.SupervisorFirstName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_FIRST_NAME");

                entity.Property(e => e.SupervisorLastName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_LAST_NAME");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.Udf5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF5");
            });

            modelBuilder.Entity<RrsExceptionStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RRS_EXCEPTION_STATUS");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<RrsFeedError>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RRS_FEED_ERROR");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.Error)
                    .HasColumnType("LONG")
                    .HasColumnName("ERROR");

                entity.Property(e => e.FeedId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FEED_ID");

                entity.Property(e => e.Status)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("STATUS");
            });

            modelBuilder.Entity<RrsFeedMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RRS_FEED_MASTER");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.FeedId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FEED_ID");

                entity.Property(e => e.FeedStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FEED_STATUS")
                    .HasDefaultValueSql("('I')");

                entity.Property(e => e.Recordsnotuploaded)
                    .IsUnicode(false)
                    .HasColumnName("RECORDSNOTUPLOADED");

                entity.Property(e => e.Recordsuploaded)
                    .IsUnicode(false)
                    .HasColumnName("RECORDSUPLOADED");

                entity.Property(e => e.TotalRecords)
                    .HasPrecision(10)
                    .HasColumnName("TOTAL_RECORDS");

                entity.Property(e => e.TotalRecordsFail)
                    .HasPrecision(10)
                    .HasColumnName("TOTAL_RECORDS_FAIL");

                entity.Property(e => e.TotalRecordsProcessed)
                    .HasPrecision(10)
                    .HasColumnName("TOTAL_RECORDS_PROCESSED");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("UPDATED_DATE");
            });

            modelBuilder.Entity<RrsHoliday>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RRS_HOLIDAYS");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.HolidayDate)
                    .HasColumnType("DATE")
                    .HasColumnName("HOLIDAY_DATE");

                entity.Property(e => e.HolidayName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HOLIDAY_NAME");

                entity.Property(e => e.Status)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("STATUS");
            });

            modelBuilder.Entity<RrsOrderDatum>(entity =>
            {
                entity.HasKey(e => e.RrsRecordId)
                    .HasName("SYS_C0011999");

                entity.ToTable("RRS_ORDER_DATA");

                entity.Property(e => e.RrsRecordId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("RRS_RECORD_ID");

                entity.Property(e => e.Accountcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNTCODE");

                entity.Property(e => e.Additionalinfo)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALINFO");

                entity.Property(e => e.B2bOrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("B2B_ORDER_NUMBER");

                entity.Property(e => e.Backgroundverification)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BACKGROUNDVERIFICATION")
                    .HasDefaultValueSql("'Y'");

                entity.Property(e => e.Candidate)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE");

                entity.Property(e => e.Companycar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("COMPANYCAR")
                    .HasDefaultValueSql("'N'");

                entity.Property(e => e.Contactcdsid)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("CONTACTCDSID");

                entity.Property(e => e.Contractorlocation)
                    .HasPrecision(5)
                    .HasColumnName("CONTRACTORLOCATION");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedByDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_BY_DATE");

                entity.Property(e => e.Deptcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DEPTCODE");

                entity.Property(e => e.Durationunits)
                    .HasPrecision(2)
                    .HasColumnName("DURATIONUNITS");

                entity.Property(e => e.Education)
                    .IsUnicode(false)
                    .HasColumnName("EDUCATION");

                entity.Property(e => e.Eeprequired)
                    .IsUnicode(false)
                    .HasColumnName("EEPREQUIRED");

                entity.Property(e => e.Eexppreferred)
                    .IsUnicode(false)
                    .HasColumnName("EEXPPREFERRED");

                entity.Property(e => e.ExceptionComments)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EXCEPTION_COMMENTS");

                entity.Property(e => e.ExceptionResolution)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EXCEPTION_RESOLUTION");

                entity.Property(e => e.ExceptionStatus)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("EXCEPTION_STATUS");

                entity.Property(e => e.FeedStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FEED_STATUS");

                entity.Property(e => e.Hiringmanagercdsid)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("HIRINGMANAGERCDSID");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.Ll4cdsid)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("LL4CDSID");

                entity.Property(e => e.Miscref)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MISCREF");

                entity.Property(e => e.Noofopenings)
                    .HasPrecision(3)
                    .HasColumnName("NOOFOPENINGS");

                entity.Property(e => e.Positiondesc)
                    .IsUnicode(false)
                    .HasColumnName("POSITIONDESC");

                entity.Property(e => e.Productcode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCTCODE");

                entity.Property(e => e.Psoftpositionnumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PSOFTPOSITIONNUMBER");

                entity.Property(e => e.Purchasedservicetopo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PURCHASEDSERVICETOPO");

                entity.Property(e => e.Reportstocdsid)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("REPORTSTOCDSID");

                entity.Property(e => e.Reqorganization)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("REQORGANIZATION")
                    .HasDefaultValueSql("'IT'");

                entity.Property(e => e.RrsBatchId)
                    .HasPrecision(10)
                    .HasColumnName("RRS_BATCH_ID");

                entity.Property(e => e.SentDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SENT_DATE");

                entity.Property(e => e.Skillsreq)
                    .IsUnicode(false)
                    .HasColumnName("SKILLSREQ");

                entity.Property(e => e.Specifiedsupplier)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPECIFIEDSUPPLIER");

                entity.Property(e => e.Startdate)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("STARTDATE");

                entity.Property(e => e.Suppliercontact)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIERCONTACT")
                    .HasDefaultValueSql("'N'");

                entity.Property(e => e.Supplierid)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIERID");

                entity.Property(e => e.Upgradeflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("UPGRADEFLAG");
            });

            modelBuilder.Entity<RrsPoFileidFeedDataArc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RRS_PO_FILEID_FEED_DATA_ARC");

                entity.Property(e => e.ArchieveId)
                    .HasPrecision(10)
                    .HasColumnName("ARCHIEVE_ID");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.FeedId)
                    .HasPrecision(10)
                    .HasColumnName("FEED_ID");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.RrsPoFileidFeedDataId)
                    .HasPrecision(10)
                    .HasColumnName("RRS_PO_FILEID_FEED_DATA_ID");

                entity.Property(e => e.RrsPositionNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RRS_POSITION_NUMBER");

                entity.Property(e => e.SendFlag)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SEND_FLAG");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.Udf5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF5");
            });

            modelBuilder.Entity<RrsPoFileidFeedDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RRS_PO_FILEID_FEED_DATA");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.FeedId)
                    .HasPrecision(10)
                    .HasColumnName("FEED_ID");

                entity.Property(e => e.Id)
                    .HasPrecision(10)
                    .HasColumnName("ID");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.RrsPositionNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RRS_POSITION_NUMBER");

                entity.Property(e => e.SendFlag)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SEND_FLAG");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.Udf5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF5");
            });

            modelBuilder.Entity<RrsSupplierFeed>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RRS_SUPPLIER_FEED");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.Process)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PROCESS");

                entity.Property(e => e.SupplierFeedId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_FEED_ID");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");
            });

            modelBuilder.Entity<RunNumber>(entity =>
            {
                entity.HasKey(e => e.GroupCode);

                entity.ToTable("RUN_NUMBER");

                entity.Property(e => e.GroupCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("GROUP_CODE");

                entity.Property(e => e.RunNumber1)
                    .HasPrecision(18)
                    .HasColumnName("RUN_NUMBER");
            });

            modelBuilder.Entity<RupdAmendment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RUPD$_AMENDMENTS");

                entity.Property(e => e.AmendmentNumber)
                    .HasPrecision(10)
                    .HasColumnName("AMENDMENT_NUMBER");

                entity.Property(e => e.ChangeVector)
                    .HasMaxLength(255)
                    .HasColumnName("CHANGE_VECTOR$$");

                entity.Property(e => e.Dmltype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMLTYPE$$");

                entity.Property(e => e.Snapid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("SNAPID");
            });

            modelBuilder.Entity<RupdBid>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RUPD$_BIDS");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.ChangeVector)
                    .HasMaxLength(255)
                    .HasColumnName("CHANGE_VECTOR$$");

                entity.Property(e => e.Dmltype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMLTYPE$$");

                entity.Property(e => e.Snapid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("SNAPID");
            });

            modelBuilder.Entity<RupdBroadcast>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RUPD$_BROADCASTS");

                entity.Property(e => e.BroadcastId)
                    .HasPrecision(10)
                    .HasColumnName("BROADCAST_ID");

                entity.Property(e => e.ChangeVector)
                    .HasMaxLength(255)
                    .HasColumnName("CHANGE_VECTOR$$");

                entity.Property(e => e.Dmltype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMLTYPE$$");

                entity.Property(e => e.Snapid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("SNAPID");
            });

            modelBuilder.Entity<RupdProductCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RUPD$_PRODUCT_CODES");

                entity.Property(e => e.ChangeVector)
                    .HasMaxLength(255)
                    .HasColumnName("CHANGE_VECTOR$$");

                entity.Property(e => e.Dmltype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMLTYPE$$");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.Snapid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("SNAPID");
            });

            modelBuilder.Entity<RupdPurchaseOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RUPD$_PURCHASE_ORDERS");

                entity.Property(e => e.ChangeVector)
                    .HasMaxLength(255)
                    .HasColumnName("CHANGE_VECTOR$$");

                entity.Property(e => e.Dmltype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMLTYPE$$");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.Snapid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("SNAPID");
            });

            modelBuilder.Entity<RupdReportUsercostcente>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RUPD$_REPORT_USERCOSTCENTE");

                entity.Property(e => e.ChangeVector)
                    .HasMaxLength(255)
                    .HasColumnName("CHANGE_VECTOR$$");

                entity.Property(e => e.CostCenterId)
                    .HasMaxLength(26)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER_ID");

                entity.Property(e => e.Dmltype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMLTYPE$$");

                entity.Property(e => e.Snapid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("SNAPID");

                entity.Property(e => e.UserId)
                    .HasPrecision(10)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<RupdSupplier>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RUPD$_SUPPLIERS");

                entity.Property(e => e.ChangeVector)
                    .HasMaxLength(255)
                    .HasColumnName("CHANGE_VECTOR$$");

                entity.Property(e => e.Dmltype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMLTYPE$$");

                entity.Property(e => e.Snapid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("SNAPID");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");
            });

            modelBuilder.Entity<RupdTimesheetHeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RUPD$_TIMESHEET_HEADERS");

                entity.Property(e => e.ChangeVector)
                    .HasMaxLength(255)
                    .HasColumnName("CHANGE_VECTOR$$");

                entity.Property(e => e.Dmltype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMLTYPE$$");

                entity.Property(e => e.Snapid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("SNAPID");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");
            });

            modelBuilder.Entity<SecurityCheck>(entity =>
            {
                entity.HasKey(e => e.BidNumber);

                entity.ToTable("SECURITY_CHECKS");

                entity.HasIndex(e => e.SecurityCheckWaivedBy, "IDX_SECURITY_CHECKS_REF_PEOPLE");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.SecurityCheckInitiationDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SECURITY_CHECK_INITIATION_DATE");

                entity.Property(e => e.SecurityCheckReceivedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SECURITY_CHECK_RECEIVED_DATE");

                entity.Property(e => e.SecurityCheckRejectedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SECURITY_CHECK_REJECTED_DATE");

                entity.Property(e => e.SecurityCheckToYaleDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SECURITY_CHECK_TO_YALE_DATE");

                entity.Property(e => e.SecurityCheckWaivedBy)
                    .HasPrecision(10)
                    .HasColumnName("SECURITY_CHECK_WAIVED_BY");

                entity.Property(e => e.SecurityCheckWaivedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SECURITY_CHECK_WAIVED_DATE");

                entity.HasOne(d => d.SecurityCheckWaivedByNavigation)
                    .WithMany(p => p.SecurityChecks)
                    .HasForeignKey(d => d.SecurityCheckWaivedBy)
                    .HasConstraintName("FK_SECURITY_REF_17433_PEOPLE");
            });

            modelBuilder.Entity<Sequence>(entity =>
            {
                entity.HasKey(e => new { e.CycleNumber, e.SequenceCategory, e.SequenceName });

                entity.ToTable("SEQUENCES");

                entity.Property(e => e.CycleNumber)
                    .HasPrecision(10)
                    .HasColumnName("CYCLE_NUMBER");

                entity.Property(e => e.SequenceCategory)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("SEQUENCE_CATEGORY");

                entity.Property(e => e.SequenceName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SEQUENCE_NAME");

                entity.Property(e => e.EndingValue)
                    .HasPrecision(10)
                    .HasColumnName("ENDING_VALUE");

                entity.Property(e => e.StartingValue)
                    .HasPrecision(10)
                    .HasColumnName("STARTING_VALUE");
            });

            modelBuilder.Entity<ServiceLevel>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("SERVICE_LEVELS");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<Session>(entity =>
            {
                entity.ToTable("SESSIONS");

                entity.HasIndex(e => e.Applicationname, "INDX_SESSION_APPNAME");

                entity.HasIndex(e => e.Created, "INDX_SESSION_CREATED");

                entity.HasIndex(e => e.Expires, "INDX_SESSION_EXPIRES");

                entity.HasIndex(e => e.Lockid, "INDX_SESSION_LOCKID");

                entity.Property(e => e.Sessionid)
                    .HasMaxLength(116)
                    .HasColumnName("SESSIONID");

                entity.Property(e => e.Applicationname)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("APPLICATIONNAME");

                entity.Property(e => e.Created)
                    .HasPrecision(6)
                    .HasColumnName("CREATED")
                    .HasDefaultValueSql("SYS_EXTRACT_UTC(SYSTIMESTAMP) ");

                entity.Property(e => e.Expires)
                    .HasPrecision(6)
                    .HasColumnName("EXPIRES");

                entity.Property(e => e.Flags)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FLAGS")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Lockdate)
                    .HasPrecision(6)
                    .HasColumnName("LOCKDATE");

                entity.Property(e => e.Locked)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("LOCKED");

                entity.Property(e => e.Lockid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("LOCKID");

                entity.Property(e => e.Sessionitems)
                    .HasColumnType("CLOB")
                    .HasColumnName("SESSIONITEMS");

                entity.Property(e => e.Timeout)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TIMEOUT");
            });

            modelBuilder.Entity<SiteCode>(entity =>
            {
                entity.HasKey(e => new { e.Udf1, e.Udf2 });

                entity.ToTable("SITE_CODES");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UDF2")
                    .HasDefaultValueSql("'NA' ");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");
            });

            modelBuilder.Entity<StartersReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("STARTERS_REPORT");

                entity.Property(e => e.ContracteeName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CONTRACTEE_NAME");

                entity.Property(e => e.ContractorCdsid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONTRACTOR_CDSID");

                entity.Property(e => e.ContractorId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTOR_ID");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EFFECTIVE_DATE");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.PoCreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PO_CREATED_DATE");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.PoStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PO_STATUS");

                entity.Property(e => e.PositionTitle)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_TITLE");

                entity.Property(e => e.ProductCode)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.SupervisorCdsid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_CDSID");

                entity.Property(e => e.SupervisorName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_NAME");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");
            });

            modelBuilder.Entity<Supplier>(entity =>
            {
                entity.ToTable("SUPPLIERS");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.BuyoutDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BUYOUT_DATE");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.DeletedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DELETED_FLAG")
                    .HasDefaultValueSql("'N'");

                entity.Property(e => e.DesourceDate)
                    .HasColumnType("DATE")
                    .HasColumnName("DESOURCE_DATE");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.MinorityCertificationFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MINORITY_CERTIFICATION_FLAG")
                    .HasDefaultValueSql("'N'");

                entity.Property(e => e.MinorityConfirmedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MINORITY_CONFIRMED_FLAG")
                    .HasDefaultValueSql("'N'");

                entity.Property(e => e.MinorityGroup)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("MINORITY_GROUP");

                entity.Property(e => e.OrganizationType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_TYPE");

                entity.Property(e => e.ParentCompany)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_COMPANY");

                entity.Property(e => e.QualityAchievedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("QUALITY_ACHIEVED_DATE");

                entity.Property(e => e.QualityCertificationType)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("QUALITY_CERTIFICATION_TYPE");

                entity.Property(e => e.QualityStatusFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("QUALITY_STATUS_FLAG")
                    .HasDefaultValueSql("'N'");

                entity.Property(e => e.RegionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("REGION_CODE");

                entity.Property(e => e.Sic)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SIC");

                entity.Property(e => e.SmallBusinessFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SMALL_BUSINESS_FLAG")
                    .HasDefaultValueSql("'N'");

                entity.Property(e => e.SupplierName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");

                entity.Property(e => e.SupplierStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_STATUS");

                entity.Property(e => e.SupplierUrl)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_URL");

                entity.Property(e => e.TaxId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TAX_ID");

                entity.Property(e => e.WebAccessFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("WEB_ACCESS_FLAG");

                entity.Property(e => e.WomanOwnedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("WOMAN_OWNED_FLAG")
                    .HasDefaultValueSql("'N'");

                entity.HasOne(d => d.MinorityGroupNavigation)
                    .WithMany(p => p.Suppliers)
                    .HasForeignKey(d => d.MinorityGroup)
                    .HasConstraintName("FK_SUPPLIERS_MINORITY_GROUP");

                entity.HasOne(d => d.OrganizationTypeNavigation)
                    .WithMany(p => p.Suppliers)
                    .HasForeignKey(d => d.OrganizationType)
                    .HasConstraintName("FK_SUPPLIER_REF_ORGAN_ORGANIZA");

                entity.HasOne(d => d.QualityCertificationTypeNavigation)
                    .WithMany(p => p.Suppliers)
                    .HasForeignKey(d => d.QualityCertificationType)
                    .HasConstraintName("FK_SUPPLIER_REF_QUALI_QUALITY_");

                entity.HasOne(d => d.RegionCodeNavigation)
                    .WithMany(p => p.Suppliers)
                    .HasForeignKey(d => d.RegionCode)
                    .HasConstraintName("FK_SUPPLIER_REF_REGIO_REGION_2");

                entity.HasOne(d => d.SupplierStatusNavigation)
                    .WithMany(p => p.Suppliers)
                    .HasForeignKey(d => d.SupplierStatus)
                    .HasConstraintName("FK_SUPPLIER_REF_SUPPL_SUPPLIER");
            });

            modelBuilder.Entity<SupplierActivePo1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SUPPLIER_ACTIVE_PO");

                entity.Property(e => e.Bill1Rate)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("BILL1_RATE");

                entity.Property(e => e.Bill2Rate)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("BILL2_RATE");

                entity.Property(e => e.CandName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CAND_NAME");

                entity.Property(e => e.CandSsn)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("CAND_SSN");

                entity.Property(e => e.Commodity)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("COMMODITY");

                entity.Property(e => e.DateRun)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE_RUN");

                entity.Property(e => e.Dept)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("DEPT");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.FileId)
                    .HasPrecision(10)
                    .HasColumnName("FILE_ID");

                entity.Property(e => e.Location)
                    .HasPrecision(10)
                    .HasColumnName("LOCATION");

                entity.Property(e => e.Opnsloc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OPNSLOC");

                entity.Property(e => e.Ot2Rate)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("OT2_RATE");

                entity.Property(e => e.OtRate)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("OT_RATE");

                entity.Property(e => e.PoNum)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUM");

                entity.Property(e => e.PrRate)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("PR_RATE");

                entity.Property(e => e.PsrName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PSR_NAME");

                entity.Property(e => e.RtsName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RTS_NAME");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SupplierId)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.Title)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TITLE");
            });

            modelBuilder.Entity<SupplierActivepo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SUPPLIER_ACTIVEPO");

                entity.Property(e => e.Ais)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AIS");

                entity.Property(e => e.BeginRange)
                    .HasColumnType("DATE")
                    .HasColumnName("BEGIN_RANGE");

                entity.Property(e => e.BillClass)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BILL_CLASS");

                entity.Property(e => e.BudgetNum)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_NUM");

                entity.Property(e => e.Contractee)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONTRACTEE");

                entity.Property(e => e.Dept)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("DEPT");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.EndRange)
                    .HasColumnType("DATE")
                    .HasColumnName("END_RANGE");

                entity.Property(e => e.Fee)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FEE");

                entity.Property(e => e.FileId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FILE_ID");

                entity.Property(e => e.ItemStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_STATUS");

                entity.Property(e => e.LineStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LINE_STATUS");

                entity.Property(e => e.LocName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LOC_NAME");

                entity.Property(e => e.MiscRef)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MISC_REF");

                entity.Property(e => e.ModDate)
                    .HasColumnType("DATE")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.Opnsloc)
                    .HasMaxLength(26)
                    .IsUnicode(false)
                    .HasColumnName("OPNSLOC");

                entity.Property(e => e.OrderOrdertype)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_ORDERTYPE");

                entity.Property(e => e.OtRate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OT_RATE");

                entity.Property(e => e.PoApprover)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("PO_APPROVER");

                entity.Property(e => e.PoCreateDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PO_CREATE_DATE");

                entity.Property(e => e.PoNte)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PO_NTE");

                entity.Property(e => e.PoNum)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUM");

                entity.Property(e => e.PoRevision)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.PremRate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PREM_RATE");

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.ReportsToProfs)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("REPORTS_TO_PROFS");

                entity.Property(e => e.Requisitioner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REQUISITIONER");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.Supervisor)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR");

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");

                entity.Property(e => e.Title)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TITLE");
            });

            modelBuilder.Entity<SupplierAlgorithm>(entity =>
            {
                entity.HasKey(e => new { e.SupplierId, e.AlgorithmNumber });

                entity.ToTable("SUPPLIER_ALGORITHM");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.AlgorithmNumber)
                    .HasPrecision(10)
                    .HasColumnName("ALGORITHM_NUMBER");

                entity.Property(e => e.AlgorithmDay)
                    .HasPrecision(3)
                    .HasColumnName("ALGORITHM_DAY");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.DeletedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DELETED_FLAG");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.HasOne(d => d.AlgorithmNumberNavigation)
                    .WithMany(p => p.SupplierAlgorithms)
                    .HasForeignKey(d => d.AlgorithmNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ALGORITHM_NUMBER");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.SupplierAlgorithms)
                    .HasForeignKey(d => d.SupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SUPPLIER_ID");
            });

            modelBuilder.Entity<SupplierAlgorithmHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId);

                entity.ToTable("SUPPLIER_ALGORITHM_HISTORY");

                entity.HasIndex(e => new { e.AlgorithmNumber, e.SupplierId }, "IDX_ALG_REF_SUPPLIER_HIST");

                entity.Property(e => e.HistoryId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("HISTORY_ID");

                entity.Property(e => e.AlgorithmDay)
                    .HasPrecision(3)
                    .HasColumnName("ALGORITHM_DAY");

                entity.Property(e => e.AlgorithmNumber)
                    .HasPrecision(10)
                    .HasColumnName("ALGORITHM_NUMBER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.DeletedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DELETED_FLAG");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.HasOne(d => d.SupplierAlgorithm)
                    .WithMany(p => p.SupplierAlgorithmHistories)
                    .HasForeignKey(d => new { d.SupplierId, d.AlgorithmNumber })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ALGORITHM_SUPPLIER_HISTORY");
            });

            modelBuilder.Entity<SupplierAmendedPo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SUPPLIER_AMENDED_PO");

                entity.Property(e => e.AmendType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AMEND_TYPE");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.FileId)
                    .HasPrecision(10)
                    .HasColumnName("FILE_ID");

                entity.Property(e => e.Location)
                    .HasPrecision(10)
                    .HasColumnName("LOCATION");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("MODIFIED_DATE");

                entity.Property(e => e.PoNum)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUM");

                entity.Property(e => e.RptBeginDate)
                    .HasColumnType("DATE")
                    .HasColumnName("RPT_BEGIN_DATE");

                entity.Property(e => e.RptEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("RPT_END_DATE");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SupplierId)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_ID");
            });

            modelBuilder.Entity<SupplierBuyout>(entity =>
            {
                entity.HasKey(e => e.SupplierId);

                entity.ToTable("SUPPLIER_BUYOUTS");

                entity.HasIndex(e => e.NewSupplierId, "IDX_SUPP_BUYOUTS_REF_SUPP");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EFFECTIVE_DATE");

                entity.Property(e => e.NewSupplierId)
                    .HasPrecision(10)
                    .HasColumnName("NEW_SUPPLIER_ID");

                entity.HasOne(d => d.NewSupplier)
                    .WithMany(p => p.SupplierBuyoutNewSuppliers)
                    .HasForeignKey(d => d.NewSupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SB_NEW_SUPPLIERID");

                entity.HasOne(d => d.Supplier)
                    .WithOne(p => p.SupplierBuyoutSupplier)
                    .HasForeignKey<SupplierBuyout>(d => d.SupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SB_SUPPLIERID");
            });

            modelBuilder.Entity<SupplierCandfeed>(entity =>
            {
                entity.HasKey(e => new { e.Bhstat, e.Bhcd, e.BidNum, e.Tstatus });

                entity.ToTable("SUPPLIER_CANDFEED");

                entity.HasIndex(e => e.SupplierId, "INDX_SUPPLIER_CANDFEED_1");

                entity.HasIndex(e => e.Tstatus, "INDX_SUPPLIER_CANDFEED_2");

                entity.Property(e => e.Bhstat)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BHSTAT");

                entity.Property(e => e.Bhcd)
                    .HasColumnType("DATE")
                    .HasColumnName("BHCD");

                entity.Property(e => e.BidNum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BID_NUM");

                entity.Property(e => e.Tstatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TSTATUS")
                    .IsFixedLength(true);

                entity.Property(e => e.CandFileId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CAND_FILE_ID");

                entity.Property(e => e.Date1)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE1");

                entity.Property(e => e.Date2)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE2");

                entity.Property(e => e.DateRun)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE_RUN");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("FIRST_NAME");

                entity.Property(e => e.LastName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LAST_NAME");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Ohcd)
                    .HasColumnType("DATE")
                    .HasColumnName("OHCD");

                entity.Property(e => e.Ohstat)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("OHSTAT");

                entity.Property(e => e.OrderNum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ORDER_NUM");

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_ID");
            });

            modelBuilder.Entity<SupplierCandsub>(entity =>
            {
                entity.HasKey(e => new { e.OrderNum, e.SupplierId, e.CandFileId, e.BidRecDate, e.Status, e.Tstatus });

                entity.ToTable("SUPPLIER_CANDSUB");

                entity.HasIndex(e => e.SupplierId, "INDX_SUPPLIER_CANDSUB_1");

                entity.HasIndex(e => e.Tstatus, "INDX_SUPPLIER_CANDSUB_2");

                entity.Property(e => e.OrderNum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ORDER_NUM");

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.CandFileId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CAND_FILE_ID");

                entity.Property(e => e.BidRecDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BID_REC_DATE");

                entity.Property(e => e.Status)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("STATUS");

                entity.Property(e => e.Tstatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TSTATUS")
                    .IsFixedLength(true);

                entity.Property(e => e.Date1)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE1");

                entity.Property(e => e.Date2)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE2");

                entity.Property(e => e.DateRun)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE_RUN");

                entity.Property(e => e.Div)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("DIV");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("FIRST_NAME");

                entity.Property(e => e.LastName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LAST_NAME");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.OvertimePremiumRequired)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("OVERTIME_PREMIUM_REQUIRED");

                entity.Property(e => e.StraightTime)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("STRAIGHT_TIME");

                entity.Property(e => e.Title)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TITLE");
            });

            modelBuilder.Entity<SupplierClosed>(entity =>
            {
                entity.HasKey(e => new { e.OrderNum, e.PosNum, e.PosStatus, e.SupplierId, e.Tstatus, e.Bdate });

                entity.ToTable("SUPPLIER_CLOSED");

                entity.HasIndex(e => e.SupplierId, "INDX_SUPPLIER_CLOSED_1");

                entity.HasIndex(e => e.Tstatus, "INDX_SUPPLIER_CLOSED_2");

                entity.Property(e => e.OrderNum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ORDER_NUM");

                entity.Property(e => e.PosNum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("POS_NUM");

                entity.Property(e => e.PosStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("POS_STATUS");

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.Tstatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TSTATUS")
                    .IsFixedLength(true);

                entity.Property(e => e.Bdate)
                    .HasColumnType("DATE")
                    .HasColumnName("BDATE");

                entity.Property(e => e.Date1)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE1");

                entity.Property(e => e.Date2)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE2");

                entity.Property(e => e.DateRun)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE_RUN");

                entity.Property(e => e.Div)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIV");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("FIRST_NAME");

                entity.Property(e => e.LastName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LAST_NAME");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.Phone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PHONE");

                entity.Property(e => e.StatusDt)
                    .HasColumnType("DATE")
                    .HasColumnName("STATUS_DT");

                entity.Property(e => e.Title)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TITLE");
            });

            modelBuilder.Entity<SupplierContact>(entity =>
            {
                entity.HasKey(e => new { e.ContactNumber, e.ContactTypeNumber });

                entity.ToTable("SUPPLIER_CONTACTS");

                entity.Property(e => e.ContactNumber)
                    .HasPrecision(10)
                    .HasColumnName("CONTACT_NUMBER");

                entity.Property(e => e.ContactTypeNumber)
                    .HasPrecision(10)
                    .HasColumnName("CONTACT_TYPE_NUMBER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.HasOne(d => d.ContactNumberNavigation)
                    .WithMany(p => p.SupplierContacts)
                    .HasForeignKey(d => d.ContactNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SUPPLIER_CONTACTS_CNUM");

                entity.HasOne(d => d.ContactTypeNumberNavigation)
                    .WithMany(p => p.SupplierContacts)
                    .HasForeignKey(d => d.ContactTypeNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SUPPLIER_CONTACTS_CTYPENUM");
            });

            modelBuilder.Entity<SupplierContactPersonnel>(entity =>
            {
                entity.HasKey(e => e.ContactNumber);

                entity.ToTable("SUPPLIER_CONTACT_PERSONNEL");

                entity.HasIndex(e => e.SupplierId, "IDX_SUPP_CONT_PERS_REF_SUPP");

                entity.Property(e => e.ContactNumber)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("CONTACT_NUMBER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ADDRESS");

                entity.Property(e => e.FaxNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("FAX_NUMBER");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("FIRST_NAME");

                entity.Property(e => e.IsActiveFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_ACTIVE_FLAG");

                entity.Property(e => e.LastName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LAST_NAME");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.MiddleInitial)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MIDDLE_INITIAL");

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("PHONE_NUMBER");

                entity.Property(e => e.Prefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PREFIX");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierLocationNumber)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_LOCATION_NUMBER");

                entity.Property(e => e.Title)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TITLE");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.SupplierContactPersonnel)
                    .HasForeignKey(d => d.SupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SUPPLIER_CP_SUPPLIERID");

                entity.HasOne(d => d.SupplierLocationNumberNavigation)
                    .WithMany(p => p.SupplierContactPersonnel)
                    .HasForeignKey(d => d.SupplierLocationNumber)
                    .HasConstraintName("FK_SUPPLIER_CP_SUPPLIERS");
            });

            modelBuilder.Entity<SupplierContactType>(entity =>
            {
                entity.HasKey(e => e.ContactTypeNumber);

                entity.ToTable("SUPPLIER_CONTACT_TYPES");

                entity.Property(e => e.ContactTypeNumber)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("CONTACT_TYPE_NUMBER");

                entity.Property(e => e.ActiveFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_FLAG");

                entity.Property(e => e.ContactType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_TYPE");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.DisplayOrder)
                    .HasPrecision(3)
                    .HasColumnName("DISPLAY_ORDER");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");
            });

            modelBuilder.Entity<SupplierContractFee>(entity =>
            {
                entity.HasKey(e => new { e.SupplierId, e.VersionNumber, e.RevisionNumber });

                entity.ToTable("SUPPLIER_CONTRACT_FEES");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.VersionNumber)
                    .HasPrecision(10)
                    .HasColumnName("VERSION_NUMBER");

                entity.Property(e => e.RevisionNumber)
                    .HasPrecision(10)
                    .HasColumnName("REVISION_NUMBER");

                entity.Property(e => e.AddlSuppFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ADDL_SUPP_FEE");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CustomerFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("CUSTOMER_FEE");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EFFECTIVE_DATE");

                entity.Property(e => e.LastModifiedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_MODIFIED_BY");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_MODIFIED_DATE");

                entity.Property(e => e.SupplierFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_FEE");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.SupplierContractFees)
                    .HasForeignKey(d => d.SupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SUPPLIER_FEES_SUPPLIERS");
            });

            modelBuilder.Entity<SupplierContractFeesBkup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SUPPLIER_CONTRACT_FEES_BKUP");

                entity.Property(e => e.AddlSuppFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ADDL_SUPP_FEE");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CustomerFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("CUSTOMER_FEE");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EFFECTIVE_DATE");

                entity.Property(e => e.LastModifiedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_MODIFIED_BY");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_MODIFIED_DATE");

                entity.Property(e => e.RevisionNumber)
                    .HasPrecision(10)
                    .HasColumnName("REVISION_NUMBER");

                entity.Property(e => e.SupplierFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_FEE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.VersionNumber)
                    .HasPrecision(10)
                    .HasColumnName("VERSION_NUMBER");
            });

            modelBuilder.Entity<SupplierDeclined>(entity =>
            {
                entity.HasKey(e => new { e.CandFileId, e.ChangedDate, e.OrderNum, e.SupplierId, e.Tstatus });

                entity.ToTable("SUPPLIER_DECLINED");

                entity.HasIndex(e => e.SupplierId, "INDX_SN_DECLINED_1");

                entity.HasIndex(e => e.Tstatus, "INDX_SN_DECLINED_2");

                entity.Property(e => e.CandFileId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CAND_FILE_ID");

                entity.Property(e => e.ChangedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CHANGED_DATE");

                entity.Property(e => e.OrderNum)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUM");

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.Tstatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TSTATUS")
                    .IsFixedLength(true);

                entity.Property(e => e.Date1)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE1");

                entity.Property(e => e.Date2)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE2");

                entity.Property(e => e.DateRun)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE_RUN");

                entity.Property(e => e.DeclinedCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DECLINED_CODE");

                entity.Property(e => e.Div)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIV");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("FIRST_NAME");

                entity.Property(e => e.LastName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LAST_NAME");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Result)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("RESULT");
            });

            modelBuilder.Entity<SupplierHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId);

                entity.ToTable("SUPPLIER_HISTORY");

                entity.HasIndex(e => e.SupplierId, "IDX_SUPP_HIST_REF_SUPP");

                entity.Property(e => e.HistoryId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("HISTORY_ID");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EFFECTIVE_DATE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_STATUS");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.SupplierHistories)
                    .HasForeignKey(d => d.SupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SUPPLIER_HISTORY_SUPPLIERS");
            });

            modelBuilder.Entity<SupplierHold>(entity =>
            {
                entity.HasKey(e => new { e.OrderNum, e.PosNum, e.PosStatus, e.StatusDt, e.SupplierId, e.Tstatus });

                entity.ToTable("SUPPLIER_HOLD");

                entity.HasIndex(e => e.SupplierId, "INDX_SUPPLIER_HOLD_1");

                entity.HasIndex(e => e.Tstatus, "INDX_SUPPLIER_HOLD_2");

                entity.Property(e => e.OrderNum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ORDER_NUM");

                entity.Property(e => e.PosNum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("POS_NUM");

                entity.Property(e => e.PosStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("POS_STATUS");

                entity.Property(e => e.StatusDt)
                    .HasColumnType("DATE")
                    .HasColumnName("STATUS_DT");

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.Tstatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TSTATUS")
                    .IsFixedLength(true);

                entity.Property(e => e.Bdate)
                    .HasColumnType("DATE")
                    .HasColumnName("BDATE");

                entity.Property(e => e.DateRun)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE_RUN");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Div)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIV");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("FIRST_NAME");

                entity.Property(e => e.HoldCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("HOLD_CODE");

                entity.Property(e => e.LastName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LAST_NAME");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.Phone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PHONE");

                entity.Property(e => e.Title)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TITLE");
            });

            modelBuilder.Entity<SupplierHoliday>(entity =>
            {
                entity.HasKey(e => e.HolidayDate);

                entity.ToTable("SUPPLIER_HOLIDAYS");

                entity.Property(e => e.HolidayDate)
                    .HasColumnType("DATE")
                    .HasColumnName("HOLIDAY_DATE");

                entity.Property(e => e.Holiday)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HOLIDAY");
            });

            modelBuilder.Entity<SupplierIpAddress>(entity =>
            {
                entity.HasKey(e => new { e.SupplierId, e.IpLow, e.IpHigh });

                entity.ToTable("SUPPLIER_IP_ADDRESSES");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.IpLow)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("IP_LOW");

                entity.Property(e => e.IpHigh)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("IP_HIGH");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.SupplierIpAddresses)
                    .HasForeignKey(d => d.SupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SIPADDRESSES_SUPPLIERID");
            });

            modelBuilder.Entity<SupplierIpAddressesBkup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SUPPLIER_IP_ADDRESSES_BKUP");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.IpHigh)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("IP_HIGH");

                entity.Property(e => e.IpLow)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("IP_LOW");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");
            });

            modelBuilder.Entity<SupplierJde>(entity =>
            {
                entity.HasKey(e => e.SupplierId);

                entity.ToTable("SUPPLIER_JDE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierJdeId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_JDE_ID");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.HasOne(d => d.Supplier)
                    .WithOne(p => p.SupplierJde)
                    .HasForeignKey<SupplierJde>(d => d.SupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SUPPLIERID_SUPPLIERJDE");
            });

            modelBuilder.Entity<SupplierLocation>(entity =>
            {
                entity.HasKey(e => e.SupplierLocationNumber);

                entity.ToTable("SUPPLIER_LOCATION");

                entity.HasIndex(e => e.SupplierId, "IDX_SUPP_LOC_REF_SUPP");

                entity.Property(e => e.SupplierLocationNumber)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("SUPPLIER_LOCATION_NUMBER");

                entity.Property(e => e.Address1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS_1");

                entity.Property(e => e.Address2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS_2");

                entity.Property(e => e.Address3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS_3");

                entity.Property(e => e.Address4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS_4");

                entity.Property(e => e.City)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CITY");

                entity.Property(e => e.Country)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COUNTRY");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.State)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("STATE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.ZipCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ZIP_CODE");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.SupplierLocations)
                    .HasForeignKey(d => d.SupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SUPPLIER_REF_SUPPL_SUPPLIE2");
            });

            modelBuilder.Entity<SupplierNewPo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SUPPLIER_NEW_PO");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.FileId)
                    .HasPrecision(10)
                    .HasColumnName("FILE_ID");

                entity.Property(e => e.Location)
                    .HasPrecision(10)
                    .HasColumnName("LOCATION");

                entity.Property(e => e.PoCreateDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PO_CREATE_DATE");

                entity.Property(e => e.PoNum)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUM");

                entity.Property(e => e.RptBeginDate)
                    .HasColumnType("DATE")
                    .HasColumnName("RPT_BEGIN_DATE");

                entity.Property(e => e.RptEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("RPT_END_DATE");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SupplierId)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_ID");
            });

            modelBuilder.Entity<SupplierOpen>(entity =>
            {
                entity.HasKey(e => new { e.OrderNum, e.PosNum, e.PosStatus, e.SupplierId, e.Tstatus });

                entity.ToTable("SUPPLIER_OPEN");

                entity.HasIndex(e => e.SupplierId, "INDX_SUPPLIER_OPEN_1");

                entity.HasIndex(e => e.Tstatus, "INDX_SUPPLIER_OPEN_2");

                entity.Property(e => e.OrderNum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ORDER_NUM");

                entity.Property(e => e.PosNum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("POS_NUM");

                entity.Property(e => e.PosStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("POS_STATUS");

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.Tstatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TSTATUS")
                    .IsFixedLength(true);

                entity.Property(e => e.Bdate)
                    .HasColumnType("DATE")
                    .HasColumnName("BDATE");

                entity.Property(e => e.DateRun)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE_RUN");

                entity.Property(e => e.Div)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIV");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("FIRST_NAME");

                entity.Property(e => e.LastName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LAST_NAME");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.OpenDt)
                    .HasColumnType("DATE")
                    .HasColumnName("OPEN_DT");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.Phone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PHONE");

                entity.Property(e => e.Title)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TITLE");
            });

            modelBuilder.Entity<SupplierOpen2>(entity =>
            {
                entity.HasKey(e => new { e.OrderNum, e.PosNum, e.PosStatus, e.SupplierId, e.Tstatus });

                entity.ToTable("SUPPLIER_OPEN2");

                entity.Property(e => e.OrderNum)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUM");

                entity.Property(e => e.PosNum)
                    .HasPrecision(10)
                    .HasColumnName("POS_NUM");

                entity.Property(e => e.PosStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("POS_STATUS");

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.Tstatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TSTATUS")
                    .IsFixedLength(true);

                entity.Property(e => e.Bdate)
                    .HasColumnType("DATE")
                    .HasColumnName("BDATE");

                entity.Property(e => e.BillingGroup)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_GROUP");

                entity.Property(e => e.BroadcastLevel)
                    .HasPrecision(2)
                    .HasColumnName("BROADCAST_LEVEL");

                entity.Property(e => e.DateRun)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE_RUN");

                entity.Property(e => e.Div)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIV");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("FIRST_NAME");

                entity.Property(e => e.Incentive)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INCENTIVE");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.LastName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LAST_NAME");

                entity.Property(e => e.Location)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LOCATION");

                entity.Property(e => e.MinPosDate)
                    .HasColumnType("DATE")
                    .HasColumnName("MIN_POS_DATE");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.OpenDt)
                    .HasColumnType("DATE")
                    .HasColumnName("OPEN_DT");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("SUB_ISSUANCE");

                entity.Property(e => e.Title)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TITLE");
            });

            modelBuilder.Entity<SupplierQuality>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SUPPLIER_QUALITY");

                entity.HasIndex(e => e.SupplierId, "INDX_SUPPLIER_QUALITY");

                entity.Property(e => e.CategoryId)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CATEGORY_ID")
                    .IsFixedLength(true);

                entity.Property(e => e.Cname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CNAME");

                entity.Property(e => e.FileId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FILE_ID");

                entity.Property(e => e.PoNum)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUM");

                entity.Property(e => e.PositionNum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("POSITION_NUM");

                entity.Property(e => e.Rating)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RATING")
                    .IsFixedLength(true);

                entity.Property(e => e.ReviewDate)
                    .HasColumnType("DATE")
                    .HasColumnName("REVIEW_DATE");

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_ID");
            });

            modelBuilder.Entity<SupplierReplacementDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SUPPLIER_REPLACEMENT_DATA");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.ContracteeName)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CONTRACTEE_NAME");

                entity.Property(e => e.CustomerContactId)
                    .HasPrecision(10)
                    .HasColumnName("CUSTOMER_CONTACT_ID");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.NewSupplierId)
                    .HasPrecision(10)
                    .HasColumnName("NEW_SUPPLIER_ID");

                entity.Property(e => e.OldSupplierId)
                    .HasPrecision(10)
                    .HasColumnName("OLD_SUPPLIER_ID");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.ProcessedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PROCESSED_FLAG");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");
            });

            modelBuilder.Entity<SupplierSpecificDatum>(entity =>
            {
                entity.HasKey(e => new { e.SupplierId, e.CandidateId })
                    .HasName("PK_SPECIFIC_DATA");

                entity.ToTable("SUPPLIER_SPECIFIC_DATA");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.CandidateId)
                    .HasPrecision(10)
                    .HasColumnName("CANDIDATE_ID");

                entity.Property(e => e.PoNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.Udf5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF5");

                entity.Property(e => e.Udf6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF6");

                entity.Property(e => e.Udf7)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF7");

                entity.Property(e => e.Udf8)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF8");

                entity.HasOne(d => d.Candidate)
                    .WithMany(p => p.SupplierSpecificData)
                    .HasForeignKey(d => d.CandidateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SPECIFIC_DATA2");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.SupplierSpecificData)
                    .HasForeignKey(d => d.SupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SPECIFIC_DATA");
            });

            modelBuilder.Entity<SupplierStanding>(entity =>
            {
                entity.HasKey(e => new { e.OrderNum, e.PosNum, e.PosStatus, e.SupplierId, e.Tstatus })
                    .HasName("PK_SUPPLIER_STANDING1");

                entity.ToTable("SUPPLIER_STANDING");

                entity.HasIndex(e => e.SupplierId, "INDX_SUPPLIER_STANDING_1");

                entity.HasIndex(e => e.Tstatus, "INDX_SUPPLIER_STANDING_2");

                entity.Property(e => e.OrderNum)
                    .HasColumnType("FLOAT")
                    .HasColumnName("ORDER_NUM");

                entity.Property(e => e.PosNum)
                    .HasColumnType("FLOAT")
                    .HasColumnName("POS_NUM");

                entity.Property(e => e.PosStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("POS_STATUS");

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.Tstatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TSTATUS")
                    .IsFixedLength(true);

                entity.Property(e => e.Bdate)
                    .HasColumnType("DATE")
                    .HasColumnName("BDATE");

                entity.Property(e => e.DateRun)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE_RUN");

                entity.Property(e => e.Div)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIV");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("FIRST_NAME");

                entity.Property(e => e.LastName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LAST_NAME");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.OpenDt)
                    .HasColumnType("DATE")
                    .HasColumnName("OPEN_DT");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.Phone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PHONE");

                entity.Property(e => e.Title)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TITLE");
            });

            modelBuilder.Entity<SupplierStanding2>(entity =>
            {
                entity.HasKey(e => new { e.OrderNum, e.PosNum, e.PosStatus, e.SupplierId, e.Tstatus })
                    .HasName("PK_SUPPLIER_STANDING");

                entity.ToTable("SUPPLIER_STANDING2");

                entity.Property(e => e.OrderNum)
                    .HasColumnType("FLOAT")
                    .HasColumnName("ORDER_NUM");

                entity.Property(e => e.PosNum)
                    .HasColumnType("FLOAT")
                    .HasColumnName("POS_NUM");

                entity.Property(e => e.PosStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("POS_STATUS");

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.Tstatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TSTATUS")
                    .IsFixedLength(true);

                entity.Property(e => e.Bdate)
                    .HasColumnType("DATE")
                    .HasColumnName("BDATE");

                entity.Property(e => e.BillingGroup)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_GROUP");

                entity.Property(e => e.BroadcastLevel)
                    .HasPrecision(2)
                    .HasColumnName("BROADCAST_LEVEL");

                entity.Property(e => e.DateRun)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE_RUN");

                entity.Property(e => e.Div)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIV");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("FIRST_NAME");

                entity.Property(e => e.Incentive)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INCENTIVE");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.LastName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LAST_NAME");

                entity.Property(e => e.Location)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION");

                entity.Property(e => e.MinPosDate)
                    .HasColumnType("DATE")
                    .HasColumnName("MIN_POS_DATE");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.OpenDt)
                    .HasColumnType("DATE")
                    .HasColumnName("OPEN_DT");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("SUB_ISSUANCE");

                entity.Property(e => e.Title)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TITLE");
            });

            modelBuilder.Entity<SupplierStatus>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("SUPPLIER_STATUS");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<SupplierUser>(entity =>
            {
                entity.HasKey(e => new { e.SupplierId, e.UserId });

                entity.ToTable("SUPPLIER_USER");

                entity.HasIndex(e => e.UserId, "IDX_SUPPLIER_USER_REF_PEOPLE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.UserId)
                    .HasPrecision(10)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.SupplierUsers)
                    .HasForeignKey(d => d.SupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SU_SUPPLIERID");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.SupplierUsers)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SU_USERID");
            });

            modelBuilder.Entity<Survey>(entity =>
            {
                entity.HasKey(e => e.SurveyCode)
                    .HasName("SYS_C0011878");

                entity.ToTable("SURVEYS");

                entity.Property(e => e.SurveyCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_CODE");

                entity.Property(e => e.RresponseTime)
                    .HasColumnType("NUMBER(22)")
                    .HasColumnName("RRESPONSE_TIME");

                entity.Property(e => e.SurveyName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_NAME");

                entity.Property(e => e.SurveyTypeCode)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_TYPE_CODE");

                entity.HasOne(d => d.SurveyTypeCodeNavigation)
                    .WithMany(p => p.Surveys)
                    .HasForeignKey(d => d.SurveyTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SYS_C0012216");
            });

            modelBuilder.Entity<SurveyQuestion>(entity =>
            {
                entity.HasKey(e => e.QuestionNumber)
                    .HasName("SYS_C0011879");

                entity.ToTable("SURVEY_QUESTIONS");

                entity.Property(e => e.QuestionNumber)
                    .HasPrecision(3)
                    .HasColumnName("QUESTION_NUMBER");

                entity.Property(e => e.CreatedBy)
                    .HasColumnType("NUMBER(22)")
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EFFECTIVE_DATE");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(2)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.QuestionText)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("QUESTION_TEXT");

                entity.Property(e => e.SurveyCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_CODE");

                entity.HasOne(d => d.SurveyCodeNavigation)
                    .WithMany(p => p.SurveyQuestions)
                    .HasForeignKey(d => d.SurveyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SYS_C0012217");
            });

            modelBuilder.Entity<SurveyResponse>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SURVEY_RESPONSES");

                entity.HasIndex(e => e.UserId, "IDX_SURVEY_RESP_REF_PEOPLE");

                entity.HasIndex(e => e.SurveyResponseId, "SYS_C005630")
                    .IsUnique();

                entity.Property(e => e.Comments)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedBy)
                    .HasColumnType("NUMBER(22)")
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.DivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_CODE");

                entity.Property(e => e.LastUpdatedBy)
                    .HasColumnType("NUMBER(22)")
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.LocationCode)
                    .HasPrecision(10)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.QuestionNumber)
                    .HasPrecision(3)
                    .HasColumnName("QUESTION_NUMBER");

                entity.Property(e => e.SurveyCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_CODE");

                entity.Property(e => e.SurveyResponseId)
                    .HasPrecision(10)
                    .HasColumnName("SURVEY_RESPONSE_ID");

                entity.Property(e => e.SurveyResultCode)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_RESULT_CODE");

                entity.Property(e => e.UserId)
                    .HasPrecision(10)
                    .HasColumnName("USER_ID");

                entity.HasOne(d => d.SurveyCodeNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.SurveyCode)
                    .HasConstraintName("SYS_C0012218");

                entity.HasOne(d => d.User)
                    .WithMany()
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("SYS_C0012219");
            });

            modelBuilder.Entity<SurveyResultsCode>(entity =>
            {
                entity.HasKey(e => new { e.SurveyResultCode, e.SurveyCode });

                entity.ToTable("SURVEY_RESULTS_CODES");

                entity.Property(e => e.SurveyResultCode)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_RESULT_CODE");

                entity.Property(e => e.SurveyCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_CODE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<SurveyType>(entity =>
            {
                entity.HasKey(e => e.SurveyTypeCode)
                    .HasName("SYS_C0011881");

                entity.ToTable("SURVEY_TYPE");

                entity.Property(e => e.SurveyTypeCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("SURVEY_TYPE_CODE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");

                entity.Property(e => e.NumberSkipsAllowed)
                    .HasPrecision(10)
                    .HasColumnName("NUMBER_SKIPS_ALLOWED");
            });

            modelBuilder.Entity<TalentEiStaging>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TALENT_EI_STAGING");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.CandidateEmail)
                    .HasMaxLength(160)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_EMAIL");

                entity.Property(e => e.CandidateFirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_FIRST_NAME");

                entity.Property(e => e.CandidateId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_ID");

                entity.Property(e => e.CandidateLastName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_LAST_NAME");

                entity.Property(e => e.CustomField1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOM_FIELD1");

                entity.Property(e => e.CustomField2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOM_FIELD2");

                entity.Property(e => e.CustomField3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOM_FIELD3");

                entity.Property(e => e.CustomField4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOM_FIELD4");

                entity.Property(e => e.CustomField5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOM_FIELD5");

                entity.Property(e => e.DateOfChange)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DATE_OF_CHANGE");

                entity.Property(e => e.DateOfMatch)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DATE_OF_MATCH");

                entity.Property(e => e.DateOfOrderStatusChange)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DATE_OF_ORDER_STATUS_CHANGE");

                entity.Property(e => e.DispositionCode)
                    .HasPrecision(10)
                    .HasColumnName("DISPOSITION_CODE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.JobOrderNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JOB_ORDER_NUMBER");

                entity.Property(e => e.LastUpdated)
                    .HasPrecision(6)
                    .HasColumnName("LAST_UPDATED");

                entity.Property(e => e.MatchId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MATCH_ID");

                entity.Property(e => e.MsxStatus)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MSX_STATUS");

                entity.Property(e => e.OpportunityPostedDate)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OPPORTUNITY_POSTED_DATE");

                entity.Property(e => e.OrderStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_STATUS");

                entity.Property(e => e.Positions)
                    .HasPrecision(10)
                    .HasColumnName("POSITIONS");

                entity.Property(e => e.PraportionBidOfTarget)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("PRAPORTION_BID_OF_TARGET");

                entity.Property(e => e.Status)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("STATUS");

                entity.Property(e => e.Submission)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUBMISSION");

                entity.Property(e => e.SubmissionRate)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("SUBMISSION_RATE");

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");

                entity.Property(e => e.TargetRate)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("TARGET_RATE");

                entity.Property(e => e.UnacceptableDecline)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("UNACCEPTABLE_DECLINE");
            });

            modelBuilder.Entity<TalentEiTrack>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TALENT_EI_TRACK");

                entity.Property(e => e.CandidateId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_ID");

                entity.Property(e => e.Cf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CF1");

                entity.Property(e => e.Cf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CF2");

                entity.Property(e => e.CreatedDate)
                    .HasPrecision(6)
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Issuance)
                    .HasPrecision(5)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.LastUpdatedDate)
                    .HasPrecision(6)
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.Status)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STATUS")
                    .HasDefaultValueSql("'SENT'");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(5)
                    .HasColumnName("SUB_ISSUANCE");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");
            });

            modelBuilder.Entity<TalenteiCostCenter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TALENTEI_COST_CENTERS");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.IsIncluded)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_INCLUDED")
                    .HasDefaultValueSql("'Y'")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<TalenteiFeedDataArchive>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TALENTEI_FEED_DATA_ARCHIVE");

                entity.Property(e => e.Additionaluser1)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER1");

                entity.Property(e => e.Additionaluser10)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER10");

                entity.Property(e => e.Additionaluser2)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER2");

                entity.Property(e => e.Additionaluser3)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER3");

                entity.Property(e => e.Additionaluser4)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER4");

                entity.Property(e => e.Additionaluser5)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER5");

                entity.Property(e => e.Additionaluser6)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER6");

                entity.Property(e => e.Additionaluser7)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER7");

                entity.Property(e => e.Additionaluser8)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER8");

                entity.Property(e => e.Additionaluser9)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER9");

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CITY");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.Description)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Enddate)
                    .HasColumnType("DATE")
                    .HasColumnName("ENDDATE");

                entity.Property(e => e.FeedId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FEED_ID");

                entity.Property(e => e.FeedRecordId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FEED_RECORD_ID");

                entity.Property(e => e.Hiringmanageremail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HIRINGMANAGEREMAIL");

                entity.Property(e => e.Hiringmanagerfirstname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HIRINGMANAGERFIRSTNAME");

                entity.Property(e => e.Hiringmanagerlastname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HIRINGMANAGERLASTNAME");

                entity.Property(e => e.Hiringmanagerphone)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HIRINGMANAGERPHONE");

                entity.Property(e => e.Hoursperweek)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("HOURSPERWEEK");

                entity.Property(e => e.Jobordernumber)
                    .HasPrecision(10)
                    .HasColumnName("JOBORDERNUMBER");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.Postingowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("POSTINGOWNER");

                entity.Property(e => e.Startdate)
                    .HasColumnType("DATE")
                    .HasColumnName("STARTDATE");

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STATE");

                entity.Property(e => e.Street)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STREET");

                entity.Property(e => e.Subtype)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUBTYPE");

                entity.Property(e => e.Targetrate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TARGETRATE");

                entity.Property(e => e.Title)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TITLE");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TYPE");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Zipcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ZIPCODE");
            });

            modelBuilder.Entity<TalenteiFeedDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TALENTEI_FEED_DATA");

                entity.Property(e => e.Additionaluser1)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER1");

                entity.Property(e => e.Additionaluser10)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER10");

                entity.Property(e => e.Additionaluser2)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER2");

                entity.Property(e => e.Additionaluser3)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER3");

                entity.Property(e => e.Additionaluser4)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER4");

                entity.Property(e => e.Additionaluser5)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER5");

                entity.Property(e => e.Additionaluser6)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER6");

                entity.Property(e => e.Additionaluser7)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER7");

                entity.Property(e => e.Additionaluser8)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER8");

                entity.Property(e => e.Additionaluser9)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER9");

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CITY");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.Description)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Enddate)
                    .HasColumnType("DATE")
                    .HasColumnName("ENDDATE");

                entity.Property(e => e.FeedId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FEED_ID");

                entity.Property(e => e.FeedRecordId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FEED_RECORD_ID");

                entity.Property(e => e.Hiringmanageremail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HIRINGMANAGEREMAIL");

                entity.Property(e => e.Hiringmanagerfirstname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HIRINGMANAGERFIRSTNAME");

                entity.Property(e => e.Hiringmanagerlastname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HIRINGMANAGERLASTNAME");

                entity.Property(e => e.Hiringmanagerphone)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HIRINGMANAGERPHONE");

                entity.Property(e => e.Hoursperweek)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("HOURSPERWEEK");

                entity.Property(e => e.Jobordernumber)
                    .HasPrecision(10)
                    .HasColumnName("JOBORDERNUMBER");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.Postingowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("POSTINGOWNER");

                entity.Property(e => e.Startdate)
                    .HasColumnType("DATE")
                    .HasColumnName("STARTDATE");

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STATE");

                entity.Property(e => e.Street)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STREET");

                entity.Property(e => e.Subtype)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUBTYPE");

                entity.Property(e => e.Targetrate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TARGETRATE");

                entity.Property(e => e.Title)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TITLE");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TYPE");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Zipcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ZIPCODE");
            });

            modelBuilder.Entity<TargetRate>(entity =>
            {
                entity.HasKey(e => new { e.RegionCode, e.BillingGroupCode, e.GradeLevel, e.ProductCode });

                entity.ToTable("TARGET_RATES");

                entity.HasIndex(e => e.ProductCode, "IDX_TARG_RATES_REF_PROD_CODE");

                entity.Property(e => e.RegionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("REGION_CODE");

                entity.Property(e => e.BillingGroupCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_GROUP_CODE");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EFFECTIVE_DATE");

                entity.Property(e => e.SupplierTargetRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_TARGET_RATE");

                entity.Property(e => e.TargetRate1)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TARGET_RATE");

                entity.HasOne(d => d.BillingGroupCodeNavigation)
                    .WithMany(p => p.TargetRates)
                    .HasForeignKey(d => d.BillingGroupCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TARGET_RATES_BILLING_GROUP");

                entity.HasOne(d => d.GradeLevelNavigation)
                    .WithMany(p => p.TargetRates)
                    .HasForeignKey(d => d.GradeLevel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TARGET_RATES_GRADE_LEVEL");

                entity.HasOne(d => d.ProductCodeNavigation)
                    .WithMany(p => p.TargetRates)
                    .HasForeignKey(d => d.ProductCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TARGET_RATES_PRODUCT_CODE");

                entity.HasOne(d => d.RegionCodeNavigation)
                    .WithMany(p => p.TargetRates)
                    .HasForeignKey(d => d.RegionCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_REG_CODE_LOC_REG_CODE");
            });

            modelBuilder.Entity<TargetRatesTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TARGET_RATES_TEMP");

                entity.Property(e => e.BillingGroupCode)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_GROUP_CODE");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EFFECTIVE_DATE");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("REGION_CODE");

                entity.Property(e => e.SupplierTargetRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_TARGET_RATE");

                entity.Property(e => e.TargetRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TARGET_RATE");
            });

            modelBuilder.Entity<Task>(entity =>
            {
                entity.ToTable("TASKS");

                entity.HasIndex(e => e.OrderNumber, "IDX_ORDER_NUMBER");

                entity.HasIndex(e => e.UserId, "IDX_TASK_USER_ID");

                entity.Property(e => e.TaskId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("TASK_ID");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.Description)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EXPIRATION_DATE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PageUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PAGE_URL");

                entity.Property(e => e.ShortDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SHORT_DESCRIPTION");

                entity.Property(e => e.TaskCompleteFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TASK_COMPLETE_FLAG");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.UserId)
                    .HasPrecision(10)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<TaskType>(entity =>
            {
                entity.ToTable("TASK_TYPE");

                entity.Property(e => e.TaskTypeId)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TASK_TYPE_ID");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<TasksForddev>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TASKS_FORDDEV");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.Description)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EXPIRATION_DATE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PageUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PAGE_URL");

                entity.Property(e => e.ShortDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SHORT_DESCRIPTION");

                entity.Property(e => e.TaskCompleteFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TASK_COMPLETE_FLAG");

                entity.Property(e => e.TaskId)
                    .HasPrecision(10)
                    .HasColumnName("TASK_ID");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.UserId)
                    .HasPrecision(10)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<TemmSuppFee>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMM_SUPP_FEE");

                entity.Property(e => e.AddlSuppFee)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ADDL_SUPP_FEE");

                entity.Property(e => e.CreatedBy)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CustomerFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("CUSTOMER_FEE");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EFFECTIVE_DATE");

                entity.Property(e => e.LastModifiedBy)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LAST_MODIFIED_BY");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_MODIFIED_DATE");

                entity.Property(e => e.RevisionNumber)
                    .HasPrecision(10)
                    .HasColumnName("REVISION_NUMBER");

                entity.Property(e => e.SupplierFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_FEE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VERSION_NUMBER");
            });

            modelBuilder.Entity<Temp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP");

                entity.Property(e => e.NewId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("NEW_ID");

                entity.Property(e => e.OldId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OLD_ID");

                entity.Property(e => e.ProcessedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PROCESSED_FLAG")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Temp1>(entity =>
            {
                entity.HasKey(e => e.SubLedger)
                    .HasName("T_ASDF");

                entity.ToTable("TEMP1");

                entity.Property(e => e.SubLedger)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUB_LEDGER");
            });

            modelBuilder.Entity<Temp2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP2");

                entity.Property(e => e.Cc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CC");

                entity.Property(e => e.Des)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DES");
            });

            modelBuilder.Entity<Temp3>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP3");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");
            });

            modelBuilder.Entity<Temp4>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP4");

                entity.Property(e => e.CdsId)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("CDS_ID");

                entity.Property(e => e.FileId)
                    .HasPrecision(10)
                    .HasColumnName("FILE_ID");

                entity.Property(e => e.Issuance)
                    .HasPrecision(3)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.ProcessedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PROCESSED_FLAG")
                    .IsFixedLength(true);

                entity.Property(e => e.Pspn)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PSPN");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(3)
                    .HasColumnName("SUB_ISSUANCE");
            });

            modelBuilder.Entity<TempActivePoLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_ACTIVE_PO_LINES");

                entity.Property(e => e.CandidateId)
                    .HasPrecision(10)
                    .HasColumnName("CANDIDATE_ID");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.ProcessedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PROCESSED_FLAG");
            });

            modelBuilder.Entity<TempActivePoLine12feb>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_ACTIVE_PO_LINE12FEB");

                entity.Property(e => e.CandidateId)
                    .HasPrecision(10)
                    .HasColumnName("CANDIDATE_ID");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.ProcessedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PROCESSED_FLAG");
            });

            modelBuilder.Entity<TempAdsFmccPo>(entity =>
            {
                entity.HasKey(e => e.PoNumber)
                    .HasName("PK_ADSFM_PO");

                entity.ToTable("TEMP_ADS_FMCC_POS");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.NewProductCode)
                    .HasPrecision(10)
                    .HasColumnName("NEW_PRODUCT_CODE");

                entity.Property(e => e.OldProductCode)
                    .HasPrecision(10)
                    .HasColumnName("OLD_PRODUCT_CODE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.ProcessedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PROCESSED_FLAG");
            });

            modelBuilder.Entity<TempAdsTransferPo>(entity =>
            {
                entity.HasKey(e => e.PoNumber)
                    .HasName("PK_ADSTR_PO");

                entity.ToTable("TEMP_ADS_TRANSFER_POS");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.NewCostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NEW_COST_CENTER");

                entity.Property(e => e.OldCostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OLD_COST_CENTER");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.ProcessedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PROCESSED_FLAG");
            });

            modelBuilder.Entity<TempAporDuplicateResult>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_APOR_DUPLICATE_RESULT");

                entity.Property(e => e.DeleteFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DELETE_FLAG")
                    .IsFixedLength(true);

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");
            });

            modelBuilder.Entity<TempAporReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_APOR_REPORT");

                entity.Property(e => e.Building)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BUILDING");

                entity.Property(e => e.CandidateFirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_FIRST_NAME");

                entity.Property(e => e.CandidateId)
                    .HasPrecision(10)
                    .HasColumnName("CANDIDATE_ID");

                entity.Property(e => e.CandidateLastName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_LAST_NAME");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CustomerFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("CUSTOMER_FEE");

                entity.Property(e => e.CustomerRetiree)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_RETIREE");

                entity.Property(e => e.DivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_CODE");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.Invoice)
                    .HasColumnType("NUMBER(22,10)")
                    .HasColumnName("INVOICE");

                entity.Property(e => e.InvoiceNumber)
                    .HasColumnType("NUMBER(22,10)")
                    .HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.LocationCode)
                    .HasColumnType("NUMBER(22,10)")
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.LoginId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LOGIN_ID");

                entity.Property(e => e.MaxEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("MAX_END_DATE");

                entity.Property(e => e.MinStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("MIN_START_DATE");

                entity.Property(e => e.MiscRef)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MISC_REF");

                entity.Property(e => e.Month)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MONTH");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.PeopleFirstName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("PEOPLE_FIRST_NAME");

                entity.Property(e => e.PeopleLastName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("PEOPLE_LAST_NAME");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNteAmount)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("PO_NTE_AMOUNT");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.ProductMainDescription)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_MAIN_DESCRIPTION");

                entity.Property(e => e.ProductSubDescription)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_SUB_DESCRIPTION");

                entity.Property(e => e.ReportsTo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REPORTS_TO");

                entity.Property(e => e.ReportsToId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("REPORTS_TO_ID");

                entity.Property(e => e.Room)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ROOM");

                entity.Property(e => e.StRateCustomer)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE_CUSTOMER");

                entity.Property(e => e.StRateSupplier)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE_SUPPLIER");

                entity.Property(e => e.SupplierFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_FEE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");

                entity.Property(e => e.UdfDate1)
                    .HasColumnType("DATE")
                    .HasColumnName("UDF_DATE1");

                entity.Property(e => e.UdfDate2)
                    .HasColumnType("DATE")
                    .HasColumnName("UDF_DATE2");

                entity.Property(e => e.UdfDate3)
                    .HasColumnType("DATE")
                    .HasColumnName("UDF_DATE3");

                entity.Property(e => e.UdfDate4)
                    .HasColumnType("DATE")
                    .HasColumnName("UDF_DATE4");

                entity.Property(e => e.UdfDate5)
                    .HasColumnType("DATE")
                    .HasColumnName("UDF_DATE5");

                entity.Property(e => e.UdfDecimal1)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("UDF_DECIMAL1");

                entity.Property(e => e.UdfDecimal2)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("UDF_DECIMAL2");

                entity.Property(e => e.UdfDecimal3)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("UDF_DECIMAL3");

                entity.Property(e => e.UdfDecimal4)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("UDF_DECIMAL4");

                entity.Property(e => e.UdfDecimal5)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("UDF_DECIMAL5");

                entity.Property(e => e.UdfNumber1)
                    .HasPrecision(10)
                    .HasColumnName("UDF_NUMBER1");

                entity.Property(e => e.UdfNumber2)
                    .HasPrecision(10)
                    .HasColumnName("UDF_NUMBER2");

                entity.Property(e => e.UdfNumber3)
                    .HasPrecision(10)
                    .HasColumnName("UDF_NUMBER3");

                entity.Property(e => e.UdfNumber4)
                    .HasPrecision(10)
                    .HasColumnName("UDF_NUMBER4");

                entity.Property(e => e.UdfNumber5)
                    .HasPrecision(10)
                    .HasColumnName("UDF_NUMBER5");

                entity.Property(e => e.UdfString1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING1");

                entity.Property(e => e.UdfString2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING2");

                entity.Property(e => e.UdfString3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING3");

                entity.Property(e => e.UdfString4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING4");

                entity.Property(e => e.UdfString5)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDF_STRING5");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");

                entity.Property(e => e.Year)
                    .HasColumnType("NUMBER")
                    .HasColumnName("YEAR");
            });

            modelBuilder.Entity<TempAporReportDuplicate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_APOR_REPORT_DUPLICATES");

                entity.Property(e => e.CandidateId)
                    .HasPrecision(10)
                    .HasColumnName("CANDIDATE_ID");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");
            });

            modelBuilder.Entity<TempApproversChange>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_APPROVERS_CHANGE");

                entity.Property(e => e.AccountProfessional)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_PROFESSIONAL");

                entity.Property(e => e.AccountProfessionalId)
                    .HasPrecision(10)
                    .HasColumnName("ACCOUNT_PROFESSIONAL_ID");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.Department)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DEPARTMENT");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.NewCcs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NEW_CCS");

                entity.Property(e => e.NewCcsId)
                    .HasPrecision(10)
                    .HasColumnName("NEW_CCS_ID");

                entity.Property(e => e.OldCcs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OLD_CCS");

                entity.Property(e => e.OldCcsId)
                    .HasPrecision(10)
                    .HasColumnName("OLD_CCS_ID");
            });

            modelBuilder.Entity<TempApproversFord>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_APPROVERS_FORD");

                entity.Property(e => e.ApproverType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("APPROVER_TYPE");

                entity.Property(e => e.CdsId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CDS_ID");

                entity.Property(e => e.ContactNumber)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("CONTACT_NUMBER");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIRST_NAME");

                entity.Property(e => e.LastName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LAST_NAME");

                entity.Property(e => e.MailingSymbol)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MAILING_SYMBOL");
            });

            modelBuilder.Entity<TempApproversFord2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_APPROVERS_FORD2");

                entity.Property(e => e.ApproverType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("APPROVER_TYPE");

                entity.Property(e => e.CdsId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CDS_ID");

                entity.Property(e => e.ContactNumber)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("CONTACT_NUMBER");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIRST_NAME");

                entity.Property(e => e.LastName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LAST_NAME");

                entity.Property(e => e.MailingSymbol)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MAILING_SYMBOL");
            });

            modelBuilder.Entity<TempApproversJag>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_APPROVERS_JAG");

                entity.Property(e => e.ApproverType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("APPROVER_TYPE");

                entity.Property(e => e.CdsId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CDS_ID");

                entity.Property(e => e.ContactNumber)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("CONTACT_NUMBER");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIRST_NAME");

                entity.Property(e => e.LastName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LAST_NAME");

                entity.Property(e => e.MailingSymbol)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MAILING_SYMBOL");
            });

            modelBuilder.Entity<TempBid>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_BID");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.BidReceivedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BID_RECEIVED_DATE");

                entity.Property(e => e.CirDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CIR_DATE");

                entity.Property(e => e.CpDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CP_DATE");

                entity.Property(e => e.IvcustDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IVCUST_DATE");

                entity.Property(e => e.IvinternDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IVINTERN_DATE");

                entity.Property(e => e.PrescrDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PRESCR_DATE");

                entity.Property(e => e.RebidDate)
                    .HasColumnType("DATE")
                    .HasColumnName("REBID_DATE");

                entity.Property(e => e.RtcDate)
                    .HasColumnType("DATE")
                    .HasColumnName("RTC_DATE");

                entity.Property(e => e.ScDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SC_DATE");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE");
            });

            modelBuilder.Entity<TempBidBucket>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_BID_BUCKET");

                entity.Property(e => e.AdditionalInfo)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONAL_INFO");

                entity.Property(e => e.Availability)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("AVAILABILITY");

                entity.Property(e => e.BidBucketNumber)
                    .HasPrecision(10)
                    .HasColumnName("BID_BUCKET_NUMBER");

                entity.Property(e => e.BidFaxedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BID_FAXED_DATE");

                entity.Property(e => e.BidReceivedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BID_RECEIVED_DATE");

                entity.Property(e => e.CandRetiredDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CAND_RETIRED_DATE");

                entity.Property(e => e.CandRetiredGrade)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CAND_RETIRED_GRADE");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CustomerRetiree)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_RETIREE");

                entity.Property(e => e.DaysToEligibility)
                    .HasPrecision(3)
                    .HasColumnName("DAYS_TO_ELIGIBILITY");

                entity.Property(e => e.EduPreferred)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EDU_PREFERRED");

                entity.Property(e => e.EduRequired)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EDU_REQUIRED");

                entity.Property(e => e.EligibleUsWorkerFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ELIGIBLE_US_WORKER_FLAG");

                entity.Property(e => e.EmpReleaseReqFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("EMP_RELEASE_REQ_FLAG");

                entity.Property(e => e.ExpPreferred)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EXP_PREFERRED");

                entity.Property(e => e.ExpRequired)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EXP_REQUIRED");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("FIRST_NAME");

                entity.Property(e => e.InterviewAvailabilityDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INTERVIEW_AVAILABILITY_DATE");

                entity.Property(e => e.InterviewCompletedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("INTERVIEW_COMPLETED_DATE");

                entity.Property(e => e.InterviewExpense)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("INTERVIEW_EXPENSE");

                entity.Property(e => e.InterviewNotes)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("INTERVIEW_NOTES");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.LastName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LAST_NAME");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.MiddleInitial)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("MIDDLE_INITIAL");

                entity.Property(e => e.Nationality)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NATIONALITY");

                entity.Property(e => e.NoSsnReason)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NO_SSN_REASON");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OriginalRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ORIGINAL_RATE");

                entity.Property(e => e.OtPremiumRequiredFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("OT_PREMIUM_REQUIRED_FLAG");

                entity.Property(e => e.PhoneInterviewOnlyFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PHONE_INTERVIEW_ONLY_FLAG");

                entity.Property(e => e.PreapprovedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PREAPPROVED_FLAG");

                entity.Property(e => e.PrevCustPositionEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PREV_CUST_POSITION_END_DATE");

                entity.Property(e => e.PrevCustPositionFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PREV_CUST_POSITION_FLAG");

                entity.Property(e => e.PrevCustPositionType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("PREV_CUST_POSITION_TYPE");

                entity.Property(e => e.PrevCustomerManagers)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("PREV_CUSTOMER_MANAGERS");

                entity.Property(e => e.RateOverTargetFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RATE_OVER_TARGET_FLAG");

                entity.Property(e => e.RecruiterName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RECRUITER_NAME");

                entity.Property(e => e.RecruiterPhone)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("RECRUITER_PHONE");

                entity.Property(e => e.RelocationExpense)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("RELOCATION_EXPENSE");

                entity.Property(e => e.ResumeComments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("RESUME_COMMENTS");

                entity.Property(e => e.ResumePath)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("RESUME_PATH");

                entity.Property(e => e.ResumeReviewedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RESUME_REVIEWED_FLAG");

                entity.Property(e => e.SkillsPreferred)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SKILLS_PREFERRED");

                entity.Property(e => e.SkillsRequired)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SKILLS_REQUIRED");

                entity.Property(e => e.Ssn)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("SSN");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.TransferViolationFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TRANSFER_VIOLATION_FLAG");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.Udf5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF5");

                entity.Property(e => e.Udf6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF6");

                entity.Property(e => e.WorkPermitFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("WORK_PERMIT_FLAG");
            });

            modelBuilder.Entity<TempCcMap>(entity =>
            {
                entity.HasKey(e => new { e.Unit, e.Opsloc, e.Dept });

                entity.ToTable("TEMP_CC_MAP");

                entity.Property(e => e.Unit)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");

                entity.Property(e => e.Opsloc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OPSLOC");

                entity.Property(e => e.Dept)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DEPT");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CurrentAccountManager)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENT_ACCOUNT_MANAGER");

                entity.Property(e => e.CurrentStaffingSpecialist)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENT_STAFFING_SPECIALIST");

                entity.Property(e => e.NewAccountManager)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NEW_ACCOUNT_MANAGER");

                entity.Property(e => e.NewAccountManagerId)
                    .HasPrecision(10)
                    .HasColumnName("NEW_ACCOUNT_MANAGER_ID");

                entity.Property(e => e.NewStaffingSpecialist)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NEW_STAFFING_SPECIALIST");

                entity.Property(e => e.NewStaffingSpecialistId)
                    .HasPrecision(10)
                    .HasColumnName("NEW_STAFFING_SPECIALIST_ID");
            });

            modelBuilder.Entity<TempCostCentersUk>(entity =>
            {
                entity.HasKey(e => e.CostCenter);

                entity.ToTable("TEMP_COST_CENTERS_UK");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.AccountManagerId)
                    .HasPrecision(10)
                    .HasColumnName("ACCOUNT_MANAGER_ID");

                entity.Property(e => e.BackgroundVerificationFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BACKGROUND_VERIFICATION_FLAG");

                entity.Property(e => e.DepartmentId)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DEPARTMENT_ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_CODE");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.ReqDeveloperId)
                    .HasPrecision(10)
                    .HasColumnName("REQ_DEVELOPER_ID");

                entity.Property(e => e.StaffingSpecialistId)
                    .HasPrecision(10)
                    .HasColumnName("STAFFING_SPECIALIST_ID");
            });

            modelBuilder.Entity<TempCostcenterAmendment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_COSTCENTER_AMENDMENT");

                entity.Property(e => e.CandidateId)
                    .HasPrecision(10)
                    .HasColumnName("CANDIDATE_ID");

                entity.Property(e => e.CandidateName)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_NAME");

                entity.Property(e => e.NewCc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NEW_CC");

                entity.Property(e => e.NewWo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NEW_WO");

                entity.Property(e => e.OldCc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OLD_CC");

                entity.Property(e => e.OldWo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("OLD_WO");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.ProcessedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PROCESSED_FLAG");
            });

            modelBuilder.Entity<TempCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_COUNT");

                entity.Property(e => e.DateRun)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE_RUN");

                entity.Property(e => e.SuccessCount)
                    .HasPrecision(10)
                    .HasColumnName("SUCCESS_COUNT");
            });

            modelBuilder.Entity<TempCustomerSetting>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_CUSTOMER_SETTING");

                entity.Property(e => e.SettingCategory)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("SETTING_CATEGORY");

                entity.Property(e => e.SettingName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SETTING_NAME");

                entity.Property(e => e.SettingValue)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SETTING_VALUE");
            });

            modelBuilder.Entity<TempDept>(entity =>
            {
                entity.HasKey(e => e.Depts)
                    .HasName("TPK_DEPTNO");

                entity.ToTable("TEMP_DEPTS");

                entity.Property(e => e.Depts)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DEPTS");
            });

            modelBuilder.Entity<TempDivRemap>(entity =>
            {
                entity.HasKey(e => e.DivCode)
                    .HasName("T_PK_DIV_CODE");

                entity.ToTable("TEMP_DIV_REMAP");

                entity.Property(e => e.DivCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIV_CODE");

                entity.Property(e => e.DeleteFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DELETE_FLAG");

                entity.Property(e => e.MergeToCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("MERGE_TO_CODE");
            });

            modelBuilder.Entity<TempDivisionUpdate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_DIVISION_UPDATE");

                entity.Property(e => e.AporMonth)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("APOR_MONTH");

                entity.Property(e => e.AporYear)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("APOR_YEAR");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CostCenterUpdated)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER_UPDATED");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.NewDivisionCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NEW_DIVISION_CODE");

                entity.Property(e => e.NewDivisionDescription)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("NEW_DIVISION_DESCRIPTION");

                entity.Property(e => e.OldDivisionCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("OLD_DIVISION_CODE");

                entity.Property(e => e.OrdersUpdated)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ORDERS_UPDATED");

                entity.Property(e => e.Processed)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PROCESSED");
            });

            modelBuilder.Entity<TempDmcReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_DMC_REPORT");

                entity.Property(e => e.AmountBilled)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("AMOUNT_BILLED");

                entity.Property(e => e.AmountBilledActual)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("AMOUNT_BILLED_ACTUAL");

                entity.Property(e => e.AmountBilledExpense)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("AMOUNT_BILLED_EXPENSE");

                entity.Property(e => e.AmountPaid)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("AMOUNT_PAID");

                entity.Property(e => e.BandingRate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("BANDING_RATE");

                entity.Property(e => e.Bill1Hours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("BILL1_HOURS");

                entity.Property(e => e.Bill1Rate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("BILL1_RATE");

                entity.Property(e => e.Bill2Hours)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("BILL2_HOURS");

                entity.Property(e => e.Bill2Rate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("BILL2_RATE");

                entity.Property(e => e.CandFileId)
                    .HasPrecision(8)
                    .HasColumnName("CAND_FILE_ID");

                entity.Property(e => e.CandFirstName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CAND_FIRST_NAME");

                entity.Property(e => e.CandLastName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CAND_LAST_NAME");

                entity.Property(e => e.ContractEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CONTRACT_END_DATE");

                entity.Property(e => e.ContractStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CONTRACT_START_DATE");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CycleProcessed)
                    .HasPrecision(6)
                    .HasColumnName("CYCLE_PROCESSED");

                entity.Property(e => e.DetailLineNumber)
                    .HasPrecision(3)
                    .HasColumnName("DETAIL_LINE_NUMBER");

                entity.Property(e => e.EarningsCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("EARNINGS_CODE");

                entity.Property(e => e.Fee)
                    .HasColumnType("NUMBER(6,2)")
                    .HasColumnName("FEE");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.Hours)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("HOURS");

                entity.Property(e => e.InvoiceNumber)
                    .HasColumnType("NUMBER(22,10)")
                    .HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("JOB_TITLE");

                entity.Property(e => e.LastTsReceivedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_TS_RECEIVED_DATE");

                entity.Property(e => e.MaxOtRate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("MAX_OT_RATE");

                entity.Property(e => e.MaxPrRate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("MAX_PR_RATE");

                entity.Property(e => e.MaxStRate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("MAX_ST_RATE");

                entity.Property(e => e.MiscRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MISC_REF");

                entity.Property(e => e.Month)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MONTH");

                entity.Property(e => e.NteAmount)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("NTE_AMOUNT");

                entity.Property(e => e.OrderNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.Ot2Hours)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("OT2_HOURS");

                entity.Property(e => e.Ot2Rate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("OT2_RATE");

                entity.Property(e => e.OtHours)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("OT_HOURS");

                entity.Property(e => e.OtRate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("OT_RATE");

                entity.Property(e => e.PoNum)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUM");

                entity.Property(e => e.PrHours)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("PR_HOURS");

                entity.Property(e => e.PrRate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("PR_RATE");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RateAp)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("RATE_AP");

                entity.Property(e => e.RateAr)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("RATE_AR");

                entity.Property(e => e.RgHours)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("RG_HOURS");

                entity.Property(e => e.SeqNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SEQ_NO");

                entity.Property(e => e.Shift)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SHIFT");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.SubDivision)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUB_DIVISION");

                entity.Property(e => e.SubLedger)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUB_LEDGER");

                entity.Property(e => e.SupervisorFirstName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_FIRST_NAME");

                entity.Property(e => e.SupervisorLastName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_LAST_NAME");

                entity.Property(e => e.SupervisorLogin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_LOGIN");

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.TsEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TS_END_DATE");

                entity.Property(e => e.Year)
                    .HasPrecision(4)
                    .HasColumnName("YEAR");
            });

            modelBuilder.Entity<TempDmcReportVerify>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_DMC_REPORT_VERIFY");

                entity.HasIndex(e => new { e.TimesheetNumber, e.TimesheetRevision, e.DetailLineNumber }, "T_DMC_PK");

                entity.Property(e => e.CandFileId)
                    .HasPrecision(8)
                    .HasColumnName("CAND_FILE_ID");

                entity.Property(e => e.DetailLineNumber)
                    .HasPrecision(3)
                    .HasColumnName("DETAIL_LINE_NUMBER");

                entity.Property(e => e.PoNum)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUM");

                entity.Property(e => e.ProcessedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PROCESSED_FLAG");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.TsEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TS_END_DATE");
            });

            modelBuilder.Entity<TempEcrReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_ECR_REPORT");

                entity.Property(e => e.AccountCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_CODE");

                entity.Property(e => e.CandidateId)
                    .HasPrecision(10)
                    .HasColumnName("CANDIDATE_ID");

                entity.Property(e => e.CurrencyCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY_CODE");

                entity.Property(e => e.CustomerId)
                    .HasPrecision(10)
                    .HasColumnName("CUSTOMER_ID");

                entity.Property(e => e.Department)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DEPARTMENT");

                entity.Property(e => e.EstAnnualExpenditure)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("EST_ANNUAL_EXPENDITURE");

                entity.Property(e => e.GlobalCandidateCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("GLOBAL_CANDIDATE_CODE");

                entity.Property(e => e.GlobalSupplierCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("GLOBAL_SUPPLIER_CODE");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("JOB_TITLE");

                entity.Property(e => e.MaxWeekEndingDate)
                    .HasColumnType("DATE")
                    .HasColumnName("MAX_WEEK_ENDING_DATE");

                entity.Property(e => e.MtdAmountBilled)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("MTD_AMOUNT_BILLED");

                entity.Property(e => e.MtdExpensesBilled)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("MTD_EXPENSES_BILLED");

                entity.Property(e => e.MtdOvertimeHours)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("MTD_OVERTIME_HOURS");

                entity.Property(e => e.MtdPremiumHours)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("MTD_PREMIUM_HOURS");

                entity.Property(e => e.MtdRegularHours)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("MTD_REGULAR_HOURS");

                entity.Property(e => e.MtdTravelHours)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("MTD_TRAVEL_HOURS");

                entity.Property(e => e.Opnsloc)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("OPNSLOC");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OvertimeRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("OVERTIME_RATE");

                entity.Property(e => e.PoEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PO_END_DATE");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PO_START_DATE");

                entity.Property(e => e.PremiumRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("PREMIUM_RATE");

                entity.Property(e => e.RegularRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("REGULAR_RATE");

                entity.Property(e => e.SalaryGrade)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SALARY_GRADE");

                entity.Property(e => e.SalaryGradeMaxRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SALARY_GRADE_MAX_RATE");

                entity.Property(e => e.SupervisorId)
                    .HasPrecision(10)
                    .HasColumnName("SUPERVISOR_ID");

                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_CODE");

                entity.Property(e => e.TotalNteAmount)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("TOTAL_NTE_AMOUNT");

                entity.Property(e => e.YearMonth)
                    .HasPrecision(6)
                    .HasColumnName("YEAR_MONTH");

                entity.Property(e => e.YtdAmountBilled)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("YTD_AMOUNT_BILLED");

                entity.Property(e => e.YtdExpensesBilled)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("YTD_EXPENSES_BILLED");

                entity.Property(e => e.YtdOvertimeHours)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("YTD_OVERTIME_HOURS");

                entity.Property(e => e.YtdPremiumHours)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("YTD_PREMIUM_HOURS");

                entity.Property(e => e.YtdRegularHours)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("YTD_REGULAR_HOURS");

                entity.Property(e => e.YtdTravelHours)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("YTD_TRAVEL_HOURS");
            });

            modelBuilder.Entity<TempFmccPo>(entity =>
            {
                entity.HasKey(e => new { e.PoNumber, e.EndDate })
                    .HasName("TPK_FMCC_PO");

                entity.ToTable("TEMP_FMCC_POS");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.CurrentRate)
                    .HasColumnType("NUMBER(6,2)")
                    .HasColumnName("CURRENT_RATE");

                entity.Property(e => e.NewRate)
                    .HasColumnType("NUMBER(6,2)")
                    .HasColumnName("NEW_RATE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");
            });

            modelBuilder.Entity<TempGrApor>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_GR_APOR");

                entity.Property(e => e.AccountCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_CODE");

                entity.Property(e => e.Active)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE");

                entity.Property(e => e.CandidateId)
                    .HasPrecision(10)
                    .HasColumnName("CANDIDATE_ID");

                entity.Property(e => e.CurrencyCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY_CODE");

                entity.Property(e => e.CustomerId)
                    .HasPrecision(10)
                    .HasColumnName("CUSTOMER_ID");

                entity.Property(e => e.Department)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DEPARTMENT");

                entity.Property(e => e.GlobalCandidateCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("GLOBAL_CANDIDATE_CODE");

                entity.Property(e => e.GlobalLocationCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GLOBAL_LOCATION_CODE");

                entity.Property(e => e.GlobalSupplierCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("GLOBAL_SUPPLIER_CODE");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("JOB_TITLE");

                entity.Property(e => e.MaxEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("MAX_END_DATE");

                entity.Property(e => e.MinStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("MIN_START_DATE");

                entity.Property(e => e.NteAmount)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("NTE_AMOUNT");

                entity.Property(e => e.OccupationCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("OCCUPATION_CODE");

                entity.Property(e => e.Opnsloc)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("OPNSLOC");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OvertimeRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("OVERTIME_RATE");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.PremiumRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("PREMIUM_RATE");

                entity.Property(e => e.RegularRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("REGULAR_RATE");

                entity.Property(e => e.SalaryGrade)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SALARY_GRADE");

                entity.Property(e => e.SupervisorId)
                    .HasPrecision(10)
                    .HasColumnName("SUPERVISOR_ID");

                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_CODE");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");

                entity.Property(e => e.YearMonth)
                    .HasPrecision(6)
                    .HasColumnName("YEAR_MONTH");
            });

            modelBuilder.Entity<TempGrDcr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_GR_DCR");

                entity.Property(e => e.AmountBilled)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("AMOUNT_BILLED");

                entity.Property(e => e.AmountBilledActual)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("AMOUNT_BILLED_ACTUAL");

                entity.Property(e => e.AmountPaid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AMOUNT_PAID");

                entity.Property(e => e.CanFirstname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CAN_FIRSTNAME");

                entity.Property(e => e.CanLastname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CAN_LASTNAME");

                entity.Property(e => e.CandFileId)
                    .HasPrecision(10)
                    .HasColumnName("CAND_FILE_ID");

                entity.Property(e => e.ContractEdate)
                    .HasColumnType("DATE")
                    .HasColumnName("CONTRACT_EDATE");

                entity.Property(e => e.ContractSdate)
                    .HasColumnType("DATE")
                    .HasColumnName("CONTRACT_SDATE");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CycleProcessed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CYCLE_PROCESSED");

                entity.Property(e => e.EarningsCode)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("EARNINGS_CODE")
                    .IsFixedLength(true);

                entity.Property(e => e.ExpensesBilled)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("EXPENSES_BILLED");

                entity.Property(e => e.Fee)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FEE");

                entity.Property(e => e.Hours)
                    .HasColumnType("NUMBER")
                    .HasColumnName("HOURS");

                entity.Property(e => e.InvoiceNumber)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("JOB_TITLE");

                entity.Property(e => e.LastTsReceivedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_TS_RECEIVED_DATE");

                entity.Property(e => e.MaxOtRate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MAX_OT_RATE");

                entity.Property(e => e.MaxPrRate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MAX_PR_RATE");

                entity.Property(e => e.MaxStRate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MAX_ST_RATE");

                entity.Property(e => e.MiscRef)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MISC_REF");

                entity.Property(e => e.Month)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MONTH");

                entity.Property(e => e.OtHours)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("OT_HOURS");

                entity.Property(e => e.OtRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("OT_RATE");

                entity.Property(e => e.PoNum)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUM");

                entity.Property(e => e.PrHours)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("PR_HOURS");

                entity.Property(e => e.RateAp)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RATE_AP");

                entity.Property(e => e.RateAr)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("RATE_AR");

                entity.Property(e => e.RgHours)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("RG_HOURS");

                entity.Property(e => e.SeqNo)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SEQ_NO");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.SupFirstname)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("SUP_FIRSTNAME");

                entity.Property(e => e.SupId)
                    .HasPrecision(10)
                    .HasColumnName("SUP_ID");

                entity.Property(e => e.SupLastname)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("SUP_LASTNAME");

                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_CODE");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");

                entity.Property(e => e.WeekEndingDate)
                    .HasColumnType("DATE")
                    .HasColumnName("WEEK_ENDING_DATE");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");

                entity.Property(e => e.Year)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("YEAR");
            });

            modelBuilder.Entity<TempItPosRemap>(entity =>
            {
                entity.HasKey(e => new { e.OrderNumber, e.PoNumber })
                    .HasName("TPK_IT_ORDPO");

                entity.ToTable("TEMP_IT_POS_REMAP");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.NewProductCode)
                    .HasPrecision(10)
                    .HasColumnName("NEW_PRODUCT_CODE");

                entity.Property(e => e.OldProductCode)
                    .HasPrecision(10)
                    .HasColumnName("OLD_PRODUCT_CODE");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.ProcessedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PROCESSED_FLAG");
            });

            modelBuilder.Entity<TempLocRegionRemap>(entity =>
            {
                entity.HasKey(e => e.LocationCode)
                    .HasName("PK_TEMP_LOC_CODE");

                entity.ToTable("TEMP_LOC_REGION_REMAP");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.NewRegionCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NEW_REGION_CODE");

                entity.Property(e => e.OldRegionCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("OLD_REGION_CODE");
            });

            modelBuilder.Entity<TempLocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_LOCATION");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationId)
                    .HasPrecision(10)
                    .HasColumnName("LOCATION_ID");
            });

            modelBuilder.Entity<TempMultiplier>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_MULTIPLIERS");

                entity.Property(e => e.DisplayOrder)
                    .HasPrecision(3)
                    .HasColumnName("DISPLAY_ORDER");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EFFECTIVE_DATE");

                entity.Property(e => e.IsSelectableFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");

                entity.Property(e => e.MultiplierAllowedFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MULTIPLIER_ALLOWED_FLAG");

                entity.Property(e => e.MultiplierId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MULTIPLIER_ID");

                entity.Property(e => e.MultiplierType)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("MULTIPLIER_TYPE");

                entity.Property(e => e.MultiplierValue)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("MULTIPLIER_VALUE");

                entity.Property(e => e.OrderType)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");
            });

            modelBuilder.Entity<TempNavAuthLevel>(entity =>
            {
                entity.HasKey(e => e.AuthLevel);

                entity.ToTable("TEMP_NAV_AUTH_LEVELS");

                entity.Property(e => e.AuthLevel)
                    .HasPrecision(18)
                    .ValueGeneratedNever()
                    .HasColumnName("AUTH_LEVEL");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");
            });

            modelBuilder.Entity<TempNavMainMenu>(entity =>
            {
                entity.HasKey(e => e.GroupId);

                entity.ToTable("TEMP_NAV_MAIN_MENU");

                entity.Property(e => e.GroupId)
                    .HasPrecision(18)
                    .ValueGeneratedNever()
                    .HasColumnName("GROUP_ID");

                entity.Property(e => e.DefaultPage)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DEFAULT_PAGE");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("GROUP_NAME");

                entity.Property(e => e.HImageId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("H_IMAGE_ID");

                entity.Property(e => e.ImageId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("IMAGE_ID");
            });

            modelBuilder.Entity<TempNavPageAccess>(entity =>
            {
                entity.HasKey(e => new { e.PagePath, e.AuthLevel });

                entity.ToTable("TEMP_NAV_PAGE_ACCESS");

                entity.Property(e => e.PagePath)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PAGE_PATH");

                entity.Property(e => e.AuthLevel)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("AUTH_LEVEL");
            });

            modelBuilder.Entity<TempNavSubMenu>(entity =>
            {
                entity.HasKey(e => e.PageId);

                entity.ToTable("TEMP_NAV_SUB_MENU");

                entity.Property(e => e.PageId)
                    .HasPrecision(18)
                    .ValueGeneratedNever()
                    .HasColumnName("PAGE_ID");

                entity.Property(e => e.DisplayOrder)
                    .HasPrecision(18)
                    .HasColumnName("DISPLAY_ORDER");

                entity.Property(e => e.GroupId)
                    .HasPrecision(18)
                    .HasColumnName("GROUP_ID");

                entity.Property(e => e.LinkName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LINK_NAME");

                entity.Property(e => e.PagePath)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PAGE_PATH");
            });

            modelBuilder.Entity<TempPo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_PO");

                entity.Property(e => e.ApprovalStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("APPROVAL_STATUS");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CustomerFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("CUSTOMER_FEE");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.LocationCode)
                    .HasPrecision(10)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNte)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("PO_NTE");

                entity.Property(e => e.PoNumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.PoStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PO_STATUS");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RequisitionerId)
                    .HasPrecision(10)
                    .HasColumnName("REQUISITIONER_ID");

                entity.Property(e => e.RrFactor)
                    .HasColumnType("NUMBER(6,2)")
                    .HasColumnName("RR_FACTOR");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("SUB_ISSUANCE");

                entity.Property(e => e.SupplierFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_FEE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.TerminationReasonCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TERMINATION_REASON_CODE");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.Udf5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF5");

                entity.Property(e => e.Udf6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF6");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");
            });

            modelBuilder.Entity<TempPo12feb>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_PO12FEB");

                entity.Property(e => e.ApprovalStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("APPROVAL_STATUS");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CustomerFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("CUSTOMER_FEE");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.LocationCode)
                    .HasPrecision(10)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNte)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("PO_NTE");

                entity.Property(e => e.PoNumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.PoStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PO_STATUS");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RequisitionerId)
                    .HasPrecision(10)
                    .HasColumnName("REQUISITIONER_ID");

                entity.Property(e => e.RrFactor)
                    .HasColumnType("NUMBER(6,2)")
                    .HasColumnName("RR_FACTOR");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("SUB_ISSUANCE");

                entity.Property(e => e.SupplierFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_FEE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.TerminationReasonCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TERMINATION_REASON_CODE");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.Udf5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF5");

                entity.Property(e => e.Udf6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF6");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");
            });

            modelBuilder.Entity<TempPo1jun2021>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_PO_1JUN2021");

                entity.Property(e => e.ApprovalStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("APPROVAL_STATUS");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CustomerFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("CUSTOMER_FEE");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.LocationCode)
                    .HasPrecision(10)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNte)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("PO_NTE");

                entity.Property(e => e.PoNumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.PoStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PO_STATUS");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RequisitionerId)
                    .HasPrecision(10)
                    .HasColumnName("REQUISITIONER_ID");

                entity.Property(e => e.RrFactor)
                    .HasColumnType("NUMBER(6,2)")
                    .HasColumnName("RR_FACTOR");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("SUB_ISSUANCE");

                entity.Property(e => e.SupplierFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_FEE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.TerminationReasonCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TERMINATION_REASON_CODE");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.Udf5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF5");

                entity.Property(e => e.Udf6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF6");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");
            });

            modelBuilder.Entity<TempPohistory1jun2021>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_POHISTORY_1JUN2021");

                entity.Property(e => e.ApprovalStatus)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("APPROVAL_STATUS");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CostCenter)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CustomerFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("CUSTOMER_FEE");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.HistoryId)
                    .HasPrecision(10)
                    .HasColumnName("HISTORY_ID");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.LocationCode)
                    .HasPrecision(10)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNte)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("PO_NTE");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.PoStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PO_STATUS");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RequisitionerId)
                    .HasPrecision(10)
                    .HasColumnName("REQUISITIONER_ID");

                entity.Property(e => e.RrFactor)
                    .HasColumnType("NUMBER(6,2)")
                    .HasColumnName("RR_FACTOR");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("SUB_ISSUANCE");

                entity.Property(e => e.SupplierFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_FEE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.TerminationReasonCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TERMINATION_REASON_CODE");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.Udf5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF5");

                entity.Property(e => e.Udf6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF6");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");
            });

            modelBuilder.Entity<TempProductCode>(entity =>
            {
                entity.HasKey(e => e.NewProductCode)
                    .HasName("PK_TT1");

                entity.ToTable("TEMP_PRODUCT_CODES");

                entity.Property(e => e.NewProductCode)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("NEW_PRODUCT_CODE");

                entity.Property(e => e.Az02)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("AZ02");

                entity.Property(e => e.Mi01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("MI01");

                entity.Property(e => e.NewBillingGroup)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NEW_BILLING_GROUP");

                entity.Property(e => e.NewGrade)
                    .HasPrecision(10)
                    .HasColumnName("NEW_GRADE");

                entity.Property(e => e.PrimaryDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PRIMARY_DESC");

                entity.Property(e => e.SecondaryDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SECONDARY_DESC");
            });

            modelBuilder.Entity<TempProductCodesRemap>(entity =>
            {
                entity.HasKey(e => e.NewProductCode)
                    .HasName("PK_TEMP_PRODUCT_CODE");

                entity.ToTable("TEMP_PRODUCT_CODES_REMAP");

                entity.Property(e => e.NewProductCode)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("NEW_PRODUCT_CODE");

                entity.Property(e => e.BillingGroup)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_GROUP");

                entity.Property(e => e.OldProductCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("OLD_PRODUCT_CODE");

                entity.Property(e => e.RefGrade)
                    .HasPrecision(10)
                    .HasColumnName("REF_GRADE");
            });

            modelBuilder.Entity<TempProductCodesRemapAd>(entity =>
            {
                entity.HasKey(e => e.NewProductCode)
                    .HasName("PK_TEMP_PCODE_ADS");

                entity.ToTable("TEMP_PRODUCT_CODES_REMAP_ADS");

                entity.Property(e => e.NewProductCode)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("NEW_PRODUCT_CODE");

                entity.Property(e => e.BillingGroup)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_GROUP");

                entity.Property(e => e.OldProductCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("OLD_PRODUCT_CODE");

                entity.Property(e => e.RefGrade)
                    .HasPrecision(10)
                    .HasColumnName("REF_GRADE");
            });

            modelBuilder.Entity<TempProductCodesUsford>(entity =>
            {
                entity.HasKey(e => e.NewProductCode)
                    .HasName("PK_T1");

                entity.ToTable("TEMP_PRODUCT_CODES_USFORD");

                entity.Property(e => e.NewProductCode)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("NEW_PRODUCT_CODE");

                entity.Property(e => e.Ak01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("AK01");

                entity.Property(e => e.Al01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("AL01");

                entity.Property(e => e.Az01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("AZ01");

                entity.Property(e => e.Az02)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("AZ02");

                entity.Property(e => e.Ca01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("CA01");

                entity.Property(e => e.Co01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("CO01");

                entity.Property(e => e.Ct01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("CT01");

                entity.Property(e => e.Fl01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("FL01");

                entity.Property(e => e.Ga01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("GA01");

                entity.Property(e => e.Hi01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("HI01");

                entity.Property(e => e.Il01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("IL01");

                entity.Property(e => e.In01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("IN01");

                entity.Property(e => e.Ks01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("KS01");

                entity.Property(e => e.Ky01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("KY01");

                entity.Property(e => e.La01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("LA01");

                entity.Property(e => e.Ma01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("MA01");

                entity.Property(e => e.Md01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("MD01");

                entity.Property(e => e.Mi01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("MI01");

                entity.Property(e => e.Mn01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("MN01");

                entity.Property(e => e.Mo01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("MO01");

                entity.Property(e => e.Nc01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("NC01");

                entity.Property(e => e.NewBillingGroup)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NEW_BILLING_GROUP");

                entity.Property(e => e.NewTitle)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NEW_TITLE");

                entity.Property(e => e.Nj01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("NJ01");

                entity.Property(e => e.Nj02)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("NJ02");

                entity.Property(e => e.Nv01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("NV01");

                entity.Property(e => e.Ny01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("NY01");

                entity.Property(e => e.Oh01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("OH01");

                entity.Property(e => e.Ok01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("OK01");

                entity.Property(e => e.OldBillingGroup)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OLD_BILLING_GROUP");

                entity.Property(e => e.OldGrade)
                    .HasPrecision(10)
                    .HasColumnName("OLD_GRADE");

                entity.Property(e => e.OldProductCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("OLD_PRODUCT_CODE");

                entity.Property(e => e.OldTitle)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OLD_TITLE");

                entity.Property(e => e.Pa01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("PA01");

                entity.Property(e => e.PrimaryDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PRIMARY_DESC");

                entity.Property(e => e.Sc01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SC01");

                entity.Property(e => e.SecondaryDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SECONDARY_DESC");

                entity.Property(e => e.Tn01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TN01");

                entity.Property(e => e.Tn02)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TN02");

                entity.Property(e => e.Tx01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TX01");

                entity.Property(e => e.Va01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("VA01");

                entity.Property(e => e.Wa01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("WA01");
            });

            modelBuilder.Entity<TempProductCodesUsfordOld>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_PRODUCT_CODES_USFORD_OLD");

                entity.Property(e => e.Ak01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("AK01");

                entity.Property(e => e.Al01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("AL01");

                entity.Property(e => e.Az01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("AZ01");

                entity.Property(e => e.Az02)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("AZ02");

                entity.Property(e => e.Ca01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("CA01");

                entity.Property(e => e.Co01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("CO01");

                entity.Property(e => e.Ct01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("CT01");

                entity.Property(e => e.Fl01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("FL01");

                entity.Property(e => e.Ga01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("GA01");

                entity.Property(e => e.Hi01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("HI01");

                entity.Property(e => e.Il01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("IL01");

                entity.Property(e => e.In01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("IN01");

                entity.Property(e => e.Ks01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("KS01");

                entity.Property(e => e.Ky01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("KY01");

                entity.Property(e => e.La01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("LA01");

                entity.Property(e => e.Ma01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("MA01");

                entity.Property(e => e.Md01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("MD01");

                entity.Property(e => e.Mi01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("MI01");

                entity.Property(e => e.Mn01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("MN01");

                entity.Property(e => e.Mo01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("MO01");

                entity.Property(e => e.Nc01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("NC01");

                entity.Property(e => e.NewBillingGroup)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NEW_BILLING_GROUP");

                entity.Property(e => e.NewProductCode)
                    .HasPrecision(10)
                    .HasColumnName("NEW_PRODUCT_CODE");

                entity.Property(e => e.NewTitle)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NEW_TITLE");

                entity.Property(e => e.Nj01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("NJ01");

                entity.Property(e => e.Nj02)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("NJ02");

                entity.Property(e => e.Nv01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("NV01");

                entity.Property(e => e.Ny01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("NY01");

                entity.Property(e => e.Oh01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("OH01");

                entity.Property(e => e.Ok01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("OK01");

                entity.Property(e => e.OldBillingGroup)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OLD_BILLING_GROUP");

                entity.Property(e => e.OldGrade)
                    .HasPrecision(10)
                    .HasColumnName("OLD_GRADE");

                entity.Property(e => e.OldProductCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("OLD_PRODUCT_CODE");

                entity.Property(e => e.OldTitle)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OLD_TITLE");

                entity.Property(e => e.Pa01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("PA01");

                entity.Property(e => e.PrimaryDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PRIMARY_DESC");

                entity.Property(e => e.Sc01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SC01");

                entity.Property(e => e.SecondaryDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SECONDARY_DESC");

                entity.Property(e => e.Tn01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TN01");

                entity.Property(e => e.Tn02)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TN02");

                entity.Property(e => e.Tx01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TX01");

                entity.Property(e => e.Va01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("VA01");

                entity.Property(e => e.Wa01)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("WA01");
            });

            modelBuilder.Entity<TempPsPositionAmendment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_PS_POSITION_AMENDMENT");

                entity.Property(e => e.IsUpdated)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_UPDATED")
                    .IsFixedLength(true);

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.PsPositionNumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PS_POSITION_NUMBER");

                entity.Property(e => e.TicketDetail)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TICKET_DETAIL");
            });

            modelBuilder.Entity<TempPurchaseOrder>(entity =>
            {
                entity.HasKey(e => new { e.PoNumber, e.PoRevision, e.PoLineNumber });

                entity.ToTable("TEMP_PURCHASE_ORDERS");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.ApprovalStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("APPROVAL_STATUS");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CustomerFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("CUSTOMER_FEE");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.LocationCode)
                    .HasPrecision(10)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.PoNte)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("PO_NTE");

                entity.Property(e => e.PoStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PO_STATUS");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RequisitionerId)
                    .HasPrecision(10)
                    .HasColumnName("REQUISITIONER_ID");

                entity.Property(e => e.RrFactor)
                    .HasColumnType("NUMBER(6,2)")
                    .HasColumnName("RR_FACTOR");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("SUB_ISSUANCE")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.SupplierFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_FEE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.TerminationReasonCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TERMINATION_REASON_CODE");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.Udf5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF5");

                entity.Property(e => e.Udf6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF6");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");

                entity.HasOne(d => d.ApprovalStatusNavigation)
                    .WithMany(p => p.TempPurchaseOrders)
                    .HasForeignKey(d => d.ApprovalStatus)
                    .HasConstraintName("FK_TEMP_REF_1245_APPROVAL");

                entity.HasOne(d => d.Contractee)
                    .WithMany(p => p.TempPurchaseOrders)
                    .HasForeignKey(d => d.ContracteeId)
                    .HasConstraintName("FK_TEMP_REF_16212_CANDIDAT");

                entity.HasOne(d => d.LocationCodeNavigation)
                    .WithMany(p => p.TempPurchaseOrders)
                    .HasForeignKey(d => d.LocationCode)
                    .HasConstraintName("FK_TEMP_REF_6823_LOCATION");

                entity.HasOne(d => d.OrderTypeNavigation)
                    .WithMany(p => p.TempPurchaseOrders)
                    .HasForeignKey(d => d.OrderType)
                    .HasConstraintName("FK_TEMP_REF_ORDER_ORDER_TY");

                entity.HasOne(d => d.PoStatusNavigation)
                    .WithMany(p => p.TempPurchaseOrders)
                    .HasForeignKey(d => d.PoStatus)
                    .HasConstraintName("FK_TEMP_REF_1242_PO_STATU");

                entity.HasOne(d => d.PositionNumberNavigation)
                    .WithMany(p => p.TempPurchaseOrders)
                    .HasForeignKey(d => d.PositionNumber)
                    .HasConstraintName("FK_TEMP_REF_6811_POSITION");

                entity.HasOne(d => d.ProductCodeNavigation)
                    .WithMany(p => p.TempPurchaseOrders)
                    .HasForeignKey(d => d.ProductCode)
                    .HasConstraintName("FK_TEMP_REF_6817_PRODUCT_");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.TempPurchaseOrders)
                    .HasForeignKey(d => d.SupplierId)
                    .HasConstraintName("FK_TEMP_REF_6795_SUPPLIER");

                entity.HasOne(d => d.TerminationReasonCodeNavigation)
                    .WithMany(p => p.TempPurchaseOrders)
                    .HasForeignKey(d => d.TerminationReasonCode)
                    .HasConstraintName("FK_TEMP_REF_1183_TERMINAT");
            });

            modelBuilder.Entity<TempRateReductionPo>(entity =>
            {
                entity.HasKey(e => e.PoNumber)
                    .HasName("PK_RR_PO");

                entity.ToTable("TEMP_RATE_REDUCTION_POS");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EFFECTIVE_DATE");

                entity.Property(e => e.NewBidRate)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("NEW_BID_RATE");
            });

            modelBuilder.Entity<TempReportingManager>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_REPORTING_MANAGER");

                entity.Property(e => e.CdsId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CDS_ID");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EFFECTIVE_DATE");

                entity.Property(e => e.FileId)
                    .HasColumnType("NUMBER(25)")
                    .HasColumnName("FILE_ID");

                entity.Property(e => e.NewId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NEW_ID");

                entity.Property(e => e.OldId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("OLD_ID");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.ProcessedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PROCESSED_FLAG")
                    .HasDefaultValueSql("'N'")
                    .IsFixedLength(true);

                entity.Property(e => e.SNo)
                    .HasPrecision(10)
                    .HasColumnName("S_NO");
            });

            modelBuilder.Entity<TempSupplier>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_SUPPLIER");

                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_CODE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");
            });

            modelBuilder.Entity<TempSupplierJde>(entity =>
            {
                entity.HasKey(e => e.SupplierCode)
                    .HasName("PK_TEMP_SID");

                entity.ToTable("TEMP_SUPPLIER_JDE");

                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_CODE");

                entity.Property(e => e.JdeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("JDE_CODE");
            });

            modelBuilder.Entity<TempSupplierNewFee>(entity =>
            {
                entity.HasKey(e => e.SupplierId)
                    .HasName("TPK_SF");

                entity.ToTable("TEMP_SUPPLIER_NEW_FEE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EFFECTIVE_DATE");

                entity.Property(e => e.NewFee)
                    .HasColumnType("NUMBER(6,2)")
                    .HasColumnName("NEW_FEE");

                entity.Property(e => e.NoOfPos)
                    .HasPrecision(10)
                    .HasColumnName("NO_OF_POS");

                entity.Property(e => e.OldFee)
                    .HasColumnType("NUMBER(6,2)")
                    .HasColumnName("OLD_FEE");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");
            });

            modelBuilder.Entity<TempT>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_TS");

                entity.Property(e => e.AdjustmentFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ADJUSTMENT_FLAG");

                entity.Property(e => e.BillableType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BILLABLE_TYPE");

                entity.Property(e => e.BreakTime)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("BREAK_TIME");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.ExpenseAmount)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("EXPENSE_AMOUNT");

                entity.Property(e => e.ExpenseDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("EXPENSE_DESCRIPTION");

                entity.Property(e => e.ExpenseType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("EXPENSE_TYPE");

                entity.Property(e => e.Hours)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("HOURS");

                entity.Property(e => e.HoursLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("HOURS_LINE_NUMBER");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.QuitTime)
                    .HasColumnType("DATE")
                    .HasColumnName("QUIT_TIME");

                entity.Property(e => e.Shift)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SHIFT");

                entity.Property(e => e.StartTime)
                    .HasColumnType("DATE")
                    .HasColumnName("START_TIME");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.WorkDate)
                    .HasColumnType("DATE")
                    .HasColumnName("WORK_DATE");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");
            });

            modelBuilder.Entity<TempTRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_T_RATES");

                entity.Property(e => e.BillingGroupCode)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_GROUP_CODE");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EFFECTIVE_DATE");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("REGION_CODE");

                entity.Property(e => e.SupplierTargetRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_TARGET_RATE");

                entity.Property(e => e.TargetRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TARGET_RATE");
            });

            modelBuilder.Entity<TempTable276419>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_TABLE_276419");

                entity.Property(e => e.AvgBrate)
                    .HasColumnType("NUMBER(15,6)")
                    .HasColumnName("AVG_BRATE");

                entity.Property(e => e.AvgTrate)
                    .HasColumnType("NUMBER(15,6)")
                    .HasColumnName("AVG_TRATE");

                entity.Property(e => e.BillingClass)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_CLASS");

                entity.Property(e => e.BillingGrp)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_GRP");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");
            });

            modelBuilder.Entity<TempTalentEiTrack>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_TALENT_EI_TRACK");

                entity.Property(e => e.CandidateId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_ID");

                entity.Property(e => e.Cf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CF1");

                entity.Property(e => e.Cf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CF2");

                entity.Property(e => e.CreatedDate)
                    .HasPrecision(6)
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Issuance)
                    .HasPrecision(5)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.LastUpdatedDate)
                    .HasPrecision(6)
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.Status)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STATUS");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(5)
                    .HasColumnName("SUB_ISSUANCE");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");
            });

            modelBuilder.Entity<TempTalenteifeeupdate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_TALENTEIFEEUPDATE");

                entity.Property(e => e.Enddate)
                    .HasColumnType("DATE")
                    .HasColumnName("ENDDATE");

                entity.Property(e => e.MaxEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("MAX_END_DATE");

                entity.Property(e => e.MinStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("MIN_START_DATE");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNumber1)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PO_STATUS");

                entity.Property(e => e.Ponumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PONUMBER");

                entity.Property(e => e.Postatus1)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("POSTATUS");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.Startdate)
                    .HasColumnType("DATE")
                    .HasColumnName("STARTDATE");

                entity.Property(e => e.Strate1)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STRATE");

                entity.Property(e => e.SupplierFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_FEE");
            });

            modelBuilder.Entity<TempTargetRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_TARGET_RATES");

                entity.Property(e => e.BillingGroupCode)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_GROUP_CODE");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EFFECTIVE_DATE");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("REGION_CODE");

                entity.Property(e => e.SupplierTargetRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_TARGET_RATE");

                entity.Property(e => e.TargetRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TARGET_RATE");
            });

            modelBuilder.Entity<TempTargetRatesCpcUsford>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_TARGET_RATES_CPC_USFORD");

                entity.Property(e => e.BillingGroup)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_GROUP");

                entity.Property(e => e.Grade)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("GRADE");

                entity.Property(e => e.NewRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("NEW_RATE");

                entity.Property(e => e.NewSupplierRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("NEW_SUPPLIER_RATE");

                entity.Property(e => e.OldRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("OLD_RATE");

                entity.Property(e => e.OldSupplierRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("OLD_SUPPLIER_RATE");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RegionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("REGION_CODE");

                entity.Property(e => e.Title)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TITLE");
            });

            modelBuilder.Entity<TempTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_TEST");

                entity.Property(e => e.Address)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.Empno)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EMPNO");

                entity.Property(e => e.Zip)
                    .HasPrecision(5)
                    .HasColumnName("ZIP");
            });

            modelBuilder.Entity<TempTest1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_TEST1");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");
            });

            modelBuilder.Entity<TempTreasonMap>(entity =>
            {
                entity.HasKey(e => e.ReasonId)
                    .HasName("PK_TR_TEMP");

                entity.ToTable("TEMP_TREASON_MAP");

                entity.Property(e => e.ReasonId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("REASON_ID");

                entity.Property(e => e.IsNegative)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("IS_NEGATIVE");

                entity.Property(e => e.NewReason)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NEW_REASON");

                entity.Property(e => e.OldReason)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("OLD_REASON");
            });

            modelBuilder.Entity<TempTsDetails10jun2021>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_TS_DETAILS10JUN2021");

                entity.Property(e => e.AmountBilled)
                    .HasColumnType("NUMBER(25,2)")
                    .HasColumnName("AMOUNT_BILLED");

                entity.Property(e => e.AmountPaid)
                    .HasColumnType("NUMBER(25,2)")
                    .HasColumnName("AMOUNT_PAID");

                entity.Property(e => e.DetailLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("DETAIL_LINE_NUMBER");

                entity.Property(e => e.EarningsCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("EARNINGS_CODE");

                entity.Property(e => e.Hours)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("HOURS");

                entity.Property(e => e.NewRate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("NEW_RATE");

                entity.Property(e => e.OldRate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OLD_RATE");

                entity.Property(e => e.PoNumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PreRrAmountBilled)
                    .HasColumnType("NUMBER(25,2)")
                    .HasColumnName("PRE_RR_AMOUNT_BILLED");

                entity.Property(e => e.PreRrRateAr)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("PRE_RR_RATE_AR");

                entity.Property(e => e.RateAp)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("RATE_AP");

                entity.Property(e => e.RateAr)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("RATE_AR");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.WeekEndingDate)
                    .HasColumnType("DATE")
                    .HasColumnName("WEEK_ENDING_DATE");
            });

            modelBuilder.Entity<TempTsDetails10jun2021A>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_TS_DETAILS10JUN2021_A");

                entity.Property(e => e.AmountBilled)
                    .HasColumnType("NUMBER(25,2)")
                    .HasColumnName("AMOUNT_BILLED");

                entity.Property(e => e.AmountPaid)
                    .HasColumnType("NUMBER(25,2)")
                    .HasColumnName("AMOUNT_PAID");

                entity.Property(e => e.DetailLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("DETAIL_LINE_NUMBER");

                entity.Property(e => e.EarningsCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("EARNINGS_CODE");

                entity.Property(e => e.Hours)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("HOURS");

                entity.Property(e => e.NewRate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("NEW_RATE");

                entity.Property(e => e.OldRate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OLD_RATE");

                entity.Property(e => e.PoNumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PreRrAmountBilled)
                    .HasColumnType("NUMBER(25,2)")
                    .HasColumnName("PRE_RR_AMOUNT_BILLED");

                entity.Property(e => e.PreRrRateAr)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("PRE_RR_RATE_AR");

                entity.Property(e => e.RateAp)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("RATE_AP");

                entity.Property(e => e.RateAr)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("RATE_AR");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.WeekEndingDate)
                    .HasColumnType("DATE")
                    .HasColumnName("WEEK_ENDING_DATE");
            });

            modelBuilder.Entity<TempTsDetails10jun2021B>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_TS_DETAILS10JUN2021_B");

                entity.Property(e => e.AmountBilled)
                    .HasColumnType("NUMBER(25,2)")
                    .HasColumnName("AMOUNT_BILLED");

                entity.Property(e => e.AmountPaid)
                    .HasColumnType("NUMBER(25,2)")
                    .HasColumnName("AMOUNT_PAID");

                entity.Property(e => e.DetailLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("DETAIL_LINE_NUMBER");

                entity.Property(e => e.EarningsCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("EARNINGS_CODE");

                entity.Property(e => e.Hours)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("HOURS");

                entity.Property(e => e.NewRate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("NEW_RATE");

                entity.Property(e => e.OldRate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OLD_RATE");

                entity.Property(e => e.PoNumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PreRrAmountBilled)
                    .HasColumnType("NUMBER(25,2)")
                    .HasColumnName("PRE_RR_AMOUNT_BILLED");

                entity.Property(e => e.PreRrRateAr)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("PRE_RR_RATE_AR");

                entity.Property(e => e.RateAp)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("RATE_AP");

                entity.Property(e => e.RateAr)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("RATE_AR");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.WeekEndingDate)
                    .HasColumnType("DATE")
                    .HasColumnName("WEEK_ENDING_DATE");
            });

            modelBuilder.Entity<TempValidCc>(entity =>
            {
                entity.HasKey(e => new { e.DeptNo, e.Opnsloc, e.Unit })
                    .HasName("PK_OPS_DEPT");

                entity.ToTable("TEMP_VALID_CC");

                entity.Property(e => e.DeptNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DEPT_NO");

                entity.Property(e => e.Opnsloc)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("OPNSLOC");

                entity.Property(e => e.Unit)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DEPT_NAME");
            });

            modelBuilder.Entity<TempWorkOrdersUk>(entity =>
            {
                entity.HasKey(e => new { e.WorkOrderNumber, e.CostCenter })
                    .HasName("PK_TEMP_WORK_ORDERS");

                entity.ToTable("TEMP_WORK_ORDERS_UK");

                entity.Property(e => e.WorkOrderNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORK_ORDER_NUMBER");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.WorkOrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("WORK_ORDER_TYPE");
            });

            modelBuilder.Entity<TempWrongFeePo>(entity =>
            {
                entity.HasKey(e => new { e.PoNumber, e.FileId })
                    .HasName("TPK_WRONG_PO");

                entity.ToTable("TEMP_WRONG_FEE_POS");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.FileId)
                    .HasPrecision(10)
                    .HasColumnName("FILE_ID");

                entity.Property(e => e.CategoryId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CATEGORY_ID");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.OldSupId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("OLD_SUP_ID");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SupFee)
                    .HasColumnType("NUMBER(6,2)")
                    .HasColumnName("SUP_FEE");
            });

            modelBuilder.Entity<TempccTalentFeeFlag>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMPCC_TALENT_FEE_FLAG");

                entity.Property(e => e.AddlFeeAllowed)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ADDL_FEE_ALLOWED");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.LastUpdatedBy)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");
            });

            modelBuilder.Entity<Temptbl>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMPTBL");

                entity.Property(e => e.CompanyId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPANY_ID");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");
            });

            modelBuilder.Entity<TerminationReason>(entity =>
            {
                entity.HasKey(e => e.TerminationReasonCode);

                entity.ToTable("TERMINATION_REASONS");

                entity.Property(e => e.TerminationReasonCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TERMINATION_REASON_CODE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.NegativeFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NEGATIVE_FLAG")
                    .HasDefaultValueSql("'N' ");
            });

            modelBuilder.Entity<TimesheetAdjust>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TIMESHEET_ADJUST");

                entity.Property(e => e.AmountBilled)
                    .HasColumnType("NUMBER(13,2)")
                    .HasColumnName("AMOUNT_BILLED");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(26)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CreatedTime)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_TIME");

                entity.Property(e => e.HourlyRate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("HOURLY_RATE");

                entity.Property(e => e.HoursOrExpenses)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("HOURS_OR_EXPENSES");

                entity.Property(e => e.HoursWorked)
                    .HasColumnType("NUMBER(13,2)")
                    .HasColumnName("HOURS_WORKED");

                entity.Property(e => e.NewInvoiceNumber)
                    .HasPrecision(9)
                    .HasColumnName("NEW_INVOICE_NUMBER");

                entity.Property(e => e.OldInvoiceNumber)
                    .HasPrecision(9)
                    .HasColumnName("OLD_INVOICE_NUMBER");

                entity.Property(e => e.PoEarningsCodeSuffix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("PO_EARNINGS_CODE_SUFFIX");

                entity.Property(e => e.PoNumberEarningsCode)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER_EARNINGS_CODE");

                entity.Property(e => e.SupplierFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_FEE");

                entity.Property(e => e.SupplierJdeId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_JDE_ID");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.WeekEndingDate)
                    .HasColumnType("DATE")
                    .HasColumnName("WEEK_ENDING_DATE");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");
            });

            modelBuilder.Entity<TimesheetDetail>(entity =>
            {
                entity.HasKey(e => new { e.TimesheetNumber, e.TimesheetRevision, e.DetailLineNumber });

                entity.ToTable("TIMESHEET_DETAILS");

                entity.HasIndex(e => new { e.AisCode, e.CostCenter }, "IDX_TD_AIS_CC");

                entity.HasIndex(e => e.EarningsCode, "IDX_TD_ECODE");

                entity.HasIndex(e => e.Shift, "IDX_TD_SHIFT");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.DetailLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("DETAIL_LINE_NUMBER");

                entity.Property(e => e.AdjustedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ADJUSTED_FLAG");

                entity.Property(e => e.AisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AIS_CODE");

                entity.Property(e => e.AmountBilled)
                    .HasColumnType("NUMBER(25,2)")
                    .HasColumnName("AMOUNT_BILLED");

                entity.Property(e => e.AmountPaid)
                    .HasColumnType("NUMBER(25,2)")
                    .HasColumnName("AMOUNT_PAID");

                entity.Property(e => e.CheckAmount)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("CHECK_AMOUNT");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.EarningsCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("EARNINGS_CODE");

                entity.Property(e => e.Hours)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("HOURS");

                entity.Property(e => e.PoEarningsCodeSuffix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("PO_EARNINGS_CODE_SUFFIX");

                entity.Property(e => e.PreRrAmountBilled)
                    .HasColumnType("NUMBER(25,2)")
                    .HasColumnName("PRE_RR_AMOUNT_BILLED");

                entity.Property(e => e.PreRrRateAr)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("PRE_RR_RATE_AR");

                entity.Property(e => e.ProjectNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PROJECT_NUMBER");

                entity.Property(e => e.RateAp)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("RATE_AP");

                entity.Property(e => e.RateAr)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("RATE_AR");

                entity.Property(e => e.Shift)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SHIFT");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");
            });

            modelBuilder.Entity<TimesheetDetails10jun2021>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TIMESHEET_DETAILS_10JUN2021");

                entity.Property(e => e.AdjustedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ADJUSTED_FLAG");

                entity.Property(e => e.AisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AIS_CODE");

                entity.Property(e => e.AmountBilled)
                    .HasColumnType("NUMBER(25,2)")
                    .HasColumnName("AMOUNT_BILLED");

                entity.Property(e => e.AmountPaid)
                    .HasColumnType("NUMBER(25,2)")
                    .HasColumnName("AMOUNT_PAID");

                entity.Property(e => e.CheckAmount)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("CHECK_AMOUNT");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.DetailLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("DETAIL_LINE_NUMBER");

                entity.Property(e => e.EarningsCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("EARNINGS_CODE");

                entity.Property(e => e.Hours)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("HOURS");

                entity.Property(e => e.PoEarningsCodeSuffix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("PO_EARNINGS_CODE_SUFFIX");

                entity.Property(e => e.PreRrAmountBilled)
                    .HasColumnType("NUMBER(25,2)")
                    .HasColumnName("PRE_RR_AMOUNT_BILLED");

                entity.Property(e => e.PreRrRateAr)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("PRE_RR_RATE_AR");

                entity.Property(e => e.ProjectNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PROJECT_NUMBER");

                entity.Property(e => e.RateAp)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("RATE_AP");

                entity.Property(e => e.RateAr)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("RATE_AR");

                entity.Property(e => e.Shift)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SHIFT");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");
            });

            modelBuilder.Entity<TimesheetDetails12feb2021>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TIMESHEET_DETAILS12FEB2021");

                entity.Property(e => e.AdjustedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ADJUSTED_FLAG");

                entity.Property(e => e.AisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AIS_CODE");

                entity.Property(e => e.AmountBilled)
                    .HasColumnType("NUMBER(25,2)")
                    .HasColumnName("AMOUNT_BILLED");

                entity.Property(e => e.AmountPaid)
                    .HasColumnType("NUMBER(25,2)")
                    .HasColumnName("AMOUNT_PAID");

                entity.Property(e => e.CheckAmount)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("CHECK_AMOUNT");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.DetailLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("DETAIL_LINE_NUMBER");

                entity.Property(e => e.EarningsCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("EARNINGS_CODE");

                entity.Property(e => e.Hours)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("HOURS");

                entity.Property(e => e.PoEarningsCodeSuffix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("PO_EARNINGS_CODE_SUFFIX");

                entity.Property(e => e.PreRrAmountBilled)
                    .HasColumnType("NUMBER(25,2)")
                    .HasColumnName("PRE_RR_AMOUNT_BILLED");

                entity.Property(e => e.PreRrRateAr)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("PRE_RR_RATE_AR");

                entity.Property(e => e.ProjectNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PROJECT_NUMBER");

                entity.Property(e => e.RateAp)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("RATE_AP");

                entity.Property(e => e.RateAr)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("RATE_AR");

                entity.Property(e => e.Shift)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SHIFT");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");
            });

            modelBuilder.Entity<TimesheetDetailsCi>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TIMESHEET_DETAILS_CIS");

                entity.Property(e => e.AdjustedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ADJUSTED_FLAG");

                entity.Property(e => e.AisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AIS_CODE");

                entity.Property(e => e.AmountBilled)
                    .HasColumnType("NUMBER(25,2)")
                    .HasColumnName("AMOUNT_BILLED");

                entity.Property(e => e.AmountPaid)
                    .HasColumnType("NUMBER(25,2)")
                    .HasColumnName("AMOUNT_PAID");

                entity.Property(e => e.CheckAmount)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("CHECK_AMOUNT");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.DetailLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("DETAIL_LINE_NUMBER");

                entity.Property(e => e.EarningsCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("EARNINGS_CODE");

                entity.Property(e => e.Hours)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("HOURS");

                entity.Property(e => e.PoEarningsCodeSuffix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("PO_EARNINGS_CODE_SUFFIX");

                entity.Property(e => e.PreRrAmountBilled)
                    .HasColumnType("NUMBER(25,2)")
                    .HasColumnName("PRE_RR_AMOUNT_BILLED");

                entity.Property(e => e.PreRrRateAr)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("PRE_RR_RATE_AR");

                entity.Property(e => e.ProjectNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PROJECT_NUMBER");

                entity.Property(e => e.RateAp)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("RATE_AP");

                entity.Property(e => e.RateAr)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("RATE_AR");

                entity.Property(e => e.Shift)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SHIFT");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");
            });

            modelBuilder.Entity<TimesheetError>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TIMESHEET_ERRORS");

                entity.HasIndex(e => new { e.WeekEndingDate, e.ContracteeId, e.PoNumber }, "IDX1_TIMESHEET_ERRORS");

                entity.HasIndex(e => e.ErrorCategory, "IDX2_TIMESHEET_ERRORS");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.ErrorCategory)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("ERROR_CATEGORY");

                entity.Property(e => e.ErrorDescription)
                    .HasColumnType("LONG")
                    .HasColumnName("ERROR_DESCRIPTION");

                entity.Property(e => e.GroupId)
                    .HasPrecision(10)
                    .HasColumnName("GROUP_ID");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.WeekEndingDate)
                    .HasColumnType("DATE")
                    .HasColumnName("WEEK_ENDING_DATE");
            });

            modelBuilder.Entity<TimesheetExport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TIMESHEET_EXPORT");

                entity.Property(e => e.Century)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CENTURY");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(26)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CreatedTime)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_TIME");

                entity.Property(e => e.Day)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("DAY");

                entity.Property(e => e.HourlyRate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("HOURLY_RATE");

                entity.Property(e => e.HoursOrExpenses)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("HOURS_OR_EXPENSES");

                entity.Property(e => e.HoursWorked)
                    .HasColumnType("NUMBER(13,2)")
                    .HasColumnName("HOURS_WORKED");

                entity.Property(e => e.InvoiceNumber)
                    .HasPrecision(9)
                    .HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.LineAmount)
                    .HasColumnType("NUMBER(13,2)")
                    .HasColumnName("LINE_AMOUNT");

                entity.Property(e => e.Month)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("MONTH");

                entity.Property(e => e.PoEarningsCodeSuffix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("PO_EARNINGS_CODE_SUFFIX");

                entity.Property(e => e.PoNumberEarningsCode)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER_EARNINGS_CODE");

                entity.Property(e => e.PrmuSign)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PRMU_SIGN");

                entity.Property(e => e.RunNumber)
                    .HasPrecision(3)
                    .HasColumnName("RUN_NUMBER");

                entity.Property(e => e.SupplierFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_FEE");

                entity.Property(e => e.SupplierJdeId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_JDE_ID");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.WeekEndingDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("WEEK_ENDING_DATE");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");

                entity.Property(e => e.Year)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("YEAR");
            });

            modelBuilder.Entity<TimesheetExportEmergency>(entity =>
            {
                entity.HasKey(e => new { e.PoNumberEarningsCode, e.WeekEndingDate });

                entity.ToTable("TIMESHEET_EXPORT_EMERGENCY");

                entity.Property(e => e.PoNumberEarningsCode)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER_EARNINGS_CODE");

                entity.Property(e => e.WeekEndingDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("WEEK_ENDING_DATE");

                entity.Property(e => e.Century)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CENTURY");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(26)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CreatedTime)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_TIME");

                entity.Property(e => e.Day)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("DAY");

                entity.Property(e => e.HourlyRate)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("HOURLY_RATE");

                entity.Property(e => e.HoursOrExpenses)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("HOURS_OR_EXPENSES");

                entity.Property(e => e.HoursWorked)
                    .HasColumnType("NUMBER(13,2)")
                    .HasColumnName("HOURS_WORKED");

                entity.Property(e => e.InvoiceNumber)
                    .HasPrecision(9)
                    .HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.LineAmount)
                    .HasColumnType("NUMBER(13,2)")
                    .HasColumnName("LINE_AMOUNT");

                entity.Property(e => e.Month)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("MONTH");

                entity.Property(e => e.PrmuSign)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PRMU_SIGN");

                entity.Property(e => e.RunNumber)
                    .HasPrecision(3)
                    .HasColumnName("RUN_NUMBER");

                entity.Property(e => e.Year)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("YEAR");
            });

            modelBuilder.Entity<TimesheetExportException>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TIMESHEET_EXPORT_EXCEPTION");

                entity.HasIndex(e => new { e.PoNumber, e.EarningsCode, e.WeekEndingDate }, "PK_TIMESHEET_EXPORT_EXCEPTION");

                entity.Property(e => e.AmountBilled)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("AMOUNT_BILLED");

                entity.Property(e => e.ApprovedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("APPROVED_DATE");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.EarningsCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EARNINGS_CODE");

                entity.Property(e => e.GroupCode)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("GROUP_CODE");

                entity.Property(e => e.Hours)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("HOURS");

                entity.Property(e => e.InvoiceNumber)
                    .HasPrecision(10)
                    .HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.OrderNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PoEarningsCodeSuffix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("PO_EARNINGS_CODE_SUFFIX");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.RateAr)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("RATE_AR");

                entity.Property(e => e.SupplierFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_FEE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierJdeId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_JDE_ID");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.WeekEndingDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("WEEK_ENDING_DATE");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");
            });

            modelBuilder.Entity<TimesheetHdetails12feb2021>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TIMESHEET_HDETAILS12FEB2021");

                entity.Property(e => e.AdjustedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ADJUSTED_FLAG");

                entity.Property(e => e.AisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AIS_CODE");

                entity.Property(e => e.AmountBilled)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("AMOUNT_BILLED");

                entity.Property(e => e.AmountPaid)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("AMOUNT_PAID");

                entity.Property(e => e.CheckAmount)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("CHECK_AMOUNT");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.DetailLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("DETAIL_LINE_NUMBER");

                entity.Property(e => e.EarningsCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("EARNINGS_CODE");

                entity.Property(e => e.HistoryId)
                    .HasPrecision(10)
                    .HasColumnName("HISTORY_ID");

                entity.Property(e => e.Hours)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("HOURS");

                entity.Property(e => e.PoEarningsCodeSuffix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("PO_EARNINGS_CODE_SUFFIX");

                entity.Property(e => e.PreRrAmountBilled)
                    .HasColumnType("NUMBER(25,2)")
                    .HasColumnName("PRE_RR_AMOUNT_BILLED");

                entity.Property(e => e.PreRrRateAr)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("PRE_RR_RATE_AR");

                entity.Property(e => e.ProjectNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PROJECT_NUMBER");

                entity.Property(e => e.RateAp)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("RATE_AP");

                entity.Property(e => e.RateAr)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("RATE_AR");

                entity.Property(e => e.Shift)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SHIFT");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");
            });

            modelBuilder.Entity<TimesheetHeader>(entity =>
            {
                entity.HasKey(e => new { e.TimesheetNumber, e.TimesheetRevision });

                entity.ToTable("TIMESHEET_HEADERS");

                entity.HasIndex(e => e.ApprovedBy, "IDX_TH_APPBY");

                entity.HasIndex(e => e.ApprovedDate, "IDX_TH_APPDATE");

                entity.HasIndex(e => e.ContracteeId, "IDX_TH_CONID");

                entity.HasIndex(e => e.CreatedCycle, "IDX_TH_CRCYCLE");

                entity.HasIndex(e => e.LastUpdatedDate, "IDX_TH_LASTUPDDATE");

                entity.HasIndex(e => new { e.PoNumber, e.ContracteeId, e.WeekEndingDate }, "IDX_TH_PONUM_CONID");

                entity.HasIndex(e => e.ProcessedCycle, "IDX_TH_PROCCYCLE");

                entity.HasIndex(e => e.SubmittedCycle, "IDX_TH_SUBCYCLE");

                entity.HasIndex(e => e.SupervisorId, "IDX_TH_SUPID");

                entity.HasIndex(e => e.SupplierId, "IDX_TH_SUPPID");

                entity.HasIndex(e => e.TimesheetStatus, "IDX_TH_TSTATUS");

                entity.HasIndex(e => e.WeekEndingDate, "IDX_TH_WEDATE");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.AcctOverrideFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACCT_OVERRIDE_FLAG")
                    .HasDefaultValueSql("'N' ");

                entity.Property(e => e.AdjustmentReason)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ADJUSTMENT_REASON");

                entity.Property(e => e.ApprovedBy)
                    .HasPrecision(10)
                    .HasColumnName("APPROVED_BY");

                entity.Property(e => e.ApprovedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("APPROVED_DATE");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedCycle)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_CYCLE");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.InvoiceNumber)
                    .HasPrecision(10)
                    .HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.Notes)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.PoNumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.ProcessedCycle)
                    .HasPrecision(10)
                    .HasColumnName("PROCESSED_CYCLE");

                entity.Property(e => e.StatusDate)
                    .HasColumnType("DATE")
                    .HasColumnName("STATUS_DATE");

                entity.Property(e => e.SubmittedCycle)
                    .HasPrecision(10)
                    .HasColumnName("SUBMITTED_CYCLE");

                entity.Property(e => e.SupervisorId)
                    .HasPrecision(10)
                    .HasColumnName("SUPERVISOR_ID");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.TimesheetStatus)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TIMESHEET_STATUS");

                entity.Property(e => e.WeekEndingDate)
                    .HasColumnType("DATE")
                    .HasColumnName("WEEK_ENDING_DATE");

                entity.HasOne(d => d.ApprovedByNavigation)
                    .WithMany(p => p.TimesheetHeaderApprovedByNavigations)
                    .HasForeignKey(d => d.ApprovedBy)
                    .HasConstraintName("FK_TIMESHEE_REF_2607_PEOPLE");

                entity.HasOne(d => d.Contractee)
                    .WithMany(p => p.TimesheetHeaders)
                    .HasForeignKey(d => d.ContracteeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TIMESHEE_REF_2612_CANDIDAT");

                entity.HasOne(d => d.CreatedCycleNavigation)
                    .WithMany(p => p.TimesheetHeaderCreatedCycleNavigations)
                    .HasForeignKey(d => d.CreatedCycle)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TIMESHEE_REF_884_CYCLE");

                entity.HasOne(d => d.ProcessedCycleNavigation)
                    .WithMany(p => p.TimesheetHeaderProcessedCycleNavigations)
                    .HasForeignKey(d => d.ProcessedCycle)
                    .HasConstraintName("FK_TIMESHEE_REF_2590_CYCLE");

                entity.HasOne(d => d.SubmittedCycleNavigation)
                    .WithMany(p => p.TimesheetHeaderSubmittedCycleNavigations)
                    .HasForeignKey(d => d.SubmittedCycle)
                    .HasConstraintName("FK_TIMESHEE_REF_2596_CYCLE");

                entity.HasOne(d => d.Supervisor)
                    .WithMany(p => p.TimesheetHeaderSupervisors)
                    .HasForeignKey(d => d.SupervisorId)
                    .HasConstraintName("FK_TIMESHEE_REF_2601_PEOPLE");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.TimesheetHeaders)
                    .HasForeignKey(d => d.SupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TS_HEADERS_SUPPLIER");

                entity.HasOne(d => d.TimesheetStatusNavigation)
                    .WithMany(p => p.TimesheetHeaders)
                    .HasForeignKey(d => d.TimesheetStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TIMESHEE_REF_968_TIMESHEE");
            });

            modelBuilder.Entity<TimesheetHeaders12feb2021>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TIMESHEET_HEADERS12FEB2021");

                entity.Property(e => e.AcctOverrideFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACCT_OVERRIDE_FLAG");

                entity.Property(e => e.AdjustmentReason)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ADJUSTMENT_REASON");

                entity.Property(e => e.ApprovedBy)
                    .HasPrecision(10)
                    .HasColumnName("APPROVED_BY");

                entity.Property(e => e.ApprovedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("APPROVED_DATE");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedCycle)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_CYCLE");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.InvoiceNumber)
                    .HasPrecision(10)
                    .HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.Notes)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.PoNumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.ProcessedCycle)
                    .HasPrecision(10)
                    .HasColumnName("PROCESSED_CYCLE");

                entity.Property(e => e.StatusDate)
                    .HasColumnType("DATE")
                    .HasColumnName("STATUS_DATE");

                entity.Property(e => e.SubmittedCycle)
                    .HasPrecision(10)
                    .HasColumnName("SUBMITTED_CYCLE");

                entity.Property(e => e.SupervisorId)
                    .HasPrecision(10)
                    .HasColumnName("SUPERVISOR_ID");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.TimesheetStatus)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TIMESHEET_STATUS");

                entity.Property(e => e.WeekEndingDate)
                    .HasColumnType("DATE")
                    .HasColumnName("WEEK_ENDING_DATE");
            });

            modelBuilder.Entity<TimesheetHeadersCi>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TIMESHEET_HEADERS_CIS");

                entity.Property(e => e.AcctOverrideFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACCT_OVERRIDE_FLAG");

                entity.Property(e => e.AdjustmentReason)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ADJUSTMENT_REASON");

                entity.Property(e => e.ApprovedBy)
                    .HasPrecision(10)
                    .HasColumnName("APPROVED_BY");

                entity.Property(e => e.ApprovedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("APPROVED_DATE");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedCycle)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_CYCLE");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.InvoiceNumber)
                    .HasPrecision(10)
                    .HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.Notes)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.PoNumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.ProcessedCycle)
                    .HasPrecision(10)
                    .HasColumnName("PROCESSED_CYCLE");

                entity.Property(e => e.StatusDate)
                    .HasColumnType("DATE")
                    .HasColumnName("STATUS_DATE");

                entity.Property(e => e.SubmittedCycle)
                    .HasPrecision(10)
                    .HasColumnName("SUBMITTED_CYCLE");

                entity.Property(e => e.SupervisorId)
                    .HasPrecision(10)
                    .HasColumnName("SUPERVISOR_ID");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.TimesheetStatus)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TIMESHEET_STATUS");

                entity.Property(e => e.WeekEndingDate)
                    .HasColumnType("DATE")
                    .HasColumnName("WEEK_ENDING_DATE");
            });

            modelBuilder.Entity<TimesheetHheaders12feb2021>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TIMESHEET_HHEADERS12FEB2021");

                entity.Property(e => e.AcctOverrideFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACCT_OVERRIDE_FLAG");

                entity.Property(e => e.AdjustmentReason)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ADJUSTMENT_REASON");

                entity.Property(e => e.ApprovedBy)
                    .HasPrecision(10)
                    .HasColumnName("APPROVED_BY");

                entity.Property(e => e.ApprovedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("APPROVED_DATE");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedCycle)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_CYCLE");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.HistoryId)
                    .HasPrecision(10)
                    .HasColumnName("HISTORY_ID");

                entity.Property(e => e.InvoiceNumber)
                    .HasPrecision(10)
                    .HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.Notes)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.PoNumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.ProcessedCycle)
                    .HasPrecision(10)
                    .HasColumnName("PROCESSED_CYCLE");

                entity.Property(e => e.StatusDate)
                    .HasColumnType("DATE")
                    .HasColumnName("STATUS_DATE");

                entity.Property(e => e.SubmittedCycle)
                    .HasPrecision(10)
                    .HasColumnName("SUBMITTED_CYCLE");

                entity.Property(e => e.SupervisorId)
                    .HasPrecision(10)
                    .HasColumnName("SUPERVISOR_ID");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.TimesheetStatus)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TIMESHEET_STATUS");

                entity.Property(e => e.WeekEndingDate)
                    .HasColumnType("DATE")
                    .HasColumnName("WEEK_ENDING_DATE");
            });

            modelBuilder.Entity<TimesheetHhours12feb2021>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TIMESHEET_HHOURS12FEB2021");

                entity.Property(e => e.AdjustmentFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ADJUSTMENT_FLAG");

                entity.Property(e => e.AisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AIS_CODE");

                entity.Property(e => e.BillableType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BILLABLE_TYPE");

                entity.Property(e => e.BreakTime)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("BREAK_TIME");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.ExpenseAmount)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("EXPENSE_AMOUNT");

                entity.Property(e => e.ExpenseDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("EXPENSE_DESCRIPTION");

                entity.Property(e => e.ExpenseType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("EXPENSE_TYPE");

                entity.Property(e => e.HistoryId)
                    .HasPrecision(10)
                    .HasColumnName("HISTORY_ID");

                entity.Property(e => e.Hours)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("HOURS");

                entity.Property(e => e.HoursLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("HOURS_LINE_NUMBER");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.ProjectNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PROJECT_NUMBER");

                entity.Property(e => e.QuitTime)
                    .HasColumnType("DATE")
                    .HasColumnName("QUIT_TIME");

                entity.Property(e => e.Shift)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SHIFT");

                entity.Property(e => e.StartTime)
                    .HasColumnType("DATE")
                    .HasColumnName("START_TIME");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.WorkDate)
                    .HasColumnType("DATE")
                    .HasColumnName("WORK_DATE");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");
            });

            modelBuilder.Entity<TimesheetHistoryDetail>(entity =>
            {
                entity.HasKey(e => e.HistoryId);

                entity.ToTable("TIMESHEET_HISTORY_DETAILS");

                entity.HasIndex(e => new { e.AisCode, e.CostCenter }, "IDX_THD_AIS_CC");

                entity.HasIndex(e => e.EarningsCode, "IDX_THD_ECODE");

                entity.HasIndex(e => e.Shift, "IDX_THD_SHIFT");

                entity.HasIndex(e => new { e.TimesheetNumber, e.TimesheetRevision, e.DetailLineNumber }, "IDX_THD_TSNUM_TSREV_DETLNNUM")
                    .IsUnique();

                entity.Property(e => e.HistoryId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("HISTORY_ID");

                entity.Property(e => e.AdjustedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ADJUSTED_FLAG");

                entity.Property(e => e.AisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AIS_CODE");

                entity.Property(e => e.AmountBilled)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("AMOUNT_BILLED");

                entity.Property(e => e.AmountPaid)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("AMOUNT_PAID");

                entity.Property(e => e.CheckAmount)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("CHECK_AMOUNT");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.DetailLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("DETAIL_LINE_NUMBER");

                entity.Property(e => e.EarningsCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("EARNINGS_CODE");

                entity.Property(e => e.Hours)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("HOURS");

                entity.Property(e => e.PoEarningsCodeSuffix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("PO_EARNINGS_CODE_SUFFIX");

                entity.Property(e => e.PreRrAmountBilled)
                    .HasColumnType("NUMBER(25,2)")
                    .HasColumnName("PRE_RR_AMOUNT_BILLED");

                entity.Property(e => e.PreRrRateAr)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("PRE_RR_RATE_AR");

                entity.Property(e => e.ProjectNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PROJECT_NUMBER");

                entity.Property(e => e.RateAp)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("RATE_AP");

                entity.Property(e => e.RateAr)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("RATE_AR");

                entity.Property(e => e.Shift)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SHIFT");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");
            });

            modelBuilder.Entity<TimesheetHistoryHeader>(entity =>
            {
                entity.HasKey(e => e.HistoryId);

                entity.ToTable("TIMESHEET_HISTORY_HEADERS");

                entity.HasIndex(e => e.ApprovedBy, "IDX_THH_APPBY");

                entity.HasIndex(e => e.ApprovedDate, "IDX_THH_APPDATE");

                entity.HasIndex(e => e.ContracteeId, "IDX_THH_CONID");

                entity.HasIndex(e => e.CreatedCycle, "IDX_THH_CRCYCLE");

                entity.HasIndex(e => e.LastUpdatedDate, "IDX_THH_LASTUPDDATE");

                entity.HasIndex(e => new { e.PoNumber, e.ContracteeId, e.WeekEndingDate }, "IDX_THH_PONUM_CONID");

                entity.HasIndex(e => e.ProcessedCycle, "IDX_THH_PROCCYCLE");

                entity.HasIndex(e => e.SubmittedCycle, "IDX_THH_SUBCYCLE");

                entity.HasIndex(e => e.SupervisorId, "IDX_THH_SUPID");

                entity.HasIndex(e => e.SupplierId, "IDX_THH_SUPPID");

                entity.HasIndex(e => new { e.TimesheetNumber, e.TimesheetRevision }, "IDX_THH_TSNUM_TSREV")
                    .IsUnique();

                entity.HasIndex(e => e.TimesheetStatus, "IDX_THH_TSTATUS");

                entity.HasIndex(e => e.WeekEndingDate, "IDX_THH_WEDATE");

                entity.Property(e => e.HistoryId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("HISTORY_ID");

                entity.Property(e => e.AcctOverrideFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACCT_OVERRIDE_FLAG");

                entity.Property(e => e.AdjustmentReason)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ADJUSTMENT_REASON");

                entity.Property(e => e.ApprovedBy)
                    .HasPrecision(10)
                    .HasColumnName("APPROVED_BY");

                entity.Property(e => e.ApprovedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("APPROVED_DATE");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedCycle)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_CYCLE");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.InvoiceNumber)
                    .HasPrecision(10)
                    .HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.Notes)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.PoNumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.ProcessedCycle)
                    .HasPrecision(10)
                    .HasColumnName("PROCESSED_CYCLE");

                entity.Property(e => e.StatusDate)
                    .HasColumnType("DATE")
                    .HasColumnName("STATUS_DATE");

                entity.Property(e => e.SubmittedCycle)
                    .HasPrecision(10)
                    .HasColumnName("SUBMITTED_CYCLE");

                entity.Property(e => e.SupervisorId)
                    .HasPrecision(10)
                    .HasColumnName("SUPERVISOR_ID");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.TimesheetStatus)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TIMESHEET_STATUS");

                entity.Property(e => e.WeekEndingDate)
                    .HasColumnType("DATE")
                    .HasColumnName("WEEK_ENDING_DATE");
            });

            modelBuilder.Entity<TimesheetHistoryHour>(entity =>
            {
                entity.HasKey(e => e.HistoryId);

                entity.ToTable("TIMESHEET_HISTORY_HOURS");

                entity.HasIndex(e => new { e.AisCode, e.CostCenter }, "IDX_THHR_AIS_CC");

                entity.HasIndex(e => e.BillableType, "IDX_THHR_BILLTYPE");

                entity.HasIndex(e => e.ExpenseType, "IDX_THHR_EXPTYPE");

                entity.HasIndex(e => new { e.TimesheetNumber, e.TimesheetRevision, e.HoursLineNumber }, "IDX_THHR_TSNUM_TSREV_HRLNNUM")
                    .IsUnique();

                entity.HasIndex(e => e.WorkDate, "IDX_THHR_WDATE");

                entity.Property(e => e.HistoryId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("HISTORY_ID");

                entity.Property(e => e.AdjustmentFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ADJUSTMENT_FLAG");

                entity.Property(e => e.AisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AIS_CODE");

                entity.Property(e => e.BillableType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BILLABLE_TYPE");

                entity.Property(e => e.BreakTime)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("BREAK_TIME");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.ExpenseAmount)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("EXPENSE_AMOUNT");

                entity.Property(e => e.ExpenseDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("EXPENSE_DESCRIPTION");

                entity.Property(e => e.ExpenseType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("EXPENSE_TYPE");

                entity.Property(e => e.Hours)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("HOURS");

                entity.Property(e => e.HoursLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("HOURS_LINE_NUMBER");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.ProjectNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PROJECT_NUMBER");

                entity.Property(e => e.QuitTime)
                    .HasColumnType("DATE")
                    .HasColumnName("QUIT_TIME");

                entity.Property(e => e.Shift)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SHIFT");

                entity.Property(e => e.StartTime)
                    .HasColumnType("DATE")
                    .HasColumnName("START_TIME");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.WorkDate)
                    .HasColumnType("DATE")
                    .HasColumnName("WORK_DATE");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");
            });

            modelBuilder.Entity<TimesheetHour>(entity =>
            {
                entity.HasKey(e => new { e.TimesheetNumber, e.TimesheetRevision, e.HoursLineNumber });

                entity.ToTable("TIMESHEET_HOURS");

                entity.HasIndex(e => new { e.AisCode, e.CostCenter }, "IDX_THR_AIS_CC");

                entity.HasIndex(e => e.BillableType, "IDX_THR_BILLTYPE");

                entity.HasIndex(e => e.WorkDate, "IDX_THR_WDATE");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.HoursLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("HOURS_LINE_NUMBER");

                entity.Property(e => e.AdjustmentFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ADJUSTMENT_FLAG");

                entity.Property(e => e.AisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AIS_CODE");

                entity.Property(e => e.BillableType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BILLABLE_TYPE");

                entity.Property(e => e.BreakTime)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("BREAK_TIME");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.ExpenseAmount)
                    .HasColumnType("NUMBER(22,2)")
                    .HasColumnName("EXPENSE_AMOUNT");

                entity.Property(e => e.ExpenseDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("EXPENSE_DESCRIPTION");

                entity.Property(e => e.ExpenseType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("EXPENSE_TYPE");

                entity.Property(e => e.Hours)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("HOURS");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.ProjectNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PROJECT_NUMBER");

                entity.Property(e => e.QuitTime)
                    .HasColumnType("DATE")
                    .HasColumnName("QUIT_TIME");

                entity.Property(e => e.Shift)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SHIFT");

                entity.Property(e => e.StartTime)
                    .HasColumnType("DATE")
                    .HasColumnName("START_TIME");

                entity.Property(e => e.WorkDate)
                    .HasColumnType("DATE")
                    .HasColumnName("WORK_DATE");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");

                entity.HasOne(d => d.BillableTypeNavigation)
                    .WithMany(p => p.TimesheetHours)
                    .HasForeignKey(d => d.BillableType)
                    .HasConstraintName("FK_TIMESHEE_REF_4190_BILLABLE");

                entity.HasOne(d => d.ExpenseTypeNavigation)
                    .WithMany(p => p.TimesheetHours)
                    .HasForeignKey(d => d.ExpenseType)
                    .HasConstraintName("FK_TIMESHEE_REF_EXPEN_EXPENSE_");

                entity.HasOne(d => d.Timesheet)
                    .WithMany(p => p.TimesheetHours)
                    .HasForeignKey(d => new { d.TimesheetNumber, d.TimesheetRevision })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TIMESHEE_REF_255_TIMESHEE");
            });

            modelBuilder.Entity<TimesheetHours12feb2021>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TIMESHEET_HOURS12FEB2021");

                entity.Property(e => e.AdjustmentFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ADJUSTMENT_FLAG");

                entity.Property(e => e.AisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AIS_CODE");

                entity.Property(e => e.BillableType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BILLABLE_TYPE");

                entity.Property(e => e.BreakTime)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("BREAK_TIME");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.ExpenseAmount)
                    .HasColumnType("NUMBER(22,2)")
                    .HasColumnName("EXPENSE_AMOUNT");

                entity.Property(e => e.ExpenseDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("EXPENSE_DESCRIPTION");

                entity.Property(e => e.ExpenseType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("EXPENSE_TYPE");

                entity.Property(e => e.Hours)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("HOURS");

                entity.Property(e => e.HoursLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("HOURS_LINE_NUMBER");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.ProjectNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PROJECT_NUMBER");

                entity.Property(e => e.QuitTime)
                    .HasColumnType("DATE")
                    .HasColumnName("QUIT_TIME");

                entity.Property(e => e.Shift)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SHIFT");

                entity.Property(e => e.StartTime)
                    .HasColumnType("DATE")
                    .HasColumnName("START_TIME");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.WorkDate)
                    .HasColumnType("DATE")
                    .HasColumnName("WORK_DATE");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");
            });

            modelBuilder.Entity<TimesheetHoursCi>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TIMESHEET_HOURS_CIS");

                entity.Property(e => e.AdjustmentFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ADJUSTMENT_FLAG");

                entity.Property(e => e.AisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AIS_CODE");

                entity.Property(e => e.BillableType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BILLABLE_TYPE");

                entity.Property(e => e.BreakTime)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("BREAK_TIME");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.ExpenseAmount)
                    .HasColumnType("NUMBER(22,2)")
                    .HasColumnName("EXPENSE_AMOUNT");

                entity.Property(e => e.ExpenseDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("EXPENSE_DESCRIPTION");

                entity.Property(e => e.ExpenseType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("EXPENSE_TYPE");

                entity.Property(e => e.Hours)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("HOURS");

                entity.Property(e => e.HoursLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("HOURS_LINE_NUMBER");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.ProjectNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PROJECT_NUMBER");

                entity.Property(e => e.QuitTime)
                    .HasColumnType("DATE")
                    .HasColumnName("QUIT_TIME");

                entity.Property(e => e.Shift)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SHIFT");

                entity.Property(e => e.StartTime)
                    .HasColumnType("DATE")
                    .HasColumnName("START_TIME");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.WorkDate)
                    .HasColumnType("DATE")
                    .HasColumnName("WORK_DATE");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");
            });

            modelBuilder.Entity<TimesheetStatus>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("TIMESHEET_STATUS");

                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<TrackPkgMovingExpense>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TRACK_PKG_MOVING_EXPENSES");

                entity.Property(e => e.Comments)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.DateRun)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE_RUN");

                entity.Property(e => e.Job)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JOB");
            });

            modelBuilder.Entity<TrackProcedure>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TRACK_PROCEDURE");

                entity.Property(e => e.Comments)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.DateRun)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE_RUN");

                entity.Property(e => e.Job)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JOB");
            });

            modelBuilder.Entity<TrackProcedureTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TRACK_PROCEDURE_TEMP");

                entity.Property(e => e.Comments)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.DateRun)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE_RUN");

                entity.Property(e => e.Job)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JOB");
            });

            modelBuilder.Entity<Transition>(entity =>
            {
                entity.HasKey(e => e.LaunchId);

                entity.ToTable("TRANSITIONS");

                entity.Property(e => e.LaunchId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("LAUNCH_ID");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.LaunchName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LAUNCH_NAME");

                entity.Property(e => e.LaunchStatus)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("LAUNCH_STATUS");

                entity.HasOne(d => d.LaunchStatusNavigation)
                    .WithMany(p => p.Transitions)
                    .HasForeignKey(d => d.LaunchStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRANSITI_REF_LAUNC_LAUNCH_S");
            });

            modelBuilder.Entity<TransitionCustomer>(entity =>
            {
                entity.HasKey(e => new { e.CustomerId, e.LaunchId });

                entity.ToTable("TRANSITION_CUSTOMERS");

                entity.HasIndex(e => e.LaunchId, "IDX_TRANS_CUST_REF_TRANS");

                entity.Property(e => e.CustomerId)
                    .HasPrecision(10)
                    .HasColumnName("CUSTOMER_ID");

                entity.Property(e => e.LaunchId)
                    .HasPrecision(10)
                    .HasColumnName("LAUNCH_ID");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.TransitionCustomers)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRANSITI_REF_PEOPL_PEOPLE");

                entity.HasOne(d => d.Launch)
                    .WithMany(p => p.TransitionCustomers)
                    .HasForeignKey(d => d.LaunchId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRANSITI_REF_TRANS_TRANSITI");
            });

            modelBuilder.Entity<TransitionDetail>(entity =>
            {
                entity.HasKey(e => new { e.Ssn, e.LaunchId })
                    .HasName("TD_PRIMARY");

                entity.ToTable("TRANSITION_DETAILS");

                entity.Property(e => e.Ssn)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("SSN");

                entity.Property(e => e.LaunchId)
                    .HasPrecision(10)
                    .HasColumnName("LAUNCH_ID");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.CandidateEmailAddress)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_EMAIL_ADDRESS");

                entity.Property(e => e.CandidateFirstName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_FIRST_NAME");

                entity.Property(e => e.CandidateLastName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_LAST_NAME");

                entity.Property(e => e.CandidateLoginId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_LOGIN_ID");

                entity.Property(e => e.CandidateUserId)
                    .HasPrecision(10)
                    .HasColumnName("CANDIDATE_USER_ID");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CustomerApprovalStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_APPROVAL_STATUS");

                entity.Property(e => e.CustomerPo)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_PO");

                entity.Property(e => e.DivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_CODE");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.EstimatedCandidateCost)
                    .HasColumnType("NUMBER(11,2)")
                    .HasColumnName("ESTIMATED_CANDIDATE_COST");

                entity.Property(e => e.GradeLevel)
                    .HasPrecision(2)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.LastUpdatedBy)
                    .HasPrecision(10)
                    .HasColumnName("LAST_UPDATED_BY");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_UPDATED_DATE");

                entity.Property(e => e.LocationCode)
                    .HasPrecision(18)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OvertimePremiumFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("OVERTIME_PREMIUM_FLAG")
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.PositionTitle)
                    .HasMaxLength(90)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_TITLE");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.ShiftPremiumFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SHIFT_PREMIUM_FLAG");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SubDivision)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUB_DIVISION");

                entity.Property(e => e.SupervisorEmailAddress)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_EMAIL_ADDRESS");

                entity.Property(e => e.SupervisorFirstName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_FIRST_NAME");

                entity.Property(e => e.SupervisorLastName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_LAST_NAME");

                entity.Property(e => e.SupervisorLocationCode)
                    .HasPrecision(10)
                    .HasColumnName("SUPERVISOR_LOCATION_CODE");

                entity.Property(e => e.SupervisorLoginId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_LOGIN_ID");

                entity.Property(e => e.SupervisorPhone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPERVISOR_PHONE");

                entity.Property(e => e.SupervisorUserId)
                    .HasPrecision(10)
                    .HasColumnName("SUPERVISOR_USER_ID");

                entity.Property(e => e.SupplierConfirmed)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_CONFIRMED");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.TransitionStatusFlag)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TRANSITION_STATUS_FLAG");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.Udf5)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UDF5");

                entity.Property(e => e.Udf6)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UDF6");

                entity.Property(e => e.UnclassEmailAddress)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UNCLASS_EMAIL_ADDRESS");

                entity.Property(e => e.UnclassFirstName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("UNCLASS_FIRST_NAME");

                entity.Property(e => e.UnclassLastName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("UNCLASS_LAST_NAME");

                entity.Property(e => e.UnclassLocationCode)
                    .HasPrecision(10)
                    .HasColumnName("UNCLASS_LOCATION_CODE");

                entity.Property(e => e.UnclassLoginId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UNCLASS_LOGIN_ID");

                entity.Property(e => e.UnclassOrganization)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UNCLASS_ORGANIZATION");

                entity.Property(e => e.UnclassPhone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNCLASS_PHONE");

                entity.Property(e => e.UnclassUserId)
                    .HasPrecision(10)
                    .HasColumnName("UNCLASS_USER_ID");

                entity.Property(e => e.WorkBuilding)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("WORK_BUILDING");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");
            });

            modelBuilder.Entity<TransitionError>(entity =>
            {
                entity.ToTable("TRANSITION_ERRORS");

                entity.Property(e => e.TransitionErrorId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("TRANSITION_ERROR_ID");

                entity.Property(e => e.CandidateSsn)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_SSN");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.ErrorDescription)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ERROR_DESCRIPTION");

                entity.Property(e => e.ErrorNumber)
                    .HasPrecision(18)
                    .HasColumnName("ERROR_NUMBER");

                entity.Property(e => e.LaunchId)
                    .HasPrecision(10)
                    .HasColumnName("LAUNCH_ID");
            });

            modelBuilder.Entity<TransitionFieldDefault>(entity =>
            {
                entity.HasKey(e => e.LaunchId);

                entity.ToTable("TRANSITION_FIELD_DEFAULTS");

                entity.HasIndex(e => e.RequisitionerId, "IDX_TRANS_FIELD_DEF_REF_PEOPLE");

                entity.HasIndex(e => e.SupervisorId, "IDX_TRANS_FLD_DEF_REF_PEOPLE_2");

                entity.Property(e => e.LaunchId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("LAUNCH_ID");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.RequisitionerId)
                    .HasPrecision(10)
                    .HasColumnName("REQUISITIONER_ID");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SupervisorId)
                    .HasPrecision(10)
                    .HasColumnName("SUPERVISOR_ID");

                entity.HasOne(d => d.Launch)
                    .WithOne(p => p.TransitionFieldDefault)
                    .HasForeignKey<TransitionFieldDefault>(d => d.LaunchId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRANSITI_REF_92_TRANSITI");

                entity.HasOne(d => d.Requisitioner)
                    .WithMany(p => p.TransitionFieldDefaultRequisitioners)
                    .HasForeignKey(d => d.RequisitionerId)
                    .HasConstraintName("FK_TRANSITI_REF_PEOPL_PEOPLE3");

                entity.HasOne(d => d.Supervisor)
                    .WithMany(p => p.TransitionFieldDefaultSupervisors)
                    .HasForeignKey(d => d.SupervisorId)
                    .HasConstraintName("FK_TRANSITI_REF_PEOPL_PEOPLE4");
            });

            modelBuilder.Entity<TransitionReport>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.ReportName });

                entity.ToTable("TRANSITION_REPORTS");

                entity.Property(e => e.UserId)
                    .HasPrecision(10)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.ReportName)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("REPORT_NAME");

                entity.Property(e => e.FieldIds)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("FIELD_IDS");

                entity.Property(e => e.QueryText)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("QUERY_TEXT");

                entity.Property(e => e.SortOrder)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SORT_ORDER");

                entity.Property(e => e.TransIds)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("TRANS_IDS");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.TransitionReports)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRANSITI_REF_PEOPL_PEOPLE5");
            });

            modelBuilder.Entity<TransitionReportField>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TRANSITION_REPORT_FIELDS");

                entity.Property(e => e.DisplayName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DISPLAY_NAME");

                entity.Property(e => e.FieldId)
                    .HasPrecision(10)
                    .HasColumnName("FIELD_ID");

                entity.Property(e => e.FieldName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FIELD_NAME");

                entity.Property(e => e.TableInName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TABLE_IN_NAME");
            });

            modelBuilder.Entity<TsMappingPnet>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TS_MAPPING_PNET");

                entity.HasIndex(e => new { e.OldTsNumber, e.OldTsRevision }, "IDX_OLDTS")
                    .IsUnique();

                entity.Property(e => e.CandidateId)
                    .HasPrecision(10)
                    .HasColumnName("CANDIDATE_ID");

                entity.Property(e => e.NewTsNumber)
                    .HasPrecision(10)
                    .HasColumnName("NEW_TS_NUMBER");

                entity.Property(e => e.OldTsNumber)
                    .HasPrecision(10)
                    .HasColumnName("OLD_TS_NUMBER");

                entity.Property(e => e.OldTsRevision)
                    .HasPrecision(10)
                    .HasColumnName("OLD_TS_REVISION");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.ProcessedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PROCESSED_FLAG");

                entity.Property(e => e.RevisedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("REVISED_FLAG");

                entity.Property(e => e.TsStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TS_STATUS");

                entity.Property(e => e.WeekEndingDate)
                    .HasColumnType("DATE")
                    .HasColumnName("WEEK_ENDING_DATE");
            });

            modelBuilder.Entity<UserCostcenterAccess>(entity =>
            {
                entity.HasKey(e => new { e.CostCenterId, e.UserId })
                    .HasName("PK_PR_USER_DEPT_ACCESS");

                entity.ToTable("USER_COSTCENTER_ACCESS");

                entity.HasIndex(e => e.CostCenterId, "CCENTER_IDX");

                entity.HasIndex(e => e.UserId, "USERID_IDX");

                entity.Property(e => e.CostCenterId)
                    .HasMaxLength(26)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER_ID");

                entity.Property(e => e.UserId)
                    .HasPrecision(10)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<UserDashboardAccess>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("USER_DASHBOARD_ACCESS");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.DashboardViewId)
                    .HasPrecision(10)
                    .HasColumnName("DASHBOARD_VIEW_ID");

                entity.Property(e => e.UserId)
                    .HasPrecision(10)
                    .HasColumnName("USER_ID");

                entity.HasOne(d => d.DashboardView)
                    .WithMany()
                    .HasForeignKey(d => d.DashboardViewId)
                    .HasConstraintName("FK_DASHBOARDVIEW");

                entity.HasOne(d => d.User)
                    .WithMany()
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_PEOPLEID");
            });

            modelBuilder.Entity<UserReportAccess>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.ReportId });

                entity.ToTable("USER_REPORT_ACCESS");

                entity.HasIndex(e => e.UserId, "USER_REPORT_ACCESS_USERID_IDX");

                entity.Property(e => e.UserId)
                    .HasPrecision(10)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.ReportId)
                    .HasPrecision(6)
                    .HasColumnName("REPORT_ID");
            });

            modelBuilder.Entity<UserRole>(entity =>
            {
                entity.HasKey(e => new { e.AuthLevel, e.UserTypeCode })
                    .HasName("PK_AUTH_USER_TYPE");

                entity.ToTable("USER_ROLES");

                entity.Property(e => e.AuthLevel)
                    .HasPrecision(10)
                    .HasColumnName("AUTH_LEVEL");

                entity.Property(e => e.UserTypeCode)
                    .HasPrecision(10)
                    .HasColumnName("USER_TYPE_CODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");

                entity.Property(e => e.UsedFor)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("USED_FOR");

                entity.HasOne(d => d.UserTypeCodeNavigation)
                    .WithMany(p => p.UserRoles)
                    .HasForeignKey(d => d.UserTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_USER_TYPE_CODE");
            });

            modelBuilder.Entity<UserType>(entity =>
            {
                entity.HasKey(e => e.Code)
                    .HasName("PK_CODE_USER_TYPE");

                entity.ToTable("USER_TYPE");

                entity.Property(e => e.Code)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IsSelectableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_SELECTABLE_FLAG");
            });

            modelBuilder.Entity<VAllPoRevision>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ALL_PO_REVISIONS");

                entity.Property(e => e.ApprovalStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("APPROVAL_STATUS");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CustomerFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("CUSTOMER_FEE");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.LocationCode)
                    .HasPrecision(10)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNte)
                    .HasColumnType("NUMBER(15,2)")
                    .HasColumnName("PO_NTE");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.PoStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PO_STATUS");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RequisitionerId)
                    .HasPrecision(10)
                    .HasColumnName("REQUISITIONER_ID");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("SUB_ISSUANCE");

                entity.Property(e => e.SupplierFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("SUPPLIER_FEE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.Udf5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF5");

                entity.Property(e => e.Udf6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF6");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");
            });

            modelBuilder.Entity<VAvgBillRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_AVG_BILL_RATE");

                entity.Property(e => e.BillingGroupCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BILLING_GROUP_CODE");

                entity.Property(e => e.Commodity)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("COMMODITY");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CustomerFee)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("CUSTOMER_FEE");

                entity.Property(e => e.CustomerRetiree)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_RETIREE");

                entity.Property(e => e.DivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DIVISION_CODE");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EFFECTIVE_DATE");

                entity.Property(e => e.GradeLevel)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GRADE_LEVEL");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.PoBillrate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PO_BILLRATE");

                entity.Property(e => e.PoStrate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("PO_STRATE");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.PositionStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_STATUS");

                entity.Property(e => e.ProductCode)
                    .HasPrecision(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RegionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("REGION_CODE");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("SUB_ISSUANCE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");

                entity.Property(e => e.Trate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TRATE");
            });

            modelBuilder.Entity<VBidExist>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BID_EXIST");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.BidStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BID_STATUS");

                entity.Property(e => e.BroadcastId)
                    .HasPrecision(10)
                    .HasColumnName("BROADCAST_ID");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");
            });

            modelBuilder.Entity<VBidPlacementDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BID_PLACEMENT_DATES");

                entity.Property(e => e.BidDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BID_DATE");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.BidRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("BID_RATE");

                entity.Property(e => e.CpDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CP_DATE");

                entity.Property(e => e.IvCustomerDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IV_CUSTOMER_DATE");

                entity.Property(e => e.IvRequestedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IV_REQUESTED_DATE");

                entity.Property(e => e.PrescrDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PRESCR_DATE");

                entity.Property(e => e.RtcDate)
                    .HasColumnType("DATE")
                    .HasColumnName("RTC_DATE");

                entity.Property(e => e.ScDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SC_DATE");
            });

            modelBuilder.Entity<VBprMinMaxCycle>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BPR_MIN_MAX_CYCLE");

                entity.Property(e => e.BprMonth)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("BPR_MONTH");

                entity.Property(e => e.BprMonthNum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BPR_MONTH_NUM");

                entity.Property(e => e.BprYear)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BPR_YEAR");

                entity.Property(e => e.MaxCycleEnd)
                    .HasColumnType("DATE")
                    .HasColumnName("MAX_CYCLE_END");

                entity.Property(e => e.MaxCycleNo)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MAX_CYCLE_NO");

                entity.Property(e => e.MinCycleNo)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MIN_CYCLE_NO");

                entity.Property(e => e.MinCycleStart)
                    .HasColumnType("DATE")
                    .HasColumnName("MIN_CYCLE_START");

                entity.Property(e => e.YearMonth)
                    .HasPrecision(6)
                    .HasColumnName("YEAR_MONTH");
            });

            modelBuilder.Entity<VBroadcastsBroadcastDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BROADCASTS_BROADCAST_DETAIL");

                entity.Property(e => e.AlgorithmDay)
                    .HasPrecision(18)
                    .HasColumnName("ALGORITHM_DAY");

                entity.Property(e => e.AlgorithmNumber)
                    .HasPrecision(18)
                    .HasColumnName("ALGORITHM_NUMBER");

                entity.Property(e => e.AlgorithmOverrideReason)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ALGORITHM_OVERRIDE_REASON");

                entity.Property(e => e.BroadcastDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BROADCAST_DATE");

                entity.Property(e => e.BroadcastId)
                    .HasPrecision(10)
                    .HasColumnName("BROADCAST_ID");

                entity.Property(e => e.BroadcastRound)
                    .HasPrecision(2)
                    .HasColumnName("BROADCAST_ROUND");

                entity.Property(e => e.BroadcastType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BROADCAST_TYPE");

                entity.Property(e => e.CandidateName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_NAME");

                entity.Property(e => e.ExcludedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("EXCLUDED_FLAG");

                entity.Property(e => e.IncludedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INCLUDED_FLAG");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.MaxRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("MAX_RATE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PassFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PASS_FLAG");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("DATE")
                    .HasColumnName("RESPONSE_DATE");

                entity.Property(e => e.SpecifiedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPECIFIED_FLAG");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("SUB_ISSUANCE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.TimingOverrideReason)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TIMING_OVERRIDE_REASON");
            });

            modelBuilder.Entity<VCycleDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_CYCLE_DATES");

                entity.Property(e => e.CycleNumber)
                    .HasPrecision(10)
                    .HasColumnName("CYCLE_NUMBER");

                entity.Property(e => e.CycleStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CYCLE_STATUS");

                entity.Property(e => e.WeekEndingDate)
                    .HasColumnType("DATE")
                    .HasColumnName("WEEK_ENDING_DATE");

                entity.Property(e => e.WeekStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("WEEK_START_DATE");
            });

            modelBuilder.Entity<VIneligibleCandidate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_INELIGIBLE_CANDIDATES");

                entity.Property(e => e.CandidateId)
                    .HasPrecision(10)
                    .HasColumnName("CANDIDATE_ID");
            });

            modelBuilder.Entity<VLastperiodBilledT>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_LASTPERIOD_BILLED_TS");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");
            });

            modelBuilder.Entity<VMinstartMaxendMaxpol>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_MINSTART_MAXEND_MAXPOL");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.MaxEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("MAX_END_DATE");

                entity.Property(e => e.MaxPoLineNum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MAX_PO_LINE_NUM");

                entity.Property(e => e.MaxPoRevision)
                    .HasPrecision(10)
                    .HasColumnName("MAX_PO_REVISION");

                entity.Property(e => e.MinStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("MIN_START_DATE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PoNum)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUM");
            });

            modelBuilder.Entity<VMinstartMaxendMaxpolNo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_MINSTART_MAXEND_MAXPOL_NOS");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.MaxEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("MAX_END_DATE");

                entity.Property(e => e.MaxPoLineNum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MAX_PO_LINE_NUM");

                entity.Property(e => e.MaxPoRevision)
                    .HasPrecision(10)
                    .HasColumnName("MAX_PO_REVISION");

                entity.Property(e => e.MinStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("MIN_START_DATE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PoNum)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUM");
            });

            modelBuilder.Entity<VMinstartMaxendMaxpolPo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_MINSTART_MAXEND_MAXPOL_POS");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.MaxEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("MAX_END_DATE");

                entity.Property(e => e.MaxPoLineNum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MAX_PO_LINE_NUM");

                entity.Property(e => e.MaxPoRevision)
                    .HasPrecision(10)
                    .HasColumnName("MAX_PO_REVISION");

                entity.Property(e => e.MinStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("MIN_START_DATE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PoNum)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUM");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");
            });

            modelBuilder.Entity<VMinstartMaxendMaxpoline>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_MINSTART_MAXEND_MAXPOLINE");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.MaxEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("MAX_END_DATE");

                entity.Property(e => e.MaxPoLineNum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MAX_PO_LINE_NUM");

                entity.Property(e => e.MaxPoRevision)
                    .HasPrecision(10)
                    .HasColumnName("MAX_PO_REVISION");

                entity.Property(e => e.MinStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("MIN_START_DATE");

                entity.Property(e => e.PoNumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");
            });

            modelBuilder.Entity<VPoContracteeLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PO_CONTRACTEE_LINES");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.PoLineNumber)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");
            });

            modelBuilder.Entity<VPoisedPosition>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_POISED_POSITIONS");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PoisDate)
                    .HasColumnType("DATE")
                    .HasColumnName("POIS_DATE");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("SUB_ISSUANCE");
            });

            modelBuilder.Entity<VPostPoDev>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_POST_PO_DEV");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.BidReceivedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BID_RECEIVED_DATE");

                entity.Property(e => e.BidStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BID_STATUS");

                entity.Property(e => e.CandName)
                    .HasMaxLength(76)
                    .IsUnicode(false)
                    .HasColumnName("CAND_NAME");

                entity.Property(e => e.ContracteeId)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACTEE_ID");

                entity.Property(e => e.DeviationNumber)
                    .HasPrecision(10)
                    .HasColumnName("DEVIATION_NUMBER");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.PoLineNumber)
                    .HasPrecision(10)
                    .HasColumnName("PO_LINE_NUMBER");

                entity.Property(e => e.PoNumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PoRevision)
                    .HasPrecision(10)
                    .HasColumnName("PO_REVISION");

                entity.Property(e => e.PoStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PO_STATUS");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.SsName)
                    .HasMaxLength(101)
                    .IsUnicode(false)
                    .HasColumnName("SS_NAME");

                entity.Property(e => e.StRate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("SUB_ISSUANCE");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");

                entity.Property(e => e.WorkTask)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORK_TASK");
            });

            modelBuilder.Entity<VRrsBidsDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_RRS_BIDS_DATA");

                entity.Property(e => e.AdditionalInfo)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONAL_INFO");

                entity.Property(e => e.Availability)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("AVAILABILITY");

                entity.Property(e => e.BidNumber)
                    .HasPrecision(10)
                    .HasColumnName("BID_NUMBER");

                entity.Property(e => e.CandidateId)
                    .HasPrecision(10)
                    .HasColumnName("CANDIDATE_ID");

                entity.Property(e => e.CustomerRetiree)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_RETIREE");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FIRST_NAME");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LAST_NAME");

                entity.Property(e => e.MiscRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MISC_REF");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PrevCustomerManagers)
                    .IsUnicode(false)
                    .HasColumnName("PREV_CUSTOMER_MANAGERS");

                entity.Property(e => e.PrevCustomerPosFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PREV_CUSTOMER_POS_FLAG");

                entity.Property(e => e.ResumePath)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("RESUME_PATH");

                entity.Property(e => e.StRate)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("ST_RATE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.TransferViolationFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TRANSFER_VIOLATION_FLAG");
            });

            modelBuilder.Entity<VRtcBid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_RTC_BIDS");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.OrderNumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.RtcCount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RTC_COUNT");

                entity.Property(e => e.RtcDate)
                    .HasColumnType("DATE")
                    .HasColumnName("RTC_DATE");
            });

            modelBuilder.Entity<VSupplierContactInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SUPPLIER_CONTACT_INFO");

                entity.Property(e => e.ContactNumber)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CONTACT_NUMBER");

                entity.Property(e => e.ContactType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_TYPE");

                entity.Property(e => e.SupplierId)
                    .HasPrecision(10)
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierLocationNumber)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SUPPLIER_LOCATION_NUMBER");
            });

            modelBuilder.Entity<VSupplierPerformanceReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SUPPLIER_PERFORMANCE_REPORT");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.MaxEndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("MAX_END_DATE");

                entity.Property(e => e.MinStartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("MIN_START_DATE");

                entity.Property(e => e.NegativeFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NEGATIVE_FLAG");

                entity.Property(e => e.PoNumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBER");

                entity.Property(e => e.PositionDescription)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("POSITION_DESCRIPTION");

                entity.Property(e => e.SupplierName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_NAME");
            });

            modelBuilder.Entity<VTeiOrderAllDataFile>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_TEI_ORDER_ALL_DATA_FILE");

                entity.Property(e => e.Additionaluser1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER1");

                entity.Property(e => e.Additionaluser10)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER10")
                    .IsFixedLength(true);

                entity.Property(e => e.Additionaluser2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER2");

                entity.Property(e => e.Additionaluser3)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER3")
                    .IsFixedLength(true);

                entity.Property(e => e.Additionaluser4)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER4")
                    .IsFixedLength(true);

                entity.Property(e => e.Additionaluser5)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER5")
                    .IsFixedLength(true);

                entity.Property(e => e.Additionaluser6)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER6")
                    .IsFixedLength(true);

                entity.Property(e => e.Additionaluser7)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER7")
                    .IsFixedLength(true);

                entity.Property(e => e.Additionaluser8)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER8")
                    .IsFixedLength(true);

                entity.Property(e => e.Additionaluser9)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER9")
                    .IsFixedLength(true);

                entity.Property(e => e.B2bposnumber)
                    .HasColumnType("NUMBER")
                    .HasColumnName("B2BPOSNUMBER");

                entity.Property(e => e.City)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CITY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.Description)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Enddate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ENDDATE");

                entity.Property(e => e.Hiringmanageremail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HIRINGMANAGEREMAIL");

                entity.Property(e => e.Hiringmanagerfirstname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HIRINGMANAGERFIRSTNAME");

                entity.Property(e => e.Hiringmanagerlastname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HIRINGMANAGERLASTNAME");

                entity.Property(e => e.Hiringmanagerphone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("HIRINGMANAGERPHONE");

                entity.Property(e => e.Hoursperweek)
                    .HasColumnType("NUMBER")
                    .HasColumnName("HOURSPERWEEK");

                entity.Property(e => e.Issuance)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.Jobordernumber)
                    .HasPrecision(10)
                    .HasColumnName("JOBORDERNUMBER");

                entity.Property(e => e.OrderStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_STATUS");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.Positions)
                    .HasColumnType("NUMBER")
                    .HasColumnName("POSITIONS");

                entity.Property(e => e.Postingowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("POSTINGOWNER");

                entity.Property(e => e.Rrsnumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RRSNUMBER");

                entity.Property(e => e.Startdate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("STARTDATE");

                entity.Property(e => e.State)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("STATE");

                entity.Property(e => e.Street)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STREET");

                entity.Property(e => e.SubIssuance)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SUB_ISSUANCE");

                entity.Property(e => e.Subtype)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("SUBTYPE")
                    .IsFixedLength(true);

                entity.Property(e => e.Targetrate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TARGETRATE");

                entity.Property(e => e.Title)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TITLE");

                entity.Property(e => e.Type)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TYPE")
                    .IsFixedLength(true);

                entity.Property(e => e.ZipCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ZIP_CODE");
            });

            modelBuilder.Entity<VTeiOrderDataBackup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_TEI_ORDER_DATA_BACKUP");

                entity.Property(e => e.Additionaluser1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER1");

                entity.Property(e => e.Additionaluser10)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER10")
                    .IsFixedLength(true);

                entity.Property(e => e.Additionaluser2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER2");

                entity.Property(e => e.Additionaluser3)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER3")
                    .IsFixedLength(true);

                entity.Property(e => e.Additionaluser4)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER4")
                    .IsFixedLength(true);

                entity.Property(e => e.Additionaluser5)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER5")
                    .IsFixedLength(true);

                entity.Property(e => e.Additionaluser6)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER6")
                    .IsFixedLength(true);

                entity.Property(e => e.Additionaluser7)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER7")
                    .IsFixedLength(true);

                entity.Property(e => e.Additionaluser8)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER8")
                    .IsFixedLength(true);

                entity.Property(e => e.Additionaluser9)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER9")
                    .IsFixedLength(true);

                entity.Property(e => e.B2bposnumber)
                    .HasPrecision(10)
                    .HasColumnName("B2BPOSNUMBER");

                entity.Property(e => e.City)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CITY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.Description)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Enddate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ENDDATE");

                entity.Property(e => e.Hiringmanageremail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HIRINGMANAGEREMAIL");

                entity.Property(e => e.Hiringmanagerfirstname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HIRINGMANAGERFIRSTNAME");

                entity.Property(e => e.Hiringmanagerlastname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HIRINGMANAGERLASTNAME");

                entity.Property(e => e.Hiringmanagerphone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("HIRINGMANAGERPHONE");

                entity.Property(e => e.Hoursperweek)
                    .HasColumnType("NUMBER")
                    .HasColumnName("HOURSPERWEEK");

                entity.Property(e => e.Issuance)
                    .HasPrecision(4)
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.Jobordernumber)
                    .HasPrecision(10)
                    .HasColumnName("JOBORDERNUMBER");

                entity.Property(e => e.Positions)
                    .HasColumnType("NUMBER")
                    .HasColumnName("POSITIONS");

                entity.Property(e => e.Postingowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("POSTINGOWNER");

                entity.Property(e => e.Rrsnumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RRSNUMBER");

                entity.Property(e => e.Startdate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("STARTDATE");

                entity.Property(e => e.State)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("STATE");

                entity.Property(e => e.Street)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STREET");

                entity.Property(e => e.SubIssuance)
                    .HasPrecision(4)
                    .HasColumnName("SUB_ISSUANCE");

                entity.Property(e => e.Subtype)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("SUBTYPE")
                    .IsFixedLength(true);

                entity.Property(e => e.Targetrate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TARGETRATE");

                entity.Property(e => e.Title)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TITLE");

                entity.Property(e => e.Type)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TYPE")
                    .IsFixedLength(true);

                entity.Property(e => e.ZipCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ZIP_CODE");
            });

            modelBuilder.Entity<VTeiOrderDataFile>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_TEI_ORDER_DATA_FILE");

                entity.Property(e => e.Additionaluser1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER1");

                entity.Property(e => e.Additionaluser10)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER10")
                    .IsFixedLength(true);

                entity.Property(e => e.Additionaluser2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER2");

                entity.Property(e => e.Additionaluser3)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER3")
                    .IsFixedLength(true);

                entity.Property(e => e.Additionaluser4)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER4")
                    .IsFixedLength(true);

                entity.Property(e => e.Additionaluser5)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER5")
                    .IsFixedLength(true);

                entity.Property(e => e.Additionaluser6)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER6")
                    .IsFixedLength(true);

                entity.Property(e => e.Additionaluser7)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER7")
                    .IsFixedLength(true);

                entity.Property(e => e.Additionaluser8)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER8")
                    .IsFixedLength(true);

                entity.Property(e => e.Additionaluser9)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER9")
                    .IsFixedLength(true);

                entity.Property(e => e.Agerestrictions)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AGERESTRICTIONS");

                entity.Property(e => e.B2bposnumber)
                    .HasColumnType("NUMBER")
                    .HasColumnName("B2BPOSNUMBER");

                entity.Property(e => e.CandidateFirstName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_FIRST_NAME");

                entity.Property(e => e.CandidateLastName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_LAST_NAME");

                entity.Property(e => e.CitizenshipName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CITIZENSHIP_NAME");

                entity.Property(e => e.City)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CITY");

                entity.Property(e => e.CompetencyScore)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("COMPETENCY_SCORE");

                entity.Property(e => e.Country)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("COUNTRY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.Department)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DEPARTMENT");

                entity.Property(e => e.Deptcode)
                    .IsUnicode(false)
                    .HasColumnName("DEPTCODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.EducationLevel)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EDUCATION_LEVEL");

                entity.Property(e => e.Enddate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ENDDATE");

                entity.Property(e => e.Hiringmanageremail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HIRINGMANAGEREMAIL");

                entity.Property(e => e.Hiringmanagerfirstname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HIRINGMANAGERFIRSTNAME");

                entity.Property(e => e.Hiringmanagerlastname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HIRINGMANAGERLASTNAME");

                entity.Property(e => e.Hiringmanagerphone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("HIRINGMANAGERPHONE");

                entity.Property(e => e.Hoursperweek)
                    .HasColumnType("NUMBER")
                    .HasColumnName("HOURSPERWEEK");

                entity.Property(e => e.Issuance)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JOB_TITLE");

                entity.Property(e => e.Jobordernumber)
                    .HasMaxLength(191)
                    .IsUnicode(false)
                    .HasColumnName("JOBORDERNUMBER");

                entity.Property(e => e.Languages)
                    .IsUnicode(false)
                    .HasColumnName("LANGUAGES");

                entity.Property(e => e.OrderStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_STATUS");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.Ordernumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDERNUMBER");

                entity.Property(e => e.Positions)
                    .HasColumnType("NUMBER")
                    .HasColumnName("POSITIONS");

                entity.Property(e => e.Postalcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("POSTALCODE");

                entity.Property(e => e.Postingowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("POSTINGOWNER");

                entity.Property(e => e.PsPosition)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PS_POSITION");

                entity.Property(e => e.Rrsnumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RRSNUMBER");

                entity.Property(e => e.SpecifiedSupplier)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPECIFIED_SUPPLIER");

                entity.Property(e => e.Startdate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("STARTDATE");

                entity.Property(e => e.State)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("STATE");

                entity.Property(e => e.Street)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STREET");

                entity.Property(e => e.SubIssuance)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SUB_ISSUANCE");

                entity.Property(e => e.Subtype)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("SUBTYPE")
                    .IsFixedLength(true);

                entity.Property(e => e.SupplierId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierIds)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_IDS");

                entity.Property(e => e.Targetrate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TARGETRATE");

                entity.Property(e => e.Type)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TYPE")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VTeiOrderDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_TEI_ORDER_DATA");

                entity.Property(e => e.Additionaluser1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER1");

                entity.Property(e => e.Additionaluser10)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER10")
                    .IsFixedLength(true);

                entity.Property(e => e.Additionaluser2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER2");

                entity.Property(e => e.Additionaluser3)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER3")
                    .IsFixedLength(true);

                entity.Property(e => e.Additionaluser4)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER4")
                    .IsFixedLength(true);

                entity.Property(e => e.Additionaluser5)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER5")
                    .IsFixedLength(true);

                entity.Property(e => e.Additionaluser6)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER6")
                    .IsFixedLength(true);

                entity.Property(e => e.Additionaluser7)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER7")
                    .IsFixedLength(true);

                entity.Property(e => e.Additionaluser8)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER8")
                    .IsFixedLength(true);

                entity.Property(e => e.Additionaluser9)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDITIONALUSER9")
                    .IsFixedLength(true);

                entity.Property(e => e.Agerestrictions)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AGERESTRICTIONS");

                entity.Property(e => e.B2bposnumber)
                    .HasColumnType("NUMBER")
                    .HasColumnName("B2BPOSNUMBER");

                entity.Property(e => e.CandidateFirstName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_FIRST_NAME");

                entity.Property(e => e.CandidateLastName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CANDIDATE_LAST_NAME");

                entity.Property(e => e.CitizenshipName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CITIZENSHIP_NAME");

                entity.Property(e => e.City)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CITY");

                entity.Property(e => e.CompetencyScore)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("COMPETENCY_SCORE");

                entity.Property(e => e.Country)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("COUNTRY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.Department)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DEPARTMENT");

                entity.Property(e => e.Deptcode)
                    .IsUnicode(false)
                    .HasColumnName("DEPTCODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.EducationLevel)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EDUCATION_LEVEL");

                entity.Property(e => e.Enddate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ENDDATE");

                entity.Property(e => e.Hiringmanageremail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HIRINGMANAGEREMAIL");

                entity.Property(e => e.Hiringmanagerfirstname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HIRINGMANAGERFIRSTNAME");

                entity.Property(e => e.Hiringmanagerlastname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HIRINGMANAGERLASTNAME");

                entity.Property(e => e.Hiringmanagerphone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("HIRINGMANAGERPHONE");

                entity.Property(e => e.Hoursperweek)
                    .HasColumnType("NUMBER")
                    .HasColumnName("HOURSPERWEEK");

                entity.Property(e => e.Issuance)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ISSUANCE");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JOB_TITLE");

                entity.Property(e => e.Jobordernumber)
                    .HasMaxLength(191)
                    .IsUnicode(false)
                    .HasColumnName("JOBORDERNUMBER");

                entity.Property(e => e.Languages)
                    .IsUnicode(false)
                    .HasColumnName("LANGUAGES");

                entity.Property(e => e.OrderStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_STATUS");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_TYPE");

                entity.Property(e => e.Ordernumber)
                    .HasPrecision(10)
                    .HasColumnName("ORDERNUMBER");

                entity.Property(e => e.Positions)
                    .HasColumnType("NUMBER")
                    .HasColumnName("POSITIONS");

                entity.Property(e => e.Postalcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("POSTALCODE");

                entity.Property(e => e.Postingowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("POSTINGOWNER");

                entity.Property(e => e.PsPosition)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PS_POSITION");

                entity.Property(e => e.Rrsnumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RRSNUMBER");

                entity.Property(e => e.SpecifiedSupplier)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPECIFIED_SUPPLIER");

                entity.Property(e => e.Startdate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("STARTDATE");

                entity.Property(e => e.State)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("STATE");

                entity.Property(e => e.Street)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STREET");

                entity.Property(e => e.SubIssuance)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SUB_ISSUANCE");

                entity.Property(e => e.Subtype)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("SUBTYPE")
                    .IsFixedLength(true);

                entity.Property(e => e.SupplierId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SUPPLIER_ID");

                entity.Property(e => e.SupplierIds)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER_IDS");

                entity.Property(e => e.Targetrate)
                    .HasColumnType("NUMBER(7,2)")
                    .HasColumnName("TARGETRATE");

                entity.Property(e => e.Type)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TYPE")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VTsDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_TS_DETAILS");

                entity.Property(e => e.ExAmtBilled)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EX_AMT_BILLED");

                entity.Property(e => e.ExAmtPaid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EX_AMT_PAID");

                entity.Property(e => e.Ot2AmtBilled)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OT2_AMT_BILLED");

                entity.Property(e => e.Ot2AmtPaid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OT2_AMT_PAID");

                entity.Property(e => e.Ot2Hours)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OT2_HOURS");

                entity.Property(e => e.Ot2RateAp)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OT2_RATE_AP");

                entity.Property(e => e.Ot2RateAr)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OT2_RATE_AR");

                entity.Property(e => e.OtAmtBilled)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OT_AMT_BILLED");

                entity.Property(e => e.OtAmtPaid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OT_AMT_PAID");

                entity.Property(e => e.OtHours)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OT_HOURS");

                entity.Property(e => e.OtRateAp)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OT_RATE_AP");

                entity.Property(e => e.OtRateAr)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OT_RATE_AR");

                entity.Property(e => e.PrAmtBilled)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PR_AMT_BILLED");

                entity.Property(e => e.PrAmtPaid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PR_AMT_PAID");

                entity.Property(e => e.PrHours)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PR_HOURS");

                entity.Property(e => e.PrRateAp)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PR_RATE_AP");

                entity.Property(e => e.PrRateAr)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PR_RATE_AR");

                entity.Property(e => e.RgAmtBilled)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RG_AMT_BILLED");

                entity.Property(e => e.RgAmtPaid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RG_AMT_PAID");

                entity.Property(e => e.RgHours)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RG_HOURS");

                entity.Property(e => e.RgRateAp)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RG_RATE_AP");

                entity.Property(e => e.RgRateAr)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RG_RATE_AR");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.TotalAmtBilled)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTAL_AMT_BILLED");

                entity.Property(e => e.TotalAmtPaid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTAL_AMT_PAID");
            });

            modelBuilder.Entity<VTsDetailsMv>(entity =>
            {
                entity.HasKey(e => new { e.TimesheetNumber, e.TimesheetRevision });

                entity.ToTable("V_TS_DETAILS_MV");

                entity.Property(e => e.TimesheetNumber)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.ApprovedBy)
                    .HasColumnType("NUMBER")
                    .HasColumnName("APPROVED_BY");

                entity.Property(e => e.ApprovedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("APPROVED_DATE");

                entity.Property(e => e.Bill1AmtBilled)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BILL1_AMT_BILLED");

                entity.Property(e => e.Bill1AmtPaid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BILL1_AMT_PAID");

                entity.Property(e => e.Bill1Hours)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BILL1_HOURS");

                entity.Property(e => e.Bill1RateAp)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BILL1_RATE_AP");

                entity.Property(e => e.Bill1RateAr)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BILL1_RATE_AR");

                entity.Property(e => e.Bill2AmtBilled)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BILL2_AMT_BILLED");

                entity.Property(e => e.Bill2AmtPaid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BILL2_AMT_PAID");

                entity.Property(e => e.Bill2Hours)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BILL2_HOURS");

                entity.Property(e => e.Bill2RateAp)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BILL2_RATE_AP");

                entity.Property(e => e.Bill2RateAr)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BILL2_RATE_AR");

                entity.Property(e => e.ExAmtBilled)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EX_AMT_BILLED");

                entity.Property(e => e.ExAmtPaid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EX_AMT_PAID");

                entity.Property(e => e.Ot2AmtBilled)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OT2_AMT_BILLED");

                entity.Property(e => e.Ot2AmtPaid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OT2_AMT_PAID");

                entity.Property(e => e.Ot2Hours)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OT2_HOURS");

                entity.Property(e => e.Ot2RateAp)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OT2_RATE_AP");

                entity.Property(e => e.Ot2RateAr)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OT2_RATE_AR");

                entity.Property(e => e.OtAmtBilled)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OT_AMT_BILLED");

                entity.Property(e => e.OtAmtPaid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OT_AMT_PAID");

                entity.Property(e => e.OtHours)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OT_HOURS");

                entity.Property(e => e.OtRateAp)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OT_RATE_AP");

                entity.Property(e => e.OtRateAr)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OT_RATE_AR");

                entity.Property(e => e.PrAmtBilled)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PR_AMT_BILLED");

                entity.Property(e => e.PrAmtPaid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PR_AMT_PAID");

                entity.Property(e => e.PrHours)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PR_HOURS");

                entity.Property(e => e.PrRateAp)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PR_RATE_AP");

                entity.Property(e => e.PrRateAr)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PR_RATE_AR");

                entity.Property(e => e.RgAmtBilled)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RG_AMT_BILLED");

                entity.Property(e => e.RgAmtPaid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RG_AMT_PAID");

                entity.Property(e => e.RgHours)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RG_HOURS");

                entity.Property(e => e.RgRateAp)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RG_RATE_AP");

                entity.Property(e => e.RgRateAr)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RG_RATE_AR");

                entity.Property(e => e.TimesheetStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TIMESHEET_STATUS");

                entity.Property(e => e.TotalAmtBilled)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTAL_AMT_BILLED");

                entity.Property(e => e.TotalAmtPaid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTAL_AMT_PAID");

                entity.Property(e => e.TravelAmtBilled)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRAVEL_AMT_BILLED");

                entity.Property(e => e.TravelAmtPaid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRAVEL_AMT_PAID");

                entity.Property(e => e.TravelHours)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRAVEL_HOURS");

                entity.Property(e => e.TravelRateAp)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRAVEL_RATE_AP");

                entity.Property(e => e.TravelRateAr)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRAVEL_RATE_AR");
            });

            modelBuilder.Entity<VTsHoursExpense>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_TS_HOURS_EXPENSE");

                entity.Property(e => e.ExFoodAmount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EX_FOOD_AMOUNT");

                entity.Property(e => e.ExLodgeAmount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EX_LODGE_AMOUNT");

                entity.Property(e => e.ExTotalAmount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EX_TOTAL_AMOUNT");

                entity.Property(e => e.ExTravelAmount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EX_TRAVEL_AMOUNT");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.TotalBillHours)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTAL_BILL_HOURS");

                entity.Property(e => e.TotalNonBillHours)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTAL_NON_BILL_HOURS");
            });

            modelBuilder.Entity<VTsHoursExpenseMv>(entity =>
            {
                entity.HasKey(e => new { e.TimesheetNumber, e.TimesheetRevision });

                entity.ToTable("V_TS_HOURS_EXPENSE_MV");

                entity.Property(e => e.TimesheetNumber)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.ApprovedBy)
                    .HasColumnType("NUMBER")
                    .HasColumnName("APPROVED_BY");

                entity.Property(e => e.ApprovedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("APPROVED_DATE");

                entity.Property(e => e.BillHours)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BILL_HOURS");

                entity.Property(e => e.ExAccommodation)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EX_ACCOMMODATION");

                entity.Property(e => e.ExAllowance)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EX_ALLOWANCE");

                entity.Property(e => e.ExFoodAmount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EX_FOOD_AMOUNT");

                entity.Property(e => e.ExInterviewAmount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EX_INTERVIEW_AMOUNT");

                entity.Property(e => e.ExLodgeAmount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EX_LODGE_AMOUNT");

                entity.Property(e => e.ExOther)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EX_OTHER");

                entity.Property(e => e.ExOtherAmount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EX_OTHER_AMOUNT");

                entity.Property(e => e.ExRentalCar)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EX_RENTAL_CAR");

                entity.Property(e => e.ExTktAbroad)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EX_TKT_ABROAD");

                entity.Property(e => e.ExTktDomestic)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EX_TKT_DOMESTIC");

                entity.Property(e => e.ExTotalAmount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EX_TOTAL_AMOUNT");

                entity.Property(e => e.ExTrainingAmount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EX_TRAINING_AMOUNT");

                entity.Property(e => e.ExTravelAmount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EX_TRAVEL_AMOUNT");

                entity.Property(e => e.ExTravelKm)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EX_TRAVEL_KM");

                entity.Property(e => e.ExTravelNSw)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EX_TRAVEL_N_SW");

                entity.Property(e => e.ExTravelOther)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EX_TRAVEL_OTHER");

                entity.Property(e => e.ExTravelSw)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EX_TRAVEL_SW");

                entity.Property(e => e.NonbillHours)
                    .HasColumnType("NUMBER")
                    .HasColumnName("NONBILL_HOURS");

                entity.Property(e => e.TimesheetStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TIMESHEET_STATUS");
            });

            modelBuilder.Entity<VTsTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_TS_TEMP");

                entity.Property(e => e.THours)
                    .HasColumnType("NUMBER")
                    .HasColumnName("T_HOURS");

                entity.Property(e => e.TimesheetNumber)
                    .HasPrecision(10)
                    .HasColumnName("TIMESHEET_NUMBER");

                entity.Property(e => e.TimesheetRevision)
                    .HasPrecision(3)
                    .HasColumnName("TIMESHEET_REVISION");

                entity.Property(e => e.WorkDate)
                    .HasColumnType("DATE")
                    .HasColumnName("WORK_DATE");
            });

            modelBuilder.Entity<VUseridApproverRole>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_USERID_APPROVER_ROLE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Role)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ROLE");

                entity.Property(e => e.UserId)
                    .HasPrecision(10)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<Vacation>(entity =>
            {
                entity.HasKey(e => e.PositionNumber);

                entity.ToTable("VACATIONS");

                entity.Property(e => e.PositionNumber)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("POSITION_NUMBER");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.VacationBidNumber)
                    .HasPrecision(10)
                    .HasColumnName("VACATION_BID_NUMBER");

                entity.HasOne(d => d.PositionNumberNavigation)
                    .WithOne(p => p.Vacation)
                    .HasForeignKey<Vacation>(d => d.PositionNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VACATION_REF_POSIT_POSITION");
            });

            modelBuilder.Entity<VacationReplacement>(entity =>
            {
                entity.ToTable("VACATION_REPLACEMENT");

                entity.HasIndex(e => e.RequisitionerId, "IDX_VAC_REPL_REF_PEOPLE");

                entity.Property(e => e.VacationReplacementId)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("VACATION_REPLACEMENT_ID");

                entity.Property(e => e.AllPreferredFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ALL_PREFERRED_FLAG");

                entity.Property(e => e.ContactEmailAddress)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_EMAIL_ADDRESS");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(10)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATED_DATE");

                entity.Property(e => e.CustomerSupplierContactFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_SUPPLIER_CONTACT_FLAG");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.InterviewRequiredFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INTERVIEW_REQUIRED_FLAG");

                entity.Property(e => e.RequisitionerId)
                    .HasPrecision(10)
                    .HasColumnName("REQUISITIONER_ID");

                entity.Property(e => e.SameSupplierFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SAME_SUPPLIER_FLAG");

                entity.Property(e => e.SpecifiedCandidateName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SPECIFIED_CANDIDATE_NAME");

                entity.Property(e => e.SpecifiedSupplierName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SPECIFIED_SUPPLIER_NAME");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.HasOne(d => d.Requisitioner)
                    .WithMany(p => p.VacationReplacements)
                    .HasForeignKey(d => d.RequisitionerId)
                    .HasConstraintName("FK_VACATION_REF_PEOPL_PEOPLE");
            });

            modelBuilder.Entity<WorkOrder>(entity =>
            {
                entity.HasKey(e => new { e.WorkOrderNumber, e.CostCenter });

                entity.ToTable("WORK_ORDERS");

                entity.HasIndex(e => e.CostCenter, "IDX_WO_CCTR");

                entity.HasIndex(e => e.Udf3, "IDX_WO_UDF3");

                entity.HasIndex(e => e.Udf4, "IDX_WO_UDF4");

                entity.Property(e => e.WorkOrderNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORK_ORDER_NUMBER");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.WorkOrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("WORK_ORDER_TYPE");

                entity.HasOne(d => d.CostCenterNavigation)
                    .WithMany(p => p.WorkOrders)
                    .HasForeignKey(d => d.CostCenter)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WORKORDE_REF_COSTC_COST_CEN");
            });

            modelBuilder.Entity<WorkOrdersNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WORK_ORDERS_NEW");

                entity.Property(e => e.CostCenter)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_CENTER");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.Udf1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF1");

                entity.Property(e => e.Udf2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF2");

                entity.Property(e => e.Udf3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF3");

                entity.Property(e => e.Udf4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UDF4");

                entity.Property(e => e.WorkOrderNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORK_ORDER_NUMBER");

                entity.Property(e => e.WorkOrderType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("WORK_ORDER_TYPE");
            });

            modelBuilder.HasSequence("ACCOUNT_CODE_IMPORT_SEQ");

            modelBuilder.HasSequence("ACCOUNTING_FEEDS_SEQ");

            modelBuilder.HasSequence("ALGORITHM_OVERRIDE_REASON_SEQ");

            modelBuilder.HasSequence("ALGORITHM_OVERRIDE_SUPP_SEQ");

            modelBuilder.HasSequence("ALGORITHMS_SEQ");

            modelBuilder.HasSequence("AMENDMENTS_SEQ");

            modelBuilder.HasSequence("AMENDMENTS_TEMP_SEQ");

            modelBuilder.HasSequence("APPROVALS_SEQ");

            modelBuilder.HasSequence("APPROVALS_TEMP_SEQ");

            modelBuilder.HasSequence("BACKGROUND_VERIFICATION_SEQ");

            modelBuilder.HasSequence("BID_BREAKDOWNS_HISTORY_SEQ");

            modelBuilder.HasSequence("BID_BREAKDOWNS_SEQ");

            modelBuilder.HasSequence("BID_BUCKET_SEQ");

            modelBuilder.HasSequence("BID_HISTORY_SEQ");

            modelBuilder.HasSequence("BID_SEQ");

            modelBuilder.HasSequence("BIDS_SEQ");

            modelBuilder.HasSequence("BILLING_INCREMENTS_SEQ");

            modelBuilder.HasSequence("BRIEF_ATTACHMENTS_SEQ");

            modelBuilder.HasSequence("BRIEF_TYPE_SEQ");

            modelBuilder.HasSequence("BRIEFS_SEQ");

            modelBuilder.HasSequence("BROADCAST_DETAIL_SEQ");

            modelBuilder.HasSequence("BROADCASTS_SEQ");

            modelBuilder.HasSequence("CANDIDATES_SEQ");

            modelBuilder.HasSequence("CHECK_REGISTER_SEQ");

            modelBuilder.HasSequence("COST_MANAGEMENT_SEQ");

            modelBuilder.HasSequence("DACOR_FEED_OUT_SEQ").IsCyclic();

            modelBuilder.HasSequence("DEVIATIONS_SEQ");

            modelBuilder.HasSequence("DORF_TIMESHEET_DATA_SEQ");

            modelBuilder.HasSequence("DRAFT_APPROVALS_SEQ");

            modelBuilder.HasSequence("DRAFT_ORDERS_SEQ");

            modelBuilder.HasSequence("EDI_SEQ");

            modelBuilder.HasSequence("ERROR_LOG_DETAILS_SEQ");

            modelBuilder.HasSequence("EXIT_CANCEL_SEQ");

            modelBuilder.HasSequence("FEED_GROUPS_SEQ");

            modelBuilder.HasSequence("HELP_LINKS_SEQ");

            modelBuilder.HasSequence("HELP_MENU_SEQ");

            modelBuilder.HasSequence("HELP_SUB_MENU_SEQ");

            modelBuilder.HasSequence("INACTIVE_PO_REPORT_SEQ");

            modelBuilder.HasSequence("INTERVIEW_APPROVALS_SEQ");

            modelBuilder.HasSequence("INTERVIEW_DETAILS_HISTORY_SEQ");

            modelBuilder.HasSequence("INTERVIEW_DETAILS_SEQ");

            modelBuilder.HasSequence("INTERVIEW_FEEDBACK_SEQ");

            modelBuilder.HasSequence("INVOICE_NUMBER_SEQ");

            modelBuilder.HasSequence("LOCATIONS_SEQ");

            modelBuilder.HasSequence("MESSAGE_ID_SEQ");

            modelBuilder.HasSequence("METRICSID_SEQ");

            modelBuilder.HasSequence("MICROSOFTSEQDTPROPERTIES");

            modelBuilder.HasSequence("OPN_SEQ");

            modelBuilder.HasSequence("OPN_SUPPLIER_SEQ");

            modelBuilder.HasSequence("ORDER_APPROVAL_HISTORY_SEQ");

            modelBuilder.HasSequence("ORDER_HISTORY_SEQ");

            modelBuilder.HasSequence("ORDER_NOTES_SEQ");

            modelBuilder.HasSequence("ORDER_RESPONSIBILITIES_SEQ");

            modelBuilder.HasSequence("ORDER_TASKS_SEQ");

            modelBuilder.HasSequence("ORDERS_SEQ");

            modelBuilder.HasSequence("OUTGOING_MAIL_SEQ");

            modelBuilder.HasSequence("PAGES_SEQ");

            modelBuilder.HasSequence("PARTIAL_SAVES_SEQ");

            modelBuilder.HasSequence("PEOPLE_SEQ");

            modelBuilder.HasSequence("PERFORMANCE_REVIEWS_SEQ");

            modelBuilder.HasSequence("POS_MULT_OPT_HIST_SEQ");

            modelBuilder.HasSequence("POS_MULT_OPT_HIST_TEMP_SEQ");

            modelBuilder.HasSequence("POSITION_HISTORY_SEQ");

            modelBuilder.HasSequence("POSITIONS_SEQ");

            modelBuilder.HasSequence("PROCESS_ERROR_LOG_SEQ");

            modelBuilder.HasSequence("PROCESS_ID_SEQ");

            modelBuilder.HasSequence("PRODUCT_MAIN_SEQ");

            modelBuilder.HasSequence("PRODUCT_SUB_SEQ");

            modelBuilder.HasSequence("PS_FEED_DATA_SEQ");

            modelBuilder.HasSequence("PS_FEED_DATA_SEQ_TEMP");

            modelBuilder.HasSequence("PS_FEED_MASTER_SEQ");

            modelBuilder.HasSequence("PS_FEED_MASTER_SEQ_TEMP");

            modelBuilder.HasSequence("PS_POSITION_MAPPING_SEQ");

            modelBuilder.HasSequence("PURCHASE_ORDERS_HIST_TEMP_SEQ");

            modelBuilder.HasSequence("PURCHASE_ORDERS_HISTORY_SEQ");

            modelBuilder.HasSequence("RENEWALS_SEQ");

            modelBuilder.HasSequence("RESUME_SEQ");

            modelBuilder.HasSequence("RRS_ORDER_DATA_SEQ");

            modelBuilder.HasSequence("RRS_PO_FEED_ARCHIEVE_SEQ");

            modelBuilder.HasSequence("RRS_PO_FILEID_FEED_DATA_SEQ");

            modelBuilder.HasSequence("RRS_PO_FILEID_FEED_ID_SEQ");

            modelBuilder.HasSequence("RUN_SEQ");

            modelBuilder.HasSequence("SEQTEST");

            modelBuilder.HasSequence("SUPID_SEQ");

            modelBuilder.HasSequence("SUPPID_SEQ");

            modelBuilder.HasSequence("SUPPLIER_ALGORITHM_HISTORY_SEQ");

            modelBuilder.HasSequence("SUPPLIER_CONTACT_PERSONNEL_SEQ");

            modelBuilder.HasSequence("SUPPLIER_HISTORY_SEQ");

            modelBuilder.HasSequence("SUPPLIER_LOCATION_SEQ");

            modelBuilder.HasSequence("SUPPLIERS_SEQ");

            modelBuilder.HasSequence("SURVEYQUESTIONS_SEQ");

            modelBuilder.HasSequence("SURVEYRESPONSES_SEQ");

            modelBuilder.HasSequence("SURVEYRESULTSCODES_SEQ");

            modelBuilder.HasSequence("SURVEYS_SEQ");

            modelBuilder.HasSequence("SURVEYTYPES_SEQ");

            modelBuilder.HasSequence("TALENTEIFEEDDATA_SEQ");

            modelBuilder.HasSequence("TALENTEIFEEDRECORDID_SEQ");

            modelBuilder.HasSequence("TASKS_SEQ");

            modelBuilder.HasSequence("TEMP_LOC__SEQ");

            modelBuilder.HasSequence("TEMP_SUPID_SEQ");

            modelBuilder.HasSequence("TIMESHEET_HEADERS_SEQ");

            modelBuilder.HasSequence("TIMESHEET_HIST_HOURS_SEQ");

            modelBuilder.HasSequence("TIMESHEET_HISTORY_DETAILS_SEQ");

            modelBuilder.HasSequence("TIMESHEET_HISTORY_HEADERS_SEQ");

            modelBuilder.HasSequence("TIMESHEET_HISTORY_HOURS_SEQ");

            modelBuilder.HasSequence("TRANSITION_ERROR_ID");

            modelBuilder.HasSequence("TRANSITION_ERRORS_SEQ");

            modelBuilder.HasSequence("TRANSITIONS_SEQ");

            modelBuilder.HasSequence("VACATION_REPLACEMENT_SEQ");

            modelBuilder.HasSequence("WORK_ORDERS_SEQ");

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
